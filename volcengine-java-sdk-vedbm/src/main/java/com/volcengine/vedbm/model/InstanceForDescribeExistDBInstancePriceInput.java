/*
 * vedbm
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vedbm.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.vedbm.model.NodeSpecForDescribeExistDBInstancePriceInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * InstanceForDescribeExistDBInstancePriceInput
 */



public class InstanceForDescribeExistDBInstancePriceInput {
  @SerializedName("InstanceId")
  private String instanceId = null;

  @SerializedName("NodeSpecs")
  private List<NodeSpecForDescribeExistDBInstancePriceInput> nodeSpecs = null;

  @SerializedName("PrePaidStorageInGB")
  private Integer prePaidStorageInGB = null;

  /**
   * Gets or Sets storageChargeType
   */
  @JsonAdapter(StorageChargeTypeEnum.Adapter.class)
  public enum StorageChargeTypeEnum {
    @SerializedName("PostPaid")
    POSTPAID("PostPaid"),
    @SerializedName("PrePaid")
    PREPAID("PrePaid");

    private String value;

    StorageChargeTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StorageChargeTypeEnum fromValue(String input) {
      for (StorageChargeTypeEnum b : StorageChargeTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StorageChargeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StorageChargeTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StorageChargeTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StorageChargeTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("StorageChargeType")
  private StorageChargeTypeEnum storageChargeType = null;

  public InstanceForDescribeExistDBInstancePriceInput instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

   /**
   * Get instanceId
   * @return instanceId
  **/
  @Schema(description = "")
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }

  public InstanceForDescribeExistDBInstancePriceInput nodeSpecs(List<NodeSpecForDescribeExistDBInstancePriceInput> nodeSpecs) {
    this.nodeSpecs = nodeSpecs;
    return this;
  }

  public InstanceForDescribeExistDBInstancePriceInput addNodeSpecsItem(NodeSpecForDescribeExistDBInstancePriceInput nodeSpecsItem) {
    if (this.nodeSpecs == null) {
      this.nodeSpecs = new ArrayList<NodeSpecForDescribeExistDBInstancePriceInput>();
    }
    this.nodeSpecs.add(nodeSpecsItem);
    return this;
  }

   /**
   * Get nodeSpecs
   * @return nodeSpecs
  **/
  @Valid
  @Schema(description = "")
  public List<NodeSpecForDescribeExistDBInstancePriceInput> getNodeSpecs() {
    return nodeSpecs;
  }

  public void setNodeSpecs(List<NodeSpecForDescribeExistDBInstancePriceInput> nodeSpecs) {
    this.nodeSpecs = nodeSpecs;
  }

  public InstanceForDescribeExistDBInstancePriceInput prePaidStorageInGB(Integer prePaidStorageInGB) {
    this.prePaidStorageInGB = prePaidStorageInGB;
    return this;
  }

   /**
   * Get prePaidStorageInGB
   * @return prePaidStorageInGB
  **/
  @Schema(description = "")
  public Integer getPrePaidStorageInGB() {
    return prePaidStorageInGB;
  }

  public void setPrePaidStorageInGB(Integer prePaidStorageInGB) {
    this.prePaidStorageInGB = prePaidStorageInGB;
  }

  public InstanceForDescribeExistDBInstancePriceInput storageChargeType(StorageChargeTypeEnum storageChargeType) {
    this.storageChargeType = storageChargeType;
    return this;
  }

   /**
   * Get storageChargeType
   * @return storageChargeType
  **/
  @Schema(description = "")
  public StorageChargeTypeEnum getStorageChargeType() {
    return storageChargeType;
  }

  public void setStorageChargeType(StorageChargeTypeEnum storageChargeType) {
    this.storageChargeType = storageChargeType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceForDescribeExistDBInstancePriceInput instanceForDescribeExistDBInstancePriceInput = (InstanceForDescribeExistDBInstancePriceInput) o;
    return Objects.equals(this.instanceId, instanceForDescribeExistDBInstancePriceInput.instanceId) &&
        Objects.equals(this.nodeSpecs, instanceForDescribeExistDBInstancePriceInput.nodeSpecs) &&
        Objects.equals(this.prePaidStorageInGB, instanceForDescribeExistDBInstancePriceInput.prePaidStorageInGB) &&
        Objects.equals(this.storageChargeType, instanceForDescribeExistDBInstancePriceInput.storageChargeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceId, nodeSpecs, prePaidStorageInGB, storageChargeType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceForDescribeExistDBInstancePriceInput {\n");
    
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    nodeSpecs: ").append(toIndentedString(nodeSpecs)).append("\n");
    sb.append("    prePaidStorageInGB: ").append(toIndentedString(prePaidStorageInGB)).append("\n");
    sb.append("    storageChargeType: ").append(toIndentedString(storageChargeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
