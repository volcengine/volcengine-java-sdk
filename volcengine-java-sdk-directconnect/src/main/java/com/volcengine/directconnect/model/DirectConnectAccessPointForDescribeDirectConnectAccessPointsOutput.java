/*
 * directconnect
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.directconnect.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DirectConnectAccessPointForDescribeDirectConnectAccessPointsOutput
 */



public class DirectConnectAccessPointForDescribeDirectConnectAccessPointsOutput {
  @SerializedName("Description")
  private String description = null;

  @SerializedName("DirectConnectAccessPointId")
  private String directConnectAccessPointId = null;

  @SerializedName("DirectConnectAccessPointName")
  private String directConnectAccessPointName = null;

  @SerializedName("LineOperators")
  private List<String> lineOperators = null;

  @SerializedName("Location")
  private String location = null;

  @SerializedName("Status")
  private String status = null;

  public DirectConnectAccessPointForDescribeDirectConnectAccessPointsOutput description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public DirectConnectAccessPointForDescribeDirectConnectAccessPointsOutput directConnectAccessPointId(String directConnectAccessPointId) {
    this.directConnectAccessPointId = directConnectAccessPointId;
    return this;
  }

   /**
   * Get directConnectAccessPointId
   * @return directConnectAccessPointId
  **/
  @Schema(description = "")
  public String getDirectConnectAccessPointId() {
    return directConnectAccessPointId;
  }

  public void setDirectConnectAccessPointId(String directConnectAccessPointId) {
    this.directConnectAccessPointId = directConnectAccessPointId;
  }

  public DirectConnectAccessPointForDescribeDirectConnectAccessPointsOutput directConnectAccessPointName(String directConnectAccessPointName) {
    this.directConnectAccessPointName = directConnectAccessPointName;
    return this;
  }

   /**
   * Get directConnectAccessPointName
   * @return directConnectAccessPointName
  **/
  @Schema(description = "")
  public String getDirectConnectAccessPointName() {
    return directConnectAccessPointName;
  }

  public void setDirectConnectAccessPointName(String directConnectAccessPointName) {
    this.directConnectAccessPointName = directConnectAccessPointName;
  }

  public DirectConnectAccessPointForDescribeDirectConnectAccessPointsOutput lineOperators(List<String> lineOperators) {
    this.lineOperators = lineOperators;
    return this;
  }

  public DirectConnectAccessPointForDescribeDirectConnectAccessPointsOutput addLineOperatorsItem(String lineOperatorsItem) {
    if (this.lineOperators == null) {
      this.lineOperators = new ArrayList<String>();
    }
    this.lineOperators.add(lineOperatorsItem);
    return this;
  }

   /**
   * Get lineOperators
   * @return lineOperators
  **/
  @Schema(description = "")
  public List<String> getLineOperators() {
    return lineOperators;
  }

  public void setLineOperators(List<String> lineOperators) {
    this.lineOperators = lineOperators;
  }

  public DirectConnectAccessPointForDescribeDirectConnectAccessPointsOutput location(String location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @Schema(description = "")
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }

  public DirectConnectAccessPointForDescribeDirectConnectAccessPointsOutput status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectConnectAccessPointForDescribeDirectConnectAccessPointsOutput directConnectAccessPointForDescribeDirectConnectAccessPointsOutput = (DirectConnectAccessPointForDescribeDirectConnectAccessPointsOutput) o;
    return Objects.equals(this.description, directConnectAccessPointForDescribeDirectConnectAccessPointsOutput.description) &&
        Objects.equals(this.directConnectAccessPointId, directConnectAccessPointForDescribeDirectConnectAccessPointsOutput.directConnectAccessPointId) &&
        Objects.equals(this.directConnectAccessPointName, directConnectAccessPointForDescribeDirectConnectAccessPointsOutput.directConnectAccessPointName) &&
        Objects.equals(this.lineOperators, directConnectAccessPointForDescribeDirectConnectAccessPointsOutput.lineOperators) &&
        Objects.equals(this.location, directConnectAccessPointForDescribeDirectConnectAccessPointsOutput.location) &&
        Objects.equals(this.status, directConnectAccessPointForDescribeDirectConnectAccessPointsOutput.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, directConnectAccessPointId, directConnectAccessPointName, lineOperators, location, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectConnectAccessPointForDescribeDirectConnectAccessPointsOutput {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    directConnectAccessPointId: ").append(toIndentedString(directConnectAccessPointId)).append("\n");
    sb.append("    directConnectAccessPointName: ").append(toIndentedString(directConnectAccessPointName)).append("\n");
    sb.append("    lineOperators: ").append(toIndentedString(lineOperators)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
