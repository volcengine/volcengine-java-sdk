/*
 * vikingdb
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vikingdb.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DenseForListVikingdbCollectionOutput
 */



public class DenseForListVikingdbCollectionOutput {
  @SerializedName("Dim")
  private Integer dim = null;

  @SerializedName("ImageField")
  private String imageField = null;

  /**
   * Gets or Sets modelName
   */
  @JsonAdapter(ModelNameEnum.Adapter.class)
  public enum ModelNameEnum {
    @SerializedName("bge-large-zh")
    BGE_LARGE_ZH("bge-large-zh"),
    @SerializedName("bge-m3")
    BGE_M3("bge-m3"),
    @SerializedName("bge-visualized-m3")
    BGE_VISUALIZED_M3("bge-visualized-m3"),
    @SerializedName("doubao-embedding")
    DOUBAO_EMBEDDING("doubao-embedding"),
    @SerializedName("doubao-embedding-large")
    DOUBAO_EMBEDDING_LARGE("doubao-embedding-large"),
    @SerializedName("doubao-embedding-vision")
    DOUBAO_EMBEDDING_VISION("doubao-embedding-vision"),
    @SerializedName("skylark-embedding-vision")
    SKYLARK_EMBEDDING_VISION("skylark-embedding-vision");

    private String value;

    ModelNameEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ModelNameEnum fromValue(String input) {
      for (ModelNameEnum b : ModelNameEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ModelNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModelNameEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ModelNameEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ModelNameEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("ModelName")
  private ModelNameEnum modelName = null;

  @SerializedName("ModelVersion")
  private String modelVersion = null;

  @SerializedName("TextField")
  private String textField = null;

  @SerializedName("VideoField")
  private String videoField = null;

  public DenseForListVikingdbCollectionOutput dim(Integer dim) {
    this.dim = dim;
    return this;
  }

   /**
   * Get dim
   * @return dim
  **/
  @Schema(description = "")
  public Integer getDim() {
    return dim;
  }

  public void setDim(Integer dim) {
    this.dim = dim;
  }

  public DenseForListVikingdbCollectionOutput imageField(String imageField) {
    this.imageField = imageField;
    return this;
  }

   /**
   * Get imageField
   * @return imageField
  **/
  @Schema(description = "")
  public String getImageField() {
    return imageField;
  }

  public void setImageField(String imageField) {
    this.imageField = imageField;
  }

  public DenseForListVikingdbCollectionOutput modelName(ModelNameEnum modelName) {
    this.modelName = modelName;
    return this;
  }

   /**
   * Get modelName
   * @return modelName
  **/
  @Schema(description = "")
  public ModelNameEnum getModelName() {
    return modelName;
  }

  public void setModelName(ModelNameEnum modelName) {
    this.modelName = modelName;
  }

  public DenseForListVikingdbCollectionOutput modelVersion(String modelVersion) {
    this.modelVersion = modelVersion;
    return this;
  }

   /**
   * Get modelVersion
   * @return modelVersion
  **/
  @Schema(description = "")
  public String getModelVersion() {
    return modelVersion;
  }

  public void setModelVersion(String modelVersion) {
    this.modelVersion = modelVersion;
  }

  public DenseForListVikingdbCollectionOutput textField(String textField) {
    this.textField = textField;
    return this;
  }

   /**
   * Get textField
   * @return textField
  **/
  @Schema(description = "")
  public String getTextField() {
    return textField;
  }

  public void setTextField(String textField) {
    this.textField = textField;
  }

  public DenseForListVikingdbCollectionOutput videoField(String videoField) {
    this.videoField = videoField;
    return this;
  }

   /**
   * Get videoField
   * @return videoField
  **/
  @Schema(description = "")
  public String getVideoField() {
    return videoField;
  }

  public void setVideoField(String videoField) {
    this.videoField = videoField;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DenseForListVikingdbCollectionOutput denseForListVikingdbCollectionOutput = (DenseForListVikingdbCollectionOutput) o;
    return Objects.equals(this.dim, denseForListVikingdbCollectionOutput.dim) &&
        Objects.equals(this.imageField, denseForListVikingdbCollectionOutput.imageField) &&
        Objects.equals(this.modelName, denseForListVikingdbCollectionOutput.modelName) &&
        Objects.equals(this.modelVersion, denseForListVikingdbCollectionOutput.modelVersion) &&
        Objects.equals(this.textField, denseForListVikingdbCollectionOutput.textField) &&
        Objects.equals(this.videoField, denseForListVikingdbCollectionOutput.videoField);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dim, imageField, modelName, modelVersion, textField, videoField);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DenseForListVikingdbCollectionOutput {\n");
    
    sb.append("    dim: ").append(toIndentedString(dim)).append("\n");
    sb.append("    imageField: ").append(toIndentedString(imageField)).append("\n");
    sb.append("    modelName: ").append(toIndentedString(modelName)).append("\n");
    sb.append("    modelVersion: ").append(toIndentedString(modelVersion)).append("\n");
    sb.append("    textField: ").append(toIndentedString(textField)).append("\n");
    sb.append("    videoField: ").append(toIndentedString(videoField)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
