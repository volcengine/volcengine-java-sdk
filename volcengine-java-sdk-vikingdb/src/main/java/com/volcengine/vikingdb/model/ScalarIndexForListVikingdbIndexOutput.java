/*
 * vikingdb
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vikingdb.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.vikingdb.model.DefaultValueForListVikingdbIndexOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ScalarIndexForListVikingdbIndexOutput
 */



public class ScalarIndexForListVikingdbIndexOutput {
  @SerializedName("DefaultValue")
  private DefaultValueForListVikingdbIndexOutput defaultValue = null;

  @SerializedName("Dim")
  private Integer dim = null;

  @SerializedName("FieldName")
  private String fieldName = null;

  /**
   * Gets or Sets fieldType
   */
  @JsonAdapter(FieldTypeEnum.Adapter.class)
  public enum FieldTypeEnum {
    @SerializedName("vector")
    VECTOR("vector"),
    @SerializedName("sparse_vector")
    SPARSE_VECTOR("sparse_vector"),
    @SerializedName("string")
    STRING("string"),
    @SerializedName("int64")
    INT64("int64"),
    @SerializedName("float32")
    FLOAT32("float32"),
    @SerializedName("bool")
    BOOL("bool"),
    @SerializedName("list<string>")
    LIST_STRING_("list<string>"),
    @SerializedName("list<int64>")
    LIST_INT64_("list<int64>"),
    @SerializedName("text")
    TEXT("text"),
    @SerializedName("image")
    IMAGE("image"),
    @SerializedName("video")
    VIDEO("video");

    private String value;

    FieldTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FieldTypeEnum fromValue(String input) {
      for (FieldTypeEnum b : FieldTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FieldTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FieldTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public FieldTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return FieldTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("FieldType")
  private FieldTypeEnum fieldType = null;

  @SerializedName("IsPrimaryKey")
  private Boolean isPrimaryKey = null;

  public ScalarIndexForListVikingdbIndexOutput defaultValue(DefaultValueForListVikingdbIndexOutput defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * Get defaultValue
   * @return defaultValue
  **/
  @Valid
  @Schema(description = "")
  public DefaultValueForListVikingdbIndexOutput getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(DefaultValueForListVikingdbIndexOutput defaultValue) {
    this.defaultValue = defaultValue;
  }

  public ScalarIndexForListVikingdbIndexOutput dim(Integer dim) {
    this.dim = dim;
    return this;
  }

   /**
   * Get dim
   * @return dim
  **/
  @Schema(description = "")
  public Integer getDim() {
    return dim;
  }

  public void setDim(Integer dim) {
    this.dim = dim;
  }

  public ScalarIndexForListVikingdbIndexOutput fieldName(String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

   /**
   * Get fieldName
   * @return fieldName
  **/
 @Size(min=1,max=128)  @Schema(description = "")
  public String getFieldName() {
    return fieldName;
  }

  public void setFieldName(String fieldName) {
    this.fieldName = fieldName;
  }

  public ScalarIndexForListVikingdbIndexOutput fieldType(FieldTypeEnum fieldType) {
    this.fieldType = fieldType;
    return this;
  }

   /**
   * Get fieldType
   * @return fieldType
  **/
  @Schema(description = "")
  public FieldTypeEnum getFieldType() {
    return fieldType;
  }

  public void setFieldType(FieldTypeEnum fieldType) {
    this.fieldType = fieldType;
  }

  public ScalarIndexForListVikingdbIndexOutput isPrimaryKey(Boolean isPrimaryKey) {
    this.isPrimaryKey = isPrimaryKey;
    return this;
  }

   /**
   * Get isPrimaryKey
   * @return isPrimaryKey
  **/
  @Schema(description = "")
  public Boolean isIsPrimaryKey() {
    return isPrimaryKey;
  }

  public void setIsPrimaryKey(Boolean isPrimaryKey) {
    this.isPrimaryKey = isPrimaryKey;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScalarIndexForListVikingdbIndexOutput scalarIndexForListVikingdbIndexOutput = (ScalarIndexForListVikingdbIndexOutput) o;
    return Objects.equals(this.defaultValue, scalarIndexForListVikingdbIndexOutput.defaultValue) &&
        Objects.equals(this.dim, scalarIndexForListVikingdbIndexOutput.dim) &&
        Objects.equals(this.fieldName, scalarIndexForListVikingdbIndexOutput.fieldName) &&
        Objects.equals(this.fieldType, scalarIndexForListVikingdbIndexOutput.fieldType) &&
        Objects.equals(this.isPrimaryKey, scalarIndexForListVikingdbIndexOutput.isPrimaryKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultValue, dim, fieldName, fieldType, isPrimaryKey);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScalarIndexForListVikingdbIndexOutput {\n");
    
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    dim: ").append(toIndentedString(dim)).append("\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    isPrimaryKey: ").append(toIndentedString(isPrimaryKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
