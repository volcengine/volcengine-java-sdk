/*
 * dms20250101
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.dms20250101.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.dms20250101.model.ListConfigForGetTaskOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * TaskConfigForGetTaskOutput
 */



public class TaskConfigForGetTaskOutput {
  @SerializedName("ListConfig")
  private ListConfigForGetTaskOutput listConfig = null;

  /**
   * Gets or Sets overwritePolicy
   */
  @JsonAdapter(OverwritePolicyEnum.Adapter.class)
  public enum OverwritePolicyEnum {
    @SerializedName("Force")
    FORCE("Force"),
    @SerializedName("None")
    NONE("None"),
    @SerializedName("LastModify")
    LASTMODIFY("LastModify");

    private String value;

    OverwritePolicyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OverwritePolicyEnum fromValue(String input) {
      for (OverwritePolicyEnum b : OverwritePolicyEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OverwritePolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OverwritePolicyEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public OverwritePolicyEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return OverwritePolicyEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("OverwritePolicy")
  private OverwritePolicyEnum overwritePolicy = null;

  @SerializedName("StorageClassDirective")
  private String storageClassDirective = null;

  /**
   * Gets or Sets symlinkPolicy
   */
  @JsonAdapter(SymlinkPolicyEnum.Adapter.class)
  public enum SymlinkPolicyEnum {
    @SerializedName("Skip")
    SKIP("Skip"),
    @SerializedName("Follow")
    FOLLOW("Follow");

    private String value;

    SymlinkPolicyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SymlinkPolicyEnum fromValue(String input) {
      for (SymlinkPolicyEnum b : SymlinkPolicyEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SymlinkPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SymlinkPolicyEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SymlinkPolicyEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SymlinkPolicyEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("SymlinkPolicy")
  private SymlinkPolicyEnum symlinkPolicy = null;

  public TaskConfigForGetTaskOutput listConfig(ListConfigForGetTaskOutput listConfig) {
    this.listConfig = listConfig;
    return this;
  }

   /**
   * Get listConfig
   * @return listConfig
  **/
  @Valid
  @Schema(description = "")
  public ListConfigForGetTaskOutput getListConfig() {
    return listConfig;
  }

  public void setListConfig(ListConfigForGetTaskOutput listConfig) {
    this.listConfig = listConfig;
  }

  public TaskConfigForGetTaskOutput overwritePolicy(OverwritePolicyEnum overwritePolicy) {
    this.overwritePolicy = overwritePolicy;
    return this;
  }

   /**
   * Get overwritePolicy
   * @return overwritePolicy
  **/
  @Schema(description = "")
  public OverwritePolicyEnum getOverwritePolicy() {
    return overwritePolicy;
  }

  public void setOverwritePolicy(OverwritePolicyEnum overwritePolicy) {
    this.overwritePolicy = overwritePolicy;
  }

  public TaskConfigForGetTaskOutput storageClassDirective(String storageClassDirective) {
    this.storageClassDirective = storageClassDirective;
    return this;
  }

   /**
   * Get storageClassDirective
   * @return storageClassDirective
  **/
  @Schema(description = "")
  public String getStorageClassDirective() {
    return storageClassDirective;
  }

  public void setStorageClassDirective(String storageClassDirective) {
    this.storageClassDirective = storageClassDirective;
  }

  public TaskConfigForGetTaskOutput symlinkPolicy(SymlinkPolicyEnum symlinkPolicy) {
    this.symlinkPolicy = symlinkPolicy;
    return this;
  }

   /**
   * Get symlinkPolicy
   * @return symlinkPolicy
  **/
  @Schema(description = "")
  public SymlinkPolicyEnum getSymlinkPolicy() {
    return symlinkPolicy;
  }

  public void setSymlinkPolicy(SymlinkPolicyEnum symlinkPolicy) {
    this.symlinkPolicy = symlinkPolicy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskConfigForGetTaskOutput taskConfigForGetTaskOutput = (TaskConfigForGetTaskOutput) o;
    return Objects.equals(this.listConfig, taskConfigForGetTaskOutput.listConfig) &&
        Objects.equals(this.overwritePolicy, taskConfigForGetTaskOutput.overwritePolicy) &&
        Objects.equals(this.storageClassDirective, taskConfigForGetTaskOutput.storageClassDirective) &&
        Objects.equals(this.symlinkPolicy, taskConfigForGetTaskOutput.symlinkPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(listConfig, overwritePolicy, storageClassDirective, symlinkPolicy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskConfigForGetTaskOutput {\n");
    
    sb.append("    listConfig: ").append(toIndentedString(listConfig)).append("\n");
    sb.append("    overwritePolicy: ").append(toIndentedString(overwritePolicy)).append("\n");
    sb.append("    storageClassDirective: ").append(toIndentedString(storageClassDirective)).append("\n");
    sb.append("    symlinkPolicy: ").append(toIndentedString(symlinkPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
