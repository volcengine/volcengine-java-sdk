/*
 * ecs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.ecs.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.ecs.model.TagForImportImageInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ImportImageRequest
 */


public class ImportImageRequest {
  @SerializedName("Architecture")
  private String architecture = null;

  @SerializedName("BootMode")
  private String bootMode = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("ImageName")
  private String imageName = null;

  @SerializedName("OsType")
  private String osType = null;

  @SerializedName("Platform")
  private String platform = null;

  @SerializedName("PlatformVersion")
  private String platformVersion = null;

  @SerializedName("ProjectName")
  private String projectName = null;

  @SerializedName("Tags")
  private List<TagForImportImageInput> tags = null;

  @SerializedName("Url")
  private String url = null;

  public ImportImageRequest architecture(String architecture) {
    this.architecture = architecture;
    return this;
  }

   /**
   * Get architecture
   * @return architecture
  **/
  @Schema(description = "")
  public String getArchitecture() {
    return architecture;
  }

  public void setArchitecture(String architecture) {
    this.architecture = architecture;
  }

  public ImportImageRequest bootMode(String bootMode) {
    this.bootMode = bootMode;
    return this;
  }

   /**
   * Get bootMode
   * @return bootMode
  **/
  @Schema(description = "")
  public String getBootMode() {
    return bootMode;
  }

  public void setBootMode(String bootMode) {
    this.bootMode = bootMode;
  }

  public ImportImageRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ImportImageRequest imageName(String imageName) {
    this.imageName = imageName;
    return this;
  }

   /**
   * Get imageName
   * @return imageName
  **/
  @Schema(description = "")
  public String getImageName() {
    return imageName;
  }

  public void setImageName(String imageName) {
    this.imageName = imageName;
  }

  public ImportImageRequest osType(String osType) {
    this.osType = osType;
    return this;
  }

   /**
   * Get osType
   * @return osType
  **/
  @Schema(description = "")
  public String getOsType() {
    return osType;
  }

  public void setOsType(String osType) {
    this.osType = osType;
  }

  public ImportImageRequest platform(String platform) {
    this.platform = platform;
    return this;
  }

   /**
   * Get platform
   * @return platform
  **/
  @Schema(description = "")
  public String getPlatform() {
    return platform;
  }

  public void setPlatform(String platform) {
    this.platform = platform;
  }

  public ImportImageRequest platformVersion(String platformVersion) {
    this.platformVersion = platformVersion;
    return this;
  }

   /**
   * Get platformVersion
   * @return platformVersion
  **/
  @Schema(description = "")
  public String getPlatformVersion() {
    return platformVersion;
  }

  public void setPlatformVersion(String platformVersion) {
    this.platformVersion = platformVersion;
  }

  public ImportImageRequest projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
  @Schema(description = "")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public ImportImageRequest tags(List<TagForImportImageInput> tags) {
    this.tags = tags;
    return this;
  }

  public ImportImageRequest addTagsItem(TagForImportImageInput tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<TagForImportImageInput>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Valid
  @Schema(description = "")
  public List<TagForImportImageInput> getTags() {
    return tags;
  }

  public void setTags(List<TagForImportImageInput> tags) {
    this.tags = tags;
  }

  public ImportImageRequest url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @Schema(description = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportImageRequest importImageRequest = (ImportImageRequest) o;
    return Objects.equals(this.architecture, importImageRequest.architecture) &&
        Objects.equals(this.bootMode, importImageRequest.bootMode) &&
        Objects.equals(this.description, importImageRequest.description) &&
        Objects.equals(this.imageName, importImageRequest.imageName) &&
        Objects.equals(this.osType, importImageRequest.osType) &&
        Objects.equals(this.platform, importImageRequest.platform) &&
        Objects.equals(this.platformVersion, importImageRequest.platformVersion) &&
        Objects.equals(this.projectName, importImageRequest.projectName) &&
        Objects.equals(this.tags, importImageRequest.tags) &&
        Objects.equals(this.url, importImageRequest.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(architecture, bootMode, description, imageName, osType, platform, platformVersion, projectName, tags, url);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportImageRequest {\n");
    
    sb.append("    architecture: ").append(toIndentedString(architecture)).append("\n");
    sb.append("    bootMode: ").append(toIndentedString(bootMode)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    imageName: ").append(toIndentedString(imageName)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    platformVersion: ").append(toIndentedString(platformVersion)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
