/*
 * volc_observe
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.volcobserve.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.volcobserve.model.NotifyTemplateForListNotificationsOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * NotificationForListNotificationsOutput
 */



public class NotificationForListNotificationsOutput {
  /**
   * Gets or Sets alertMethods
   */
  @JsonAdapter(AlertMethodsEnum.Adapter.class)
  public enum AlertMethodsEnum {
    @SerializedName("Email")
    EMAIL("Email"),
    @SerializedName("Phone")
    PHONE("Phone"),
    @SerializedName("SMS")
    SMS("SMS"),
    @SerializedName("Webhook")
    WEBHOOK("Webhook");

    private String value;

    AlertMethodsEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AlertMethodsEnum fromValue(String input) {
      for (AlertMethodsEnum b : AlertMethodsEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AlertMethodsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlertMethodsEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AlertMethodsEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AlertMethodsEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("AlertMethods")
  private List<AlertMethodsEnum> alertMethods = null;

  @SerializedName("ContactGroupIds")
  private List<String> contactGroupIds = null;

  /**
   * Gets or Sets level
   */
  @JsonAdapter(LevelEnum.Adapter.class)
  public enum LevelEnum {
    @SerializedName("notice")
    NOTICE("notice"),
    @SerializedName("warning")
    WARNING("warning"),
    @SerializedName("critical")
    CRITICAL("critical"),
    @SerializedName("recovery")
    RECOVERY("recovery");

    private String value;

    LevelEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LevelEnum fromValue(String input) {
      for (LevelEnum b : LevelEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LevelEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public LevelEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return LevelEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("Level")
  private LevelEnum level = null;

  @SerializedName("NotifyTemplates")
  private List<NotifyTemplateForListNotificationsOutput> notifyTemplates = null;

  @SerializedName("WebhookIds")
  private List<String> webhookIds = null;

  public NotificationForListNotificationsOutput alertMethods(List<AlertMethodsEnum> alertMethods) {
    this.alertMethods = alertMethods;
    return this;
  }

  public NotificationForListNotificationsOutput addAlertMethodsItem(AlertMethodsEnum alertMethodsItem) {
    if (this.alertMethods == null) {
      this.alertMethods = new ArrayList<AlertMethodsEnum>();
    }
    this.alertMethods.add(alertMethodsItem);
    return this;
  }

   /**
   * Get alertMethods
   * @return alertMethods
  **/
  @Schema(description = "")
  public List<AlertMethodsEnum> getAlertMethods() {
    return alertMethods;
  }

  public void setAlertMethods(List<AlertMethodsEnum> alertMethods) {
    this.alertMethods = alertMethods;
  }

  public NotificationForListNotificationsOutput contactGroupIds(List<String> contactGroupIds) {
    this.contactGroupIds = contactGroupIds;
    return this;
  }

  public NotificationForListNotificationsOutput addContactGroupIdsItem(String contactGroupIdsItem) {
    if (this.contactGroupIds == null) {
      this.contactGroupIds = new ArrayList<String>();
    }
    this.contactGroupIds.add(contactGroupIdsItem);
    return this;
  }

   /**
   * Get contactGroupIds
   * @return contactGroupIds
  **/
  @Schema(description = "")
  public List<String> getContactGroupIds() {
    return contactGroupIds;
  }

  public void setContactGroupIds(List<String> contactGroupIds) {
    this.contactGroupIds = contactGroupIds;
  }

  public NotificationForListNotificationsOutput level(LevelEnum level) {
    this.level = level;
    return this;
  }

   /**
   * Get level
   * @return level
  **/
  @Schema(description = "")
  public LevelEnum getLevel() {
    return level;
  }

  public void setLevel(LevelEnum level) {
    this.level = level;
  }

  public NotificationForListNotificationsOutput notifyTemplates(List<NotifyTemplateForListNotificationsOutput> notifyTemplates) {
    this.notifyTemplates = notifyTemplates;
    return this;
  }

  public NotificationForListNotificationsOutput addNotifyTemplatesItem(NotifyTemplateForListNotificationsOutput notifyTemplatesItem) {
    if (this.notifyTemplates == null) {
      this.notifyTemplates = new ArrayList<NotifyTemplateForListNotificationsOutput>();
    }
    this.notifyTemplates.add(notifyTemplatesItem);
    return this;
  }

   /**
   * Get notifyTemplates
   * @return notifyTemplates
  **/
  @Valid
  @Schema(description = "")
  public List<NotifyTemplateForListNotificationsOutput> getNotifyTemplates() {
    return notifyTemplates;
  }

  public void setNotifyTemplates(List<NotifyTemplateForListNotificationsOutput> notifyTemplates) {
    this.notifyTemplates = notifyTemplates;
  }

  public NotificationForListNotificationsOutput webhookIds(List<String> webhookIds) {
    this.webhookIds = webhookIds;
    return this;
  }

  public NotificationForListNotificationsOutput addWebhookIdsItem(String webhookIdsItem) {
    if (this.webhookIds == null) {
      this.webhookIds = new ArrayList<String>();
    }
    this.webhookIds.add(webhookIdsItem);
    return this;
  }

   /**
   * Get webhookIds
   * @return webhookIds
  **/
  @Schema(description = "")
  public List<String> getWebhookIds() {
    return webhookIds;
  }

  public void setWebhookIds(List<String> webhookIds) {
    this.webhookIds = webhookIds;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationForListNotificationsOutput notificationForListNotificationsOutput = (NotificationForListNotificationsOutput) o;
    return Objects.equals(this.alertMethods, notificationForListNotificationsOutput.alertMethods) &&
        Objects.equals(this.contactGroupIds, notificationForListNotificationsOutput.contactGroupIds) &&
        Objects.equals(this.level, notificationForListNotificationsOutput.level) &&
        Objects.equals(this.notifyTemplates, notificationForListNotificationsOutput.notifyTemplates) &&
        Objects.equals(this.webhookIds, notificationForListNotificationsOutput.webhookIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertMethods, contactGroupIds, level, notifyTemplates, webhookIds);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationForListNotificationsOutput {\n");
    
    sb.append("    alertMethods: ").append(toIndentedString(alertMethods)).append("\n");
    sb.append("    contactGroupIds: ").append(toIndentedString(contactGroupIds)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    notifyTemplates: ").append(toIndentedString(notifyTemplates)).append("\n");
    sb.append("    webhookIds: ").append(toIndentedString(webhookIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
