/*
 * cloudmonitor
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.cloudmonitor.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ListNotificationsRequest
 */



public class ListNotificationsRequest {
  @SerializedName("Ids")
  private List<String> ids = null;

  /**
   * Gets or Sets levels
   */
  @JsonAdapter(LevelsEnum.Adapter.class)
  public enum LevelsEnum {
    @SerializedName("notice")
    NOTICE("notice"),
    @SerializedName("warning")
    WARNING("warning"),
    @SerializedName("critical")
    CRITICAL("critical"),
    @SerializedName("recovery")
    RECOVERY("recovery");

    private String value;

    LevelsEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LevelsEnum fromValue(String input) {
      for (LevelsEnum b : LevelsEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LevelsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LevelsEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public LevelsEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return LevelsEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("Levels")
  private List<LevelsEnum> levels = null;

  @SerializedName("Name")
  private String name = null;

  @SerializedName("PageNumber")
  private Integer pageNumber = null;

  @SerializedName("PageSize")
  private Integer pageSize = null;

  @SerializedName("RuleIds")
  private List<String> ruleIds = null;

  public ListNotificationsRequest ids(List<String> ids) {
    this.ids = ids;
    return this;
  }

  public ListNotificationsRequest addIdsItem(String idsItem) {
    if (this.ids == null) {
      this.ids = new ArrayList<String>();
    }
    this.ids.add(idsItem);
    return this;
  }

   /**
   * Get ids
   * @return ids
  **/
  @Schema(description = "")
  public List<String> getIds() {
    return ids;
  }

  public void setIds(List<String> ids) {
    this.ids = ids;
  }

  public ListNotificationsRequest levels(List<LevelsEnum> levels) {
    this.levels = levels;
    return this;
  }

  public ListNotificationsRequest addLevelsItem(LevelsEnum levelsItem) {
    if (this.levels == null) {
      this.levels = new ArrayList<LevelsEnum>();
    }
    this.levels.add(levelsItem);
    return this;
  }

   /**
   * Get levels
   * @return levels
  **/
  @Schema(description = "")
  public List<LevelsEnum> getLevels() {
    return levels;
  }

  public void setLevels(List<LevelsEnum> levels) {
    this.levels = levels;
  }

  public ListNotificationsRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ListNotificationsRequest pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

   /**
   * Get pageNumber
   * @return pageNumber
  **/
  @Schema(description = "")
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }

  public ListNotificationsRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * @return pageSize
  **/
  @Schema(description = "")
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }

  public ListNotificationsRequest ruleIds(List<String> ruleIds) {
    this.ruleIds = ruleIds;
    return this;
  }

  public ListNotificationsRequest addRuleIdsItem(String ruleIdsItem) {
    if (this.ruleIds == null) {
      this.ruleIds = new ArrayList<String>();
    }
    this.ruleIds.add(ruleIdsItem);
    return this;
  }

   /**
   * Get ruleIds
   * @return ruleIds
  **/
  @Schema(description = "")
  public List<String> getRuleIds() {
    return ruleIds;
  }

  public void setRuleIds(List<String> ruleIds) {
    this.ruleIds = ruleIds;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListNotificationsRequest listNotificationsRequest = (ListNotificationsRequest) o;
    return Objects.equals(this.ids, listNotificationsRequest.ids) &&
        Objects.equals(this.levels, listNotificationsRequest.levels) &&
        Objects.equals(this.name, listNotificationsRequest.name) &&
        Objects.equals(this.pageNumber, listNotificationsRequest.pageNumber) &&
        Objects.equals(this.pageSize, listNotificationsRequest.pageSize) &&
        Objects.equals(this.ruleIds, listNotificationsRequest.ruleIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ids, levels, name, pageNumber, pageSize, ruleIds);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListNotificationsRequest {\n");
    
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    levels: ").append(toIndentedString(levels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    ruleIds: ").append(toIndentedString(ruleIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
