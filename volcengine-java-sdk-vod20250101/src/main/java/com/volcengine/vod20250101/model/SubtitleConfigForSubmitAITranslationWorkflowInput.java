/*
 * vod20250101
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vod20250101.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * SubtitleConfigForSubmitAITranslationWorkflowInput
 */



public class SubtitleConfigForSubmitAITranslationWorkflowInput {
  @SerializedName("FontSize")
  private Integer fontSize = null;

  @SerializedName("IsEraseSource")
  private Boolean isEraseSource = null;

  @SerializedName("IsHardSubtitle")
  private Boolean isHardSubtitle = null;

  @SerializedName("MarginL")
  private Double marginL = null;

  @SerializedName("MarginR")
  private Double marginR = null;

  @SerializedName("MarginV")
  private Double marginV = null;

  @SerializedName("ShowLines")
  private Integer showLines = null;

  public SubtitleConfigForSubmitAITranslationWorkflowInput fontSize(Integer fontSize) {
    this.fontSize = fontSize;
    return this;
  }

   /**
   * Get fontSize
   * @return fontSize
  **/
  @Schema(description = "")
  public Integer getFontSize() {
    return fontSize;
  }

  public void setFontSize(Integer fontSize) {
    this.fontSize = fontSize;
  }

  public SubtitleConfigForSubmitAITranslationWorkflowInput isEraseSource(Boolean isEraseSource) {
    this.isEraseSource = isEraseSource;
    return this;
  }

   /**
   * Get isEraseSource
   * @return isEraseSource
  **/
  @Schema(description = "")
  public Boolean isIsEraseSource() {
    return isEraseSource;
  }

  public void setIsEraseSource(Boolean isEraseSource) {
    this.isEraseSource = isEraseSource;
  }

  public SubtitleConfigForSubmitAITranslationWorkflowInput isHardSubtitle(Boolean isHardSubtitle) {
    this.isHardSubtitle = isHardSubtitle;
    return this;
  }

   /**
   * Get isHardSubtitle
   * @return isHardSubtitle
  **/
  @Schema(description = "")
  public Boolean isIsHardSubtitle() {
    return isHardSubtitle;
  }

  public void setIsHardSubtitle(Boolean isHardSubtitle) {
    this.isHardSubtitle = isHardSubtitle;
  }

  public SubtitleConfigForSubmitAITranslationWorkflowInput marginL(Double marginL) {
    this.marginL = marginL;
    return this;
  }

   /**
   * Get marginL
   * @return marginL
  **/
  @Schema(description = "")
  public Double getMarginL() {
    return marginL;
  }

  public void setMarginL(Double marginL) {
    this.marginL = marginL;
  }

  public SubtitleConfigForSubmitAITranslationWorkflowInput marginR(Double marginR) {
    this.marginR = marginR;
    return this;
  }

   /**
   * Get marginR
   * @return marginR
  **/
  @Schema(description = "")
  public Double getMarginR() {
    return marginR;
  }

  public void setMarginR(Double marginR) {
    this.marginR = marginR;
  }

  public SubtitleConfigForSubmitAITranslationWorkflowInput marginV(Double marginV) {
    this.marginV = marginV;
    return this;
  }

   /**
   * Get marginV
   * @return marginV
  **/
  @Schema(description = "")
  public Double getMarginV() {
    return marginV;
  }

  public void setMarginV(Double marginV) {
    this.marginV = marginV;
  }

  public SubtitleConfigForSubmitAITranslationWorkflowInput showLines(Integer showLines) {
    this.showLines = showLines;
    return this;
  }

   /**
   * Get showLines
   * @return showLines
  **/
  @Schema(description = "")
  public Integer getShowLines() {
    return showLines;
  }

  public void setShowLines(Integer showLines) {
    this.showLines = showLines;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubtitleConfigForSubmitAITranslationWorkflowInput subtitleConfigForSubmitAITranslationWorkflowInput = (SubtitleConfigForSubmitAITranslationWorkflowInput) o;
    return Objects.equals(this.fontSize, subtitleConfigForSubmitAITranslationWorkflowInput.fontSize) &&
        Objects.equals(this.isEraseSource, subtitleConfigForSubmitAITranslationWorkflowInput.isEraseSource) &&
        Objects.equals(this.isHardSubtitle, subtitleConfigForSubmitAITranslationWorkflowInput.isHardSubtitle) &&
        Objects.equals(this.marginL, subtitleConfigForSubmitAITranslationWorkflowInput.marginL) &&
        Objects.equals(this.marginR, subtitleConfigForSubmitAITranslationWorkflowInput.marginR) &&
        Objects.equals(this.marginV, subtitleConfigForSubmitAITranslationWorkflowInput.marginV) &&
        Objects.equals(this.showLines, subtitleConfigForSubmitAITranslationWorkflowInput.showLines);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fontSize, isEraseSource, isHardSubtitle, marginL, marginR, marginV, showLines);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubtitleConfigForSubmitAITranslationWorkflowInput {\n");
    
    sb.append("    fontSize: ").append(toIndentedString(fontSize)).append("\n");
    sb.append("    isEraseSource: ").append(toIndentedString(isEraseSource)).append("\n");
    sb.append("    isHardSubtitle: ").append(toIndentedString(isHardSubtitle)).append("\n");
    sb.append("    marginL: ").append(toIndentedString(marginL)).append("\n");
    sb.append("    marginR: ").append(toIndentedString(marginR)).append("\n");
    sb.append("    marginV: ").append(toIndentedString(marginV)).append("\n");
    sb.append("    showLines: ").append(toIndentedString(showLines)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
