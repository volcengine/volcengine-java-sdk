/*
 * seccenter20240508
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.seccenter20240508.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.seccenter20240508.model.BlockForListRaspConfigsOutput;
import com.volcengine.seccenter20240508.model.FilterForListRaspConfigsOutput;
import com.volcengine.seccenter20240508.model.InjectConfigListForListRaspConfigsOutput;
import com.volcengine.seccenter20240508.model.RangeForListRaspConfigsOutput;
import com.volcengine.seccenter20240508.model.SwitchForListRaspConfigsOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DataForListRaspConfigsOutput
 */



public class DataForListRaspConfigsOutput {
  @SerializedName("AllProcessInject")
  private Boolean allProcessInject = null;

  @SerializedName("Blocks")
  private List<BlockForListRaspConfigsOutput> blocks = null;

  @SerializedName("Filters")
  private List<FilterForListRaspConfigsOutput> filters = null;

  @SerializedName("ID")
  private String ID = null;

  @SerializedName("IfProtect")
  private Boolean ifProtect = null;

  @SerializedName("InjectConfigList")
  private List<InjectConfigListForListRaspConfigsOutput> injectConfigList = null;

  @SerializedName("LocalProjectInject")
  private Boolean localProjectInject = null;

  @SerializedName("Name")
  private String name = null;

  @SerializedName("ProtectMethod")
  private String protectMethod = null;

  @SerializedName("ProtectedAgentCount")
  private Long protectedAgentCount = null;

  @SerializedName("ProtectedProcessCount")
  private Long protectedProcessCount = null;

  @SerializedName("Range")
  private RangeForListRaspConfigsOutput range = null;

  @SerializedName("Runtime")
  private String runtime = null;

  @SerializedName("Switch")
  private SwitchForListRaspConfigsOutput _switch = null;

  @SerializedName("ToBeProtectedAgentCount")
  private Long toBeProtectedAgentCount = null;

  @SerializedName("ToBeProtectedProcessCount")
  private Long toBeProtectedProcessCount = null;

  @SerializedName("TopGroupID")
  private String topGroupID = null;

  public DataForListRaspConfigsOutput allProcessInject(Boolean allProcessInject) {
    this.allProcessInject = allProcessInject;
    return this;
  }

   /**
   * Get allProcessInject
   * @return allProcessInject
  **/
  @Schema(description = "")
  public Boolean isAllProcessInject() {
    return allProcessInject;
  }

  public void setAllProcessInject(Boolean allProcessInject) {
    this.allProcessInject = allProcessInject;
  }

  public DataForListRaspConfigsOutput blocks(List<BlockForListRaspConfigsOutput> blocks) {
    this.blocks = blocks;
    return this;
  }

  public DataForListRaspConfigsOutput addBlocksItem(BlockForListRaspConfigsOutput blocksItem) {
    if (this.blocks == null) {
      this.blocks = new ArrayList<BlockForListRaspConfigsOutput>();
    }
    this.blocks.add(blocksItem);
    return this;
  }

   /**
   * Get blocks
   * @return blocks
  **/
  @Valid
  @Schema(description = "")
  public List<BlockForListRaspConfigsOutput> getBlocks() {
    return blocks;
  }

  public void setBlocks(List<BlockForListRaspConfigsOutput> blocks) {
    this.blocks = blocks;
  }

  public DataForListRaspConfigsOutput filters(List<FilterForListRaspConfigsOutput> filters) {
    this.filters = filters;
    return this;
  }

  public DataForListRaspConfigsOutput addFiltersItem(FilterForListRaspConfigsOutput filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<FilterForListRaspConfigsOutput>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @Valid
  @Schema(description = "")
  public List<FilterForListRaspConfigsOutput> getFilters() {
    return filters;
  }

  public void setFilters(List<FilterForListRaspConfigsOutput> filters) {
    this.filters = filters;
  }

  public DataForListRaspConfigsOutput ID(String ID) {
    this.ID = ID;
    return this;
  }

   /**
   * Get ID
   * @return ID
  **/
  @Schema(description = "")
  public String getID() {
    return ID;
  }

  public void setID(String ID) {
    this.ID = ID;
  }

  public DataForListRaspConfigsOutput ifProtect(Boolean ifProtect) {
    this.ifProtect = ifProtect;
    return this;
  }

   /**
   * Get ifProtect
   * @return ifProtect
  **/
  @Schema(description = "")
  public Boolean isIfProtect() {
    return ifProtect;
  }

  public void setIfProtect(Boolean ifProtect) {
    this.ifProtect = ifProtect;
  }

  public DataForListRaspConfigsOutput injectConfigList(List<InjectConfigListForListRaspConfigsOutput> injectConfigList) {
    this.injectConfigList = injectConfigList;
    return this;
  }

  public DataForListRaspConfigsOutput addInjectConfigListItem(InjectConfigListForListRaspConfigsOutput injectConfigListItem) {
    if (this.injectConfigList == null) {
      this.injectConfigList = new ArrayList<InjectConfigListForListRaspConfigsOutput>();
    }
    this.injectConfigList.add(injectConfigListItem);
    return this;
  }

   /**
   * Get injectConfigList
   * @return injectConfigList
  **/
  @Valid
  @Schema(description = "")
  public List<InjectConfigListForListRaspConfigsOutput> getInjectConfigList() {
    return injectConfigList;
  }

  public void setInjectConfigList(List<InjectConfigListForListRaspConfigsOutput> injectConfigList) {
    this.injectConfigList = injectConfigList;
  }

  public DataForListRaspConfigsOutput localProjectInject(Boolean localProjectInject) {
    this.localProjectInject = localProjectInject;
    return this;
  }

   /**
   * Get localProjectInject
   * @return localProjectInject
  **/
  @Schema(description = "")
  public Boolean isLocalProjectInject() {
    return localProjectInject;
  }

  public void setLocalProjectInject(Boolean localProjectInject) {
    this.localProjectInject = localProjectInject;
  }

  public DataForListRaspConfigsOutput name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DataForListRaspConfigsOutput protectMethod(String protectMethod) {
    this.protectMethod = protectMethod;
    return this;
  }

   /**
   * Get protectMethod
   * @return protectMethod
  **/
  @Schema(description = "")
  public String getProtectMethod() {
    return protectMethod;
  }

  public void setProtectMethod(String protectMethod) {
    this.protectMethod = protectMethod;
  }

  public DataForListRaspConfigsOutput protectedAgentCount(Long protectedAgentCount) {
    this.protectedAgentCount = protectedAgentCount;
    return this;
  }

   /**
   * Get protectedAgentCount
   * @return protectedAgentCount
  **/
  @Schema(description = "")
  public Long getProtectedAgentCount() {
    return protectedAgentCount;
  }

  public void setProtectedAgentCount(Long protectedAgentCount) {
    this.protectedAgentCount = protectedAgentCount;
  }

  public DataForListRaspConfigsOutput protectedProcessCount(Long protectedProcessCount) {
    this.protectedProcessCount = protectedProcessCount;
    return this;
  }

   /**
   * Get protectedProcessCount
   * @return protectedProcessCount
  **/
  @Schema(description = "")
  public Long getProtectedProcessCount() {
    return protectedProcessCount;
  }

  public void setProtectedProcessCount(Long protectedProcessCount) {
    this.protectedProcessCount = protectedProcessCount;
  }

  public DataForListRaspConfigsOutput range(RangeForListRaspConfigsOutput range) {
    this.range = range;
    return this;
  }

   /**
   * Get range
   * @return range
  **/
  @Valid
  @Schema(description = "")
  public RangeForListRaspConfigsOutput getRange() {
    return range;
  }

  public void setRange(RangeForListRaspConfigsOutput range) {
    this.range = range;
  }

  public DataForListRaspConfigsOutput runtime(String runtime) {
    this.runtime = runtime;
    return this;
  }

   /**
   * Get runtime
   * @return runtime
  **/
  @Schema(description = "")
  public String getRuntime() {
    return runtime;
  }

  public void setRuntime(String runtime) {
    this.runtime = runtime;
  }

  public DataForListRaspConfigsOutput _switch(SwitchForListRaspConfigsOutput _switch) {
    this._switch = _switch;
    return this;
  }

   /**
   * Get _switch
   * @return _switch
  **/
  @Valid
  @Schema(description = "")
  public SwitchForListRaspConfigsOutput getSwitch() {
    return _switch;
  }

  public void setSwitch(SwitchForListRaspConfigsOutput _switch) {
    this._switch = _switch;
  }

  public DataForListRaspConfigsOutput toBeProtectedAgentCount(Long toBeProtectedAgentCount) {
    this.toBeProtectedAgentCount = toBeProtectedAgentCount;
    return this;
  }

   /**
   * Get toBeProtectedAgentCount
   * @return toBeProtectedAgentCount
  **/
  @Schema(description = "")
  public Long getToBeProtectedAgentCount() {
    return toBeProtectedAgentCount;
  }

  public void setToBeProtectedAgentCount(Long toBeProtectedAgentCount) {
    this.toBeProtectedAgentCount = toBeProtectedAgentCount;
  }

  public DataForListRaspConfigsOutput toBeProtectedProcessCount(Long toBeProtectedProcessCount) {
    this.toBeProtectedProcessCount = toBeProtectedProcessCount;
    return this;
  }

   /**
   * Get toBeProtectedProcessCount
   * @return toBeProtectedProcessCount
  **/
  @Schema(description = "")
  public Long getToBeProtectedProcessCount() {
    return toBeProtectedProcessCount;
  }

  public void setToBeProtectedProcessCount(Long toBeProtectedProcessCount) {
    this.toBeProtectedProcessCount = toBeProtectedProcessCount;
  }

  public DataForListRaspConfigsOutput topGroupID(String topGroupID) {
    this.topGroupID = topGroupID;
    return this;
  }

   /**
   * Get topGroupID
   * @return topGroupID
  **/
  @Schema(description = "")
  public String getTopGroupID() {
    return topGroupID;
  }

  public void setTopGroupID(String topGroupID) {
    this.topGroupID = topGroupID;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataForListRaspConfigsOutput dataForListRaspConfigsOutput = (DataForListRaspConfigsOutput) o;
    return Objects.equals(this.allProcessInject, dataForListRaspConfigsOutput.allProcessInject) &&
        Objects.equals(this.blocks, dataForListRaspConfigsOutput.blocks) &&
        Objects.equals(this.filters, dataForListRaspConfigsOutput.filters) &&
        Objects.equals(this.ID, dataForListRaspConfigsOutput.ID) &&
        Objects.equals(this.ifProtect, dataForListRaspConfigsOutput.ifProtect) &&
        Objects.equals(this.injectConfigList, dataForListRaspConfigsOutput.injectConfigList) &&
        Objects.equals(this.localProjectInject, dataForListRaspConfigsOutput.localProjectInject) &&
        Objects.equals(this.name, dataForListRaspConfigsOutput.name) &&
        Objects.equals(this.protectMethod, dataForListRaspConfigsOutput.protectMethod) &&
        Objects.equals(this.protectedAgentCount, dataForListRaspConfigsOutput.protectedAgentCount) &&
        Objects.equals(this.protectedProcessCount, dataForListRaspConfigsOutput.protectedProcessCount) &&
        Objects.equals(this.range, dataForListRaspConfigsOutput.range) &&
        Objects.equals(this.runtime, dataForListRaspConfigsOutput.runtime) &&
        Objects.equals(this._switch, dataForListRaspConfigsOutput._switch) &&
        Objects.equals(this.toBeProtectedAgentCount, dataForListRaspConfigsOutput.toBeProtectedAgentCount) &&
        Objects.equals(this.toBeProtectedProcessCount, dataForListRaspConfigsOutput.toBeProtectedProcessCount) &&
        Objects.equals(this.topGroupID, dataForListRaspConfigsOutput.topGroupID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allProcessInject, blocks, filters, ID, ifProtect, injectConfigList, localProjectInject, name, protectMethod, protectedAgentCount, protectedProcessCount, range, runtime, _switch, toBeProtectedAgentCount, toBeProtectedProcessCount, topGroupID);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataForListRaspConfigsOutput {\n");
    
    sb.append("    allProcessInject: ").append(toIndentedString(allProcessInject)).append("\n");
    sb.append("    blocks: ").append(toIndentedString(blocks)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    ifProtect: ").append(toIndentedString(ifProtect)).append("\n");
    sb.append("    injectConfigList: ").append(toIndentedString(injectConfigList)).append("\n");
    sb.append("    localProjectInject: ").append(toIndentedString(localProjectInject)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    protectMethod: ").append(toIndentedString(protectMethod)).append("\n");
    sb.append("    protectedAgentCount: ").append(toIndentedString(protectedAgentCount)).append("\n");
    sb.append("    protectedProcessCount: ").append(toIndentedString(protectedProcessCount)).append("\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
    sb.append("    _switch: ").append(toIndentedString(_switch)).append("\n");
    sb.append("    toBeProtectedAgentCount: ").append(toIndentedString(toBeProtectedAgentCount)).append("\n");
    sb.append("    toBeProtectedProcessCount: ").append(toIndentedString(toBeProtectedProcessCount)).append("\n");
    sb.append("    topGroupID: ").append(toIndentedString(topGroupID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
