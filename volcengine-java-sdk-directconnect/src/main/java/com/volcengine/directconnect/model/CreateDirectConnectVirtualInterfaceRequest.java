/*
 * directconnect
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.directconnect.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.directconnect.model.TagForCreateDirectConnectVirtualInterfaceInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * CreateDirectConnectVirtualInterfaceRequest
 */



public class CreateDirectConnectVirtualInterfaceRequest {
  @SerializedName("Bandwidth")
  private Integer bandwidth = null;

  @SerializedName("BfdDetectInterval")
  private Integer bfdDetectInterval = null;

  @SerializedName("BfdDetectMultiplier")
  private Integer bfdDetectMultiplier = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("DirectConnectConnectionId")
  private String directConnectConnectionId = null;

  @SerializedName("DirectConnectGatewayId")
  private String directConnectGatewayId = null;

  @SerializedName("EnableBfd")
  private Boolean enableBfd = null;

  @SerializedName("EnableBfdEcho")
  private Boolean enableBfdEcho = null;

  @SerializedName("EnableNqa")
  private Boolean enableNqa = null;

  @SerializedName("LocalIp")
  private String localIp = null;

  @SerializedName("LocalIpv6Ip")
  private String localIpv6Ip = null;

  @SerializedName("NqaDetectInterval")
  private Integer nqaDetectInterval = null;

  @SerializedName("NqaDetectMultiplier")
  private Integer nqaDetectMultiplier = null;

  @SerializedName("PeerIp")
  private String peerIp = null;

  @SerializedName("PeerIpv6Ip")
  private String peerIpv6Ip = null;

  /**
   * Gets or Sets routeType
   */
  @JsonAdapter(RouteTypeEnum.Adapter.class)
  public enum RouteTypeEnum {
    @SerializedName("Static")
    STATIC("Static"),
    @SerializedName("BGP")
    BGP("BGP");

    private String value;

    RouteTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RouteTypeEnum fromValue(String input) {
      for (RouteTypeEnum b : RouteTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RouteTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RouteTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public RouteTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return RouteTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("RouteType")
  private RouteTypeEnum routeType = null;

  @SerializedName("Tags")
  private List<TagForCreateDirectConnectVirtualInterfaceInput> tags = null;

  @SerializedName("VirtualInterfaceName")
  private String virtualInterfaceName = null;

  @SerializedName("VlanId")
  private Integer vlanId = null;

  public CreateDirectConnectVirtualInterfaceRequest bandwidth(Integer bandwidth) {
    this.bandwidth = bandwidth;
    return this;
  }

   /**
   * Get bandwidth
   * @return bandwidth
  **/
  @Schema(description = "")
  public Integer getBandwidth() {
    return bandwidth;
  }

  public void setBandwidth(Integer bandwidth) {
    this.bandwidth = bandwidth;
  }

  public CreateDirectConnectVirtualInterfaceRequest bfdDetectInterval(Integer bfdDetectInterval) {
    this.bfdDetectInterval = bfdDetectInterval;
    return this;
  }

   /**
   * Get bfdDetectInterval
   * minimum: 200
   * maximum: 1000
   * @return bfdDetectInterval
  **/
 @Min(200) @Max(1000)  @Schema(description = "")
  public Integer getBfdDetectInterval() {
    return bfdDetectInterval;
  }

  public void setBfdDetectInterval(Integer bfdDetectInterval) {
    this.bfdDetectInterval = bfdDetectInterval;
  }

  public CreateDirectConnectVirtualInterfaceRequest bfdDetectMultiplier(Integer bfdDetectMultiplier) {
    this.bfdDetectMultiplier = bfdDetectMultiplier;
    return this;
  }

   /**
   * Get bfdDetectMultiplier
   * minimum: 3
   * maximum: 10
   * @return bfdDetectMultiplier
  **/
 @Min(3) @Max(10)  @Schema(description = "")
  public Integer getBfdDetectMultiplier() {
    return bfdDetectMultiplier;
  }

  public void setBfdDetectMultiplier(Integer bfdDetectMultiplier) {
    this.bfdDetectMultiplier = bfdDetectMultiplier;
  }

  public CreateDirectConnectVirtualInterfaceRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
 @Size(min=1,max=255)  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CreateDirectConnectVirtualInterfaceRequest directConnectConnectionId(String directConnectConnectionId) {
    this.directConnectConnectionId = directConnectConnectionId;
    return this;
  }

   /**
   * Get directConnectConnectionId
   * @return directConnectConnectionId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getDirectConnectConnectionId() {
    return directConnectConnectionId;
  }

  public void setDirectConnectConnectionId(String directConnectConnectionId) {
    this.directConnectConnectionId = directConnectConnectionId;
  }

  public CreateDirectConnectVirtualInterfaceRequest directConnectGatewayId(String directConnectGatewayId) {
    this.directConnectGatewayId = directConnectGatewayId;
    return this;
  }

   /**
   * Get directConnectGatewayId
   * @return directConnectGatewayId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getDirectConnectGatewayId() {
    return directConnectGatewayId;
  }

  public void setDirectConnectGatewayId(String directConnectGatewayId) {
    this.directConnectGatewayId = directConnectGatewayId;
  }

  public CreateDirectConnectVirtualInterfaceRequest enableBfd(Boolean enableBfd) {
    this.enableBfd = enableBfd;
    return this;
  }

   /**
   * Get enableBfd
   * @return enableBfd
  **/
  @Schema(description = "")
  public Boolean isEnableBfd() {
    return enableBfd;
  }

  public void setEnableBfd(Boolean enableBfd) {
    this.enableBfd = enableBfd;
  }

  public CreateDirectConnectVirtualInterfaceRequest enableBfdEcho(Boolean enableBfdEcho) {
    this.enableBfdEcho = enableBfdEcho;
    return this;
  }

   /**
   * Get enableBfdEcho
   * @return enableBfdEcho
  **/
  @Schema(description = "")
  public Boolean isEnableBfdEcho() {
    return enableBfdEcho;
  }

  public void setEnableBfdEcho(Boolean enableBfdEcho) {
    this.enableBfdEcho = enableBfdEcho;
  }

  public CreateDirectConnectVirtualInterfaceRequest enableNqa(Boolean enableNqa) {
    this.enableNqa = enableNqa;
    return this;
  }

   /**
   * Get enableNqa
   * @return enableNqa
  **/
  @Schema(description = "")
  public Boolean isEnableNqa() {
    return enableNqa;
  }

  public void setEnableNqa(Boolean enableNqa) {
    this.enableNqa = enableNqa;
  }

  public CreateDirectConnectVirtualInterfaceRequest localIp(String localIp) {
    this.localIp = localIp;
    return this;
  }

   /**
   * Get localIp
   * @return localIp
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getLocalIp() {
    return localIp;
  }

  public void setLocalIp(String localIp) {
    this.localIp = localIp;
  }

  public CreateDirectConnectVirtualInterfaceRequest localIpv6Ip(String localIpv6Ip) {
    this.localIpv6Ip = localIpv6Ip;
    return this;
  }

   /**
   * Get localIpv6Ip
   * @return localIpv6Ip
  **/
  @Schema(description = "")
  public String getLocalIpv6Ip() {
    return localIpv6Ip;
  }

  public void setLocalIpv6Ip(String localIpv6Ip) {
    this.localIpv6Ip = localIpv6Ip;
  }

  public CreateDirectConnectVirtualInterfaceRequest nqaDetectInterval(Integer nqaDetectInterval) {
    this.nqaDetectInterval = nqaDetectInterval;
    return this;
  }

   /**
   * Get nqaDetectInterval
   * minimum: 1000
   * maximum: 5000
   * @return nqaDetectInterval
  **/
 @Min(1000) @Max(5000)  @Schema(description = "")
  public Integer getNqaDetectInterval() {
    return nqaDetectInterval;
  }

  public void setNqaDetectInterval(Integer nqaDetectInterval) {
    this.nqaDetectInterval = nqaDetectInterval;
  }

  public CreateDirectConnectVirtualInterfaceRequest nqaDetectMultiplier(Integer nqaDetectMultiplier) {
    this.nqaDetectMultiplier = nqaDetectMultiplier;
    return this;
  }

   /**
   * Get nqaDetectMultiplier
   * minimum: 3
   * maximum: 8
   * @return nqaDetectMultiplier
  **/
 @Min(3) @Max(8)  @Schema(description = "")
  public Integer getNqaDetectMultiplier() {
    return nqaDetectMultiplier;
  }

  public void setNqaDetectMultiplier(Integer nqaDetectMultiplier) {
    this.nqaDetectMultiplier = nqaDetectMultiplier;
  }

  public CreateDirectConnectVirtualInterfaceRequest peerIp(String peerIp) {
    this.peerIp = peerIp;
    return this;
  }

   /**
   * Get peerIp
   * @return peerIp
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getPeerIp() {
    return peerIp;
  }

  public void setPeerIp(String peerIp) {
    this.peerIp = peerIp;
  }

  public CreateDirectConnectVirtualInterfaceRequest peerIpv6Ip(String peerIpv6Ip) {
    this.peerIpv6Ip = peerIpv6Ip;
    return this;
  }

   /**
   * Get peerIpv6Ip
   * @return peerIpv6Ip
  **/
  @Schema(description = "")
  public String getPeerIpv6Ip() {
    return peerIpv6Ip;
  }

  public void setPeerIpv6Ip(String peerIpv6Ip) {
    this.peerIpv6Ip = peerIpv6Ip;
  }

  public CreateDirectConnectVirtualInterfaceRequest routeType(RouteTypeEnum routeType) {
    this.routeType = routeType;
    return this;
  }

   /**
   * Get routeType
   * @return routeType
  **/
  @Schema(description = "")
  public RouteTypeEnum getRouteType() {
    return routeType;
  }

  public void setRouteType(RouteTypeEnum routeType) {
    this.routeType = routeType;
  }

  public CreateDirectConnectVirtualInterfaceRequest tags(List<TagForCreateDirectConnectVirtualInterfaceInput> tags) {
    this.tags = tags;
    return this;
  }

  public CreateDirectConnectVirtualInterfaceRequest addTagsItem(TagForCreateDirectConnectVirtualInterfaceInput tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<TagForCreateDirectConnectVirtualInterfaceInput>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Valid
  @Schema(description = "")
  public List<TagForCreateDirectConnectVirtualInterfaceInput> getTags() {
    return tags;
  }

  public void setTags(List<TagForCreateDirectConnectVirtualInterfaceInput> tags) {
    this.tags = tags;
  }

  public CreateDirectConnectVirtualInterfaceRequest virtualInterfaceName(String virtualInterfaceName) {
    this.virtualInterfaceName = virtualInterfaceName;
    return this;
  }

   /**
   * Get virtualInterfaceName
   * @return virtualInterfaceName
  **/
 @Size(min=1,max=128)  @Schema(description = "")
  public String getVirtualInterfaceName() {
    return virtualInterfaceName;
  }

  public void setVirtualInterfaceName(String virtualInterfaceName) {
    this.virtualInterfaceName = virtualInterfaceName;
  }

  public CreateDirectConnectVirtualInterfaceRequest vlanId(Integer vlanId) {
    this.vlanId = vlanId;
    return this;
  }

   /**
   * Get vlanId
   * @return vlanId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public Integer getVlanId() {
    return vlanId;
  }

  public void setVlanId(Integer vlanId) {
    this.vlanId = vlanId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDirectConnectVirtualInterfaceRequest createDirectConnectVirtualInterfaceRequest = (CreateDirectConnectVirtualInterfaceRequest) o;
    return Objects.equals(this.bandwidth, createDirectConnectVirtualInterfaceRequest.bandwidth) &&
        Objects.equals(this.bfdDetectInterval, createDirectConnectVirtualInterfaceRequest.bfdDetectInterval) &&
        Objects.equals(this.bfdDetectMultiplier, createDirectConnectVirtualInterfaceRequest.bfdDetectMultiplier) &&
        Objects.equals(this.description, createDirectConnectVirtualInterfaceRequest.description) &&
        Objects.equals(this.directConnectConnectionId, createDirectConnectVirtualInterfaceRequest.directConnectConnectionId) &&
        Objects.equals(this.directConnectGatewayId, createDirectConnectVirtualInterfaceRequest.directConnectGatewayId) &&
        Objects.equals(this.enableBfd, createDirectConnectVirtualInterfaceRequest.enableBfd) &&
        Objects.equals(this.enableBfdEcho, createDirectConnectVirtualInterfaceRequest.enableBfdEcho) &&
        Objects.equals(this.enableNqa, createDirectConnectVirtualInterfaceRequest.enableNqa) &&
        Objects.equals(this.localIp, createDirectConnectVirtualInterfaceRequest.localIp) &&
        Objects.equals(this.localIpv6Ip, createDirectConnectVirtualInterfaceRequest.localIpv6Ip) &&
        Objects.equals(this.nqaDetectInterval, createDirectConnectVirtualInterfaceRequest.nqaDetectInterval) &&
        Objects.equals(this.nqaDetectMultiplier, createDirectConnectVirtualInterfaceRequest.nqaDetectMultiplier) &&
        Objects.equals(this.peerIp, createDirectConnectVirtualInterfaceRequest.peerIp) &&
        Objects.equals(this.peerIpv6Ip, createDirectConnectVirtualInterfaceRequest.peerIpv6Ip) &&
        Objects.equals(this.routeType, createDirectConnectVirtualInterfaceRequest.routeType) &&
        Objects.equals(this.tags, createDirectConnectVirtualInterfaceRequest.tags) &&
        Objects.equals(this.virtualInterfaceName, createDirectConnectVirtualInterfaceRequest.virtualInterfaceName) &&
        Objects.equals(this.vlanId, createDirectConnectVirtualInterfaceRequest.vlanId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bandwidth, bfdDetectInterval, bfdDetectMultiplier, description, directConnectConnectionId, directConnectGatewayId, enableBfd, enableBfdEcho, enableNqa, localIp, localIpv6Ip, nqaDetectInterval, nqaDetectMultiplier, peerIp, peerIpv6Ip, routeType, tags, virtualInterfaceName, vlanId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDirectConnectVirtualInterfaceRequest {\n");
    
    sb.append("    bandwidth: ").append(toIndentedString(bandwidth)).append("\n");
    sb.append("    bfdDetectInterval: ").append(toIndentedString(bfdDetectInterval)).append("\n");
    sb.append("    bfdDetectMultiplier: ").append(toIndentedString(bfdDetectMultiplier)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    directConnectConnectionId: ").append(toIndentedString(directConnectConnectionId)).append("\n");
    sb.append("    directConnectGatewayId: ").append(toIndentedString(directConnectGatewayId)).append("\n");
    sb.append("    enableBfd: ").append(toIndentedString(enableBfd)).append("\n");
    sb.append("    enableBfdEcho: ").append(toIndentedString(enableBfdEcho)).append("\n");
    sb.append("    enableNqa: ").append(toIndentedString(enableNqa)).append("\n");
    sb.append("    localIp: ").append(toIndentedString(localIp)).append("\n");
    sb.append("    localIpv6Ip: ").append(toIndentedString(localIpv6Ip)).append("\n");
    sb.append("    nqaDetectInterval: ").append(toIndentedString(nqaDetectInterval)).append("\n");
    sb.append("    nqaDetectMultiplier: ").append(toIndentedString(nqaDetectMultiplier)).append("\n");
    sb.append("    peerIp: ").append(toIndentedString(peerIp)).append("\n");
    sb.append("    peerIpv6Ip: ").append(toIndentedString(peerIpv6Ip)).append("\n");
    sb.append("    routeType: ").append(toIndentedString(routeType)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    virtualInterfaceName: ").append(toIndentedString(virtualInterfaceName)).append("\n");
    sb.append("    vlanId: ").append(toIndentedString(vlanId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
