/*
 * vod20250101
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vod20250101.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.vod20250101.model.TaskForStartExecutionInput;
import com.volcengine.vod20250101.model.TemplateForStartExecutionInput;
import com.volcengine.vod20250101.model.WorkflowForStartExecutionInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ConvertOperationForStartExecutionInput
 */



public class ConvertOperationForStartExecutionInput {
  @SerializedName("Task")
  private TaskForStartExecutionInput task = null;

  @SerializedName("Template")
  private TemplateForStartExecutionInput template = null;

  @SerializedName("Type")
  private String type = null;

  @SerializedName("Workflow")
  private WorkflowForStartExecutionInput workflow = null;

  public ConvertOperationForStartExecutionInput task(TaskForStartExecutionInput task) {
    this.task = task;
    return this;
  }

   /**
   * Get task
   * @return task
  **/
  @Valid
  @Schema(description = "")
  public TaskForStartExecutionInput getTask() {
    return task;
  }

  public void setTask(TaskForStartExecutionInput task) {
    this.task = task;
  }

  public ConvertOperationForStartExecutionInput template(TemplateForStartExecutionInput template) {
    this.template = template;
    return this;
  }

   /**
   * Get template
   * @return template
  **/
  @Valid
  @Schema(description = "")
  public TemplateForStartExecutionInput getTemplate() {
    return template;
  }

  public void setTemplate(TemplateForStartExecutionInput template) {
    this.template = template;
  }

  public ConvertOperationForStartExecutionInput type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public ConvertOperationForStartExecutionInput workflow(WorkflowForStartExecutionInput workflow) {
    this.workflow = workflow;
    return this;
  }

   /**
   * Get workflow
   * @return workflow
  **/
  @Valid
  @Schema(description = "")
  public WorkflowForStartExecutionInput getWorkflow() {
    return workflow;
  }

  public void setWorkflow(WorkflowForStartExecutionInput workflow) {
    this.workflow = workflow;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConvertOperationForStartExecutionInput convertOperationForStartExecutionInput = (ConvertOperationForStartExecutionInput) o;
    return Objects.equals(this.task, convertOperationForStartExecutionInput.task) &&
        Objects.equals(this.template, convertOperationForStartExecutionInput.template) &&
        Objects.equals(this.type, convertOperationForStartExecutionInput.type) &&
        Objects.equals(this.workflow, convertOperationForStartExecutionInput.workflow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(task, template, type, workflow);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConvertOperationForStartExecutionInput {\n");
    
    sb.append("    task: ").append(toIndentedString(task)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    workflow: ").append(toIndentedString(workflow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
