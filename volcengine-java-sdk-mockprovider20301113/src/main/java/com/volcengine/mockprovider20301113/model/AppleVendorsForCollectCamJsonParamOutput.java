/*
 * mock_provider20301113
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.mockprovider20301113.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.mockprovider20301113.model.BoboboForCollectCamJsonParamOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * AppleVendorsForCollectCamJsonParamOutput
 */



public class AppleVendorsForCollectCamJsonParamOutput {
  @SerializedName("Id")
  private Integer id = null;

  @SerializedName("Vendor")
  private List<String> vendor = null;

  @SerializedName("bobobo")
  private List<BoboboForCollectCamJsonParamOutput> bobobo = null;

  public AppleVendorsForCollectCamJsonParamOutput id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public AppleVendorsForCollectCamJsonParamOutput vendor(List<String> vendor) {
    this.vendor = vendor;
    return this;
  }

  public AppleVendorsForCollectCamJsonParamOutput addVendorItem(String vendorItem) {
    if (this.vendor == null) {
      this.vendor = new ArrayList<String>();
    }
    this.vendor.add(vendorItem);
    return this;
  }

   /**
   * Get vendor
   * @return vendor
  **/
  @Schema(description = "")
  public List<String> getVendor() {
    return vendor;
  }

  public void setVendor(List<String> vendor) {
    this.vendor = vendor;
  }

  public AppleVendorsForCollectCamJsonParamOutput bobobo(List<BoboboForCollectCamJsonParamOutput> bobobo) {
    this.bobobo = bobobo;
    return this;
  }

  public AppleVendorsForCollectCamJsonParamOutput addBoboboItem(BoboboForCollectCamJsonParamOutput boboboItem) {
    if (this.bobobo == null) {
      this.bobobo = new ArrayList<BoboboForCollectCamJsonParamOutput>();
    }
    this.bobobo.add(boboboItem);
    return this;
  }

   /**
   * Get bobobo
   * @return bobobo
  **/
  @Valid
  @Schema(description = "")
  public List<BoboboForCollectCamJsonParamOutput> getBobobo() {
    return bobobo;
  }

  public void setBobobo(List<BoboboForCollectCamJsonParamOutput> bobobo) {
    this.bobobo = bobobo;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppleVendorsForCollectCamJsonParamOutput appleVendorsForCollectCamJsonParamOutput = (AppleVendorsForCollectCamJsonParamOutput) o;
    return Objects.equals(this.id, appleVendorsForCollectCamJsonParamOutput.id) &&
        Objects.equals(this.vendor, appleVendorsForCollectCamJsonParamOutput.vendor) &&
        Objects.equals(this.bobobo, appleVendorsForCollectCamJsonParamOutput.bobobo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, vendor, bobobo);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppleVendorsForCollectCamJsonParamOutput {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("    bobobo: ").append(toIndentedString(bobobo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
