/*
 * hbase
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.hbase.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.hbase.model.DBInstanceEndpointForDescribeDBInstancesOutput;
import com.volcengine.hbase.model.TagForDescribeDBInstancesOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * InstanceForDescribeDBInstancesOutput
 */



public class InstanceForDescribeDBInstancesOutput {
  /**
   * Gets or Sets chargeType
   */
  @JsonAdapter(ChargeTypeEnum.Adapter.class)
  public enum ChargeTypeEnum {
    @SerializedName("PostPaid")
    POSTPAID("PostPaid"),
    @SerializedName("PrePaid")
    PREPAID("PrePaid");

    private String value;

    ChargeTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ChargeTypeEnum fromValue(String input) {
      for (ChargeTypeEnum b : ChargeTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ChargeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChargeTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ChargeTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ChargeTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("ChargeType")
  private ChargeTypeEnum chargeType = null;

  @SerializedName("CreateTime")
  private String createTime = null;

  @SerializedName("DBInstanceEndpoint")
  private List<DBInstanceEndpointForDescribeDBInstancesOutput> dbInstanceEndpoint = null;

  @SerializedName("DeletionProtection")
  private String deletionProtection = null;

  @SerializedName("EngineVersion")
  private String engineVersion = null;

  @SerializedName("ExpireTime")
  private String expireTime = null;

  @SerializedName("InstanceId")
  private String instanceId = null;

  @SerializedName("InstanceName")
  private String instanceName = null;

  @SerializedName("InstanceType")
  private String instanceType = null;

  @SerializedName("MultiAZ")
  private Boolean multiAZ = null;

  @SerializedName("ProjectName")
  private String projectName = null;

  @SerializedName("RSCount")
  private Integer rsCount = null;

  @SerializedName("RegionId")
  private String regionId = null;

  @SerializedName("StandbyUsedStorage")
  private Double standbyUsedStorage = null;

  @SerializedName("Status")
  private String status = null;

  @SerializedName("StorageCapacity")
  private Integer storageCapacity = null;

  /**
   * Gets or Sets storageType
   */
  @JsonAdapter(StorageTypeEnum.Adapter.class)
  public enum StorageTypeEnum {
    @SerializedName("HdfsHdd")
    HDFSHDD("HdfsHdd"),
    @SerializedName("HdfsSsd")
    HDFSSSD("HdfsSsd"),
    @SerializedName("HdfsEssd")
    HDFSESSD("HdfsEssd"),
    @SerializedName("CfsHdd")
    CFSHDD("CfsHdd"),
    @SerializedName("CfsSsd")
    CFSSSD("CfsSsd"),
    @SerializedName("CfsEssd")
    CFSESSD("CfsEssd"),
    @SerializedName("TosStandard")
    TOSSTANDARD("TosStandard");

    private String value;

    StorageTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StorageTypeEnum fromValue(String input) {
      for (StorageTypeEnum b : StorageTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StorageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StorageTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StorageTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StorageTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("StorageType")
  private StorageTypeEnum storageType = null;

  @SerializedName("SubnetId")
  private String subnetId = null;

  @SerializedName("Tags")
  private List<TagForDescribeDBInstancesOutput> tags = null;

  @SerializedName("UsedStorage")
  private Double usedStorage = null;

  @SerializedName("VpcId")
  private String vpcId = null;

  @SerializedName("VpcName")
  private String vpcName = null;

  @SerializedName("ZoneId")
  private String zoneId = null;

  @SerializedName("ZoneName")
  private String zoneName = null;

  public InstanceForDescribeDBInstancesOutput chargeType(ChargeTypeEnum chargeType) {
    this.chargeType = chargeType;
    return this;
  }

   /**
   * Get chargeType
   * @return chargeType
  **/
  @Schema(description = "")
  public ChargeTypeEnum getChargeType() {
    return chargeType;
  }

  public void setChargeType(ChargeTypeEnum chargeType) {
    this.chargeType = chargeType;
  }

  public InstanceForDescribeDBInstancesOutput createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

   /**
   * Get createTime
   * @return createTime
  **/
  @Schema(description = "")
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }

  public InstanceForDescribeDBInstancesOutput dbInstanceEndpoint(List<DBInstanceEndpointForDescribeDBInstancesOutput> dbInstanceEndpoint) {
    this.dbInstanceEndpoint = dbInstanceEndpoint;
    return this;
  }

  public InstanceForDescribeDBInstancesOutput addDbInstanceEndpointItem(DBInstanceEndpointForDescribeDBInstancesOutput dbInstanceEndpointItem) {
    if (this.dbInstanceEndpoint == null) {
      this.dbInstanceEndpoint = new ArrayList<DBInstanceEndpointForDescribeDBInstancesOutput>();
    }
    this.dbInstanceEndpoint.add(dbInstanceEndpointItem);
    return this;
  }

   /**
   * Get dbInstanceEndpoint
   * @return dbInstanceEndpoint
  **/
  @Valid
  @Schema(description = "")
  public List<DBInstanceEndpointForDescribeDBInstancesOutput> getDbInstanceEndpoint() {
    return dbInstanceEndpoint;
  }

  public void setDbInstanceEndpoint(List<DBInstanceEndpointForDescribeDBInstancesOutput> dbInstanceEndpoint) {
    this.dbInstanceEndpoint = dbInstanceEndpoint;
  }

  public InstanceForDescribeDBInstancesOutput deletionProtection(String deletionProtection) {
    this.deletionProtection = deletionProtection;
    return this;
  }

   /**
   * Get deletionProtection
   * @return deletionProtection
  **/
  @Schema(description = "")
  public String getDeletionProtection() {
    return deletionProtection;
  }

  public void setDeletionProtection(String deletionProtection) {
    this.deletionProtection = deletionProtection;
  }

  public InstanceForDescribeDBInstancesOutput engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

   /**
   * Get engineVersion
   * @return engineVersion
  **/
  @Schema(description = "")
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }

  public InstanceForDescribeDBInstancesOutput expireTime(String expireTime) {
    this.expireTime = expireTime;
    return this;
  }

   /**
   * Get expireTime
   * @return expireTime
  **/
  @Schema(description = "")
  public String getExpireTime() {
    return expireTime;
  }

  public void setExpireTime(String expireTime) {
    this.expireTime = expireTime;
  }

  public InstanceForDescribeDBInstancesOutput instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

   /**
   * Get instanceId
   * @return instanceId
  **/
  @Schema(description = "")
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }

  public InstanceForDescribeDBInstancesOutput instanceName(String instanceName) {
    this.instanceName = instanceName;
    return this;
  }

   /**
   * Get instanceName
   * @return instanceName
  **/
  @Schema(description = "")
  public String getInstanceName() {
    return instanceName;
  }

  public void setInstanceName(String instanceName) {
    this.instanceName = instanceName;
  }

  public InstanceForDescribeDBInstancesOutput instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

   /**
   * Get instanceType
   * @return instanceType
  **/
  @Schema(description = "")
  public String getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }

  public InstanceForDescribeDBInstancesOutput multiAZ(Boolean multiAZ) {
    this.multiAZ = multiAZ;
    return this;
  }

   /**
   * Get multiAZ
   * @return multiAZ
  **/
  @Schema(description = "")
  public Boolean isMultiAZ() {
    return multiAZ;
  }

  public void setMultiAZ(Boolean multiAZ) {
    this.multiAZ = multiAZ;
  }

  public InstanceForDescribeDBInstancesOutput projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
  @Schema(description = "")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public InstanceForDescribeDBInstancesOutput rsCount(Integer rsCount) {
    this.rsCount = rsCount;
    return this;
  }

   /**
   * Get rsCount
   * @return rsCount
  **/
  @Schema(description = "")
  public Integer getRsCount() {
    return rsCount;
  }

  public void setRsCount(Integer rsCount) {
    this.rsCount = rsCount;
  }

  public InstanceForDescribeDBInstancesOutput regionId(String regionId) {
    this.regionId = regionId;
    return this;
  }

   /**
   * Get regionId
   * @return regionId
  **/
  @Schema(description = "")
  public String getRegionId() {
    return regionId;
  }

  public void setRegionId(String regionId) {
    this.regionId = regionId;
  }

  public InstanceForDescribeDBInstancesOutput standbyUsedStorage(Double standbyUsedStorage) {
    this.standbyUsedStorage = standbyUsedStorage;
    return this;
  }

   /**
   * Get standbyUsedStorage
   * @return standbyUsedStorage
  **/
  @Schema(description = "")
  public Double getStandbyUsedStorage() {
    return standbyUsedStorage;
  }

  public void setStandbyUsedStorage(Double standbyUsedStorage) {
    this.standbyUsedStorage = standbyUsedStorage;
  }

  public InstanceForDescribeDBInstancesOutput status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public InstanceForDescribeDBInstancesOutput storageCapacity(Integer storageCapacity) {
    this.storageCapacity = storageCapacity;
    return this;
  }

   /**
   * Get storageCapacity
   * @return storageCapacity
  **/
  @Schema(description = "")
  public Integer getStorageCapacity() {
    return storageCapacity;
  }

  public void setStorageCapacity(Integer storageCapacity) {
    this.storageCapacity = storageCapacity;
  }

  public InstanceForDescribeDBInstancesOutput storageType(StorageTypeEnum storageType) {
    this.storageType = storageType;
    return this;
  }

   /**
   * Get storageType
   * @return storageType
  **/
  @Schema(description = "")
  public StorageTypeEnum getStorageType() {
    return storageType;
  }

  public void setStorageType(StorageTypeEnum storageType) {
    this.storageType = storageType;
  }

  public InstanceForDescribeDBInstancesOutput subnetId(String subnetId) {
    this.subnetId = subnetId;
    return this;
  }

   /**
   * Get subnetId
   * @return subnetId
  **/
  @Schema(description = "")
  public String getSubnetId() {
    return subnetId;
  }

  public void setSubnetId(String subnetId) {
    this.subnetId = subnetId;
  }

  public InstanceForDescribeDBInstancesOutput tags(List<TagForDescribeDBInstancesOutput> tags) {
    this.tags = tags;
    return this;
  }

  public InstanceForDescribeDBInstancesOutput addTagsItem(TagForDescribeDBInstancesOutput tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<TagForDescribeDBInstancesOutput>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Valid
  @Schema(description = "")
  public List<TagForDescribeDBInstancesOutput> getTags() {
    return tags;
  }

  public void setTags(List<TagForDescribeDBInstancesOutput> tags) {
    this.tags = tags;
  }

  public InstanceForDescribeDBInstancesOutput usedStorage(Double usedStorage) {
    this.usedStorage = usedStorage;
    return this;
  }

   /**
   * Get usedStorage
   * @return usedStorage
  **/
  @Schema(description = "")
  public Double getUsedStorage() {
    return usedStorage;
  }

  public void setUsedStorage(Double usedStorage) {
    this.usedStorage = usedStorage;
  }

  public InstanceForDescribeDBInstancesOutput vpcId(String vpcId) {
    this.vpcId = vpcId;
    return this;
  }

   /**
   * Get vpcId
   * @return vpcId
  **/
  @Schema(description = "")
  public String getVpcId() {
    return vpcId;
  }

  public void setVpcId(String vpcId) {
    this.vpcId = vpcId;
  }

  public InstanceForDescribeDBInstancesOutput vpcName(String vpcName) {
    this.vpcName = vpcName;
    return this;
  }

   /**
   * Get vpcName
   * @return vpcName
  **/
  @Schema(description = "")
  public String getVpcName() {
    return vpcName;
  }

  public void setVpcName(String vpcName) {
    this.vpcName = vpcName;
  }

  public InstanceForDescribeDBInstancesOutput zoneId(String zoneId) {
    this.zoneId = zoneId;
    return this;
  }

   /**
   * Get zoneId
   * @return zoneId
  **/
  @Schema(description = "")
  public String getZoneId() {
    return zoneId;
  }

  public void setZoneId(String zoneId) {
    this.zoneId = zoneId;
  }

  public InstanceForDescribeDBInstancesOutput zoneName(String zoneName) {
    this.zoneName = zoneName;
    return this;
  }

   /**
   * Get zoneName
   * @return zoneName
  **/
  @Schema(description = "")
  public String getZoneName() {
    return zoneName;
  }

  public void setZoneName(String zoneName) {
    this.zoneName = zoneName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceForDescribeDBInstancesOutput instanceForDescribeDBInstancesOutput = (InstanceForDescribeDBInstancesOutput) o;
    return Objects.equals(this.chargeType, instanceForDescribeDBInstancesOutput.chargeType) &&
        Objects.equals(this.createTime, instanceForDescribeDBInstancesOutput.createTime) &&
        Objects.equals(this.dbInstanceEndpoint, instanceForDescribeDBInstancesOutput.dbInstanceEndpoint) &&
        Objects.equals(this.deletionProtection, instanceForDescribeDBInstancesOutput.deletionProtection) &&
        Objects.equals(this.engineVersion, instanceForDescribeDBInstancesOutput.engineVersion) &&
        Objects.equals(this.expireTime, instanceForDescribeDBInstancesOutput.expireTime) &&
        Objects.equals(this.instanceId, instanceForDescribeDBInstancesOutput.instanceId) &&
        Objects.equals(this.instanceName, instanceForDescribeDBInstancesOutput.instanceName) &&
        Objects.equals(this.instanceType, instanceForDescribeDBInstancesOutput.instanceType) &&
        Objects.equals(this.multiAZ, instanceForDescribeDBInstancesOutput.multiAZ) &&
        Objects.equals(this.projectName, instanceForDescribeDBInstancesOutput.projectName) &&
        Objects.equals(this.rsCount, instanceForDescribeDBInstancesOutput.rsCount) &&
        Objects.equals(this.regionId, instanceForDescribeDBInstancesOutput.regionId) &&
        Objects.equals(this.standbyUsedStorage, instanceForDescribeDBInstancesOutput.standbyUsedStorage) &&
        Objects.equals(this.status, instanceForDescribeDBInstancesOutput.status) &&
        Objects.equals(this.storageCapacity, instanceForDescribeDBInstancesOutput.storageCapacity) &&
        Objects.equals(this.storageType, instanceForDescribeDBInstancesOutput.storageType) &&
        Objects.equals(this.subnetId, instanceForDescribeDBInstancesOutput.subnetId) &&
        Objects.equals(this.tags, instanceForDescribeDBInstancesOutput.tags) &&
        Objects.equals(this.usedStorage, instanceForDescribeDBInstancesOutput.usedStorage) &&
        Objects.equals(this.vpcId, instanceForDescribeDBInstancesOutput.vpcId) &&
        Objects.equals(this.vpcName, instanceForDescribeDBInstancesOutput.vpcName) &&
        Objects.equals(this.zoneId, instanceForDescribeDBInstancesOutput.zoneId) &&
        Objects.equals(this.zoneName, instanceForDescribeDBInstancesOutput.zoneName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chargeType, createTime, dbInstanceEndpoint, deletionProtection, engineVersion, expireTime, instanceId, instanceName, instanceType, multiAZ, projectName, rsCount, regionId, standbyUsedStorage, status, storageCapacity, storageType, subnetId, tags, usedStorage, vpcId, vpcName, zoneId, zoneName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceForDescribeDBInstancesOutput {\n");
    
    sb.append("    chargeType: ").append(toIndentedString(chargeType)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    dbInstanceEndpoint: ").append(toIndentedString(dbInstanceEndpoint)).append("\n");
    sb.append("    deletionProtection: ").append(toIndentedString(deletionProtection)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    instanceName: ").append(toIndentedString(instanceName)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    multiAZ: ").append(toIndentedString(multiAZ)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    rsCount: ").append(toIndentedString(rsCount)).append("\n");
    sb.append("    regionId: ").append(toIndentedString(regionId)).append("\n");
    sb.append("    standbyUsedStorage: ").append(toIndentedString(standbyUsedStorage)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    storageCapacity: ").append(toIndentedString(storageCapacity)).append("\n");
    sb.append("    storageType: ").append(toIndentedString(storageType)).append("\n");
    sb.append("    subnetId: ").append(toIndentedString(subnetId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    usedStorage: ").append(toIndentedString(usedStorage)).append("\n");
    sb.append("    vpcId: ").append(toIndentedString(vpcId)).append("\n");
    sb.append("    vpcName: ").append(toIndentedString(vpcName)).append("\n");
    sb.append("    zoneId: ").append(toIndentedString(zoneId)).append("\n");
    sb.append("    zoneName: ").append(toIndentedString(zoneName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
