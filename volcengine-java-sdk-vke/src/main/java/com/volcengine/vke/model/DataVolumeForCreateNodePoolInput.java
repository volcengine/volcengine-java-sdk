/*
 * vke
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vke.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DataVolumeForCreateNodePoolInput
 */



public class DataVolumeForCreateNodePoolInput {
  /**
   * Gets or Sets fileSystem
   */
  @JsonAdapter(FileSystemEnum.Adapter.class)
  public enum FileSystemEnum {
    @SerializedName("Ext4")
    EXT4("Ext4"),
    @SerializedName("Xfs")
    XFS("Xfs");

    private String value;

    FileSystemEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FileSystemEnum fromValue(String input) {
      for (FileSystemEnum b : FileSystemEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FileSystemEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FileSystemEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public FileSystemEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return FileSystemEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("FileSystem")
  private FileSystemEnum fileSystem = null;

  @SerializedName("MountPoint")
  private String mountPoint = null;

  @SerializedName("PlacementGroupId")
  private String placementGroupId = null;

  @SerializedName("Size")
  private Integer size = null;

  @SerializedName("SnapshotId")
  private String snapshotId = null;

  @SerializedName("SubgroupNumber")
  private Integer subgroupNumber = null;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    @SerializedName("ESSD_PL0")
    ESSD_PL0("ESSD_PL0"),
    @SerializedName("ESSD_FlexPL")
    ESSD_FLEXPL("ESSD_FlexPL");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("Type")
  private TypeEnum type = null;

  public DataVolumeForCreateNodePoolInput fileSystem(FileSystemEnum fileSystem) {
    this.fileSystem = fileSystem;
    return this;
  }

   /**
   * Get fileSystem
   * @return fileSystem
  **/
  @Schema(description = "")
  public FileSystemEnum getFileSystem() {
    return fileSystem;
  }

  public void setFileSystem(FileSystemEnum fileSystem) {
    this.fileSystem = fileSystem;
  }

  public DataVolumeForCreateNodePoolInput mountPoint(String mountPoint) {
    this.mountPoint = mountPoint;
    return this;
  }

   /**
   * Get mountPoint
   * @return mountPoint
  **/
  @Schema(description = "")
  public String getMountPoint() {
    return mountPoint;
  }

  public void setMountPoint(String mountPoint) {
    this.mountPoint = mountPoint;
  }

  public DataVolumeForCreateNodePoolInput placementGroupId(String placementGroupId) {
    this.placementGroupId = placementGroupId;
    return this;
  }

   /**
   * Get placementGroupId
   * @return placementGroupId
  **/
  @Schema(description = "")
  public String getPlacementGroupId() {
    return placementGroupId;
  }

  public void setPlacementGroupId(String placementGroupId) {
    this.placementGroupId = placementGroupId;
  }

  public DataVolumeForCreateNodePoolInput size(Integer size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @Schema(description = "")
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }

  public DataVolumeForCreateNodePoolInput snapshotId(String snapshotId) {
    this.snapshotId = snapshotId;
    return this;
  }

   /**
   * Get snapshotId
   * @return snapshotId
  **/
  @Schema(description = "")
  public String getSnapshotId() {
    return snapshotId;
  }

  public void setSnapshotId(String snapshotId) {
    this.snapshotId = snapshotId;
  }

  public DataVolumeForCreateNodePoolInput subgroupNumber(Integer subgroupNumber) {
    this.subgroupNumber = subgroupNumber;
    return this;
  }

   /**
   * Get subgroupNumber
   * @return subgroupNumber
  **/
  @Schema(description = "")
  public Integer getSubgroupNumber() {
    return subgroupNumber;
  }

  public void setSubgroupNumber(Integer subgroupNumber) {
    this.subgroupNumber = subgroupNumber;
  }

  public DataVolumeForCreateNodePoolInput type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataVolumeForCreateNodePoolInput dataVolumeForCreateNodePoolInput = (DataVolumeForCreateNodePoolInput) o;
    return Objects.equals(this.fileSystem, dataVolumeForCreateNodePoolInput.fileSystem) &&
        Objects.equals(this.mountPoint, dataVolumeForCreateNodePoolInput.mountPoint) &&
        Objects.equals(this.placementGroupId, dataVolumeForCreateNodePoolInput.placementGroupId) &&
        Objects.equals(this.size, dataVolumeForCreateNodePoolInput.size) &&
        Objects.equals(this.snapshotId, dataVolumeForCreateNodePoolInput.snapshotId) &&
        Objects.equals(this.subgroupNumber, dataVolumeForCreateNodePoolInput.subgroupNumber) &&
        Objects.equals(this.type, dataVolumeForCreateNodePoolInput.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileSystem, mountPoint, placementGroupId, size, snapshotId, subgroupNumber, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataVolumeForCreateNodePoolInput {\n");
    
    sb.append("    fileSystem: ").append(toIndentedString(fileSystem)).append("\n");
    sb.append("    mountPoint: ").append(toIndentedString(mountPoint)).append("\n");
    sb.append("    placementGroupId: ").append(toIndentedString(placementGroupId)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    snapshotId: ").append(toIndentedString(snapshotId)).append("\n");
    sb.append("    subgroupNumber: ").append(toIndentedString(subgroupNumber)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
