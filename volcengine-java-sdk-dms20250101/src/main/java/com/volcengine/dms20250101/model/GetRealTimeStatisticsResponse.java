/*
 * dms20250101
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.dms20250101.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * GetRealTimeStatisticsResponse
 */



public class GetRealTimeStatisticsResponse extends com.volcengine.model.AbstractResponse {
  @SerializedName("Bandwidth")
  private String bandwidth = null;

  @SerializedName("FailedBytes")
  private String failedBytes = null;

  @SerializedName("FailedCount")
  private String failedCount = null;

  @SerializedName("NonexistentBytes")
  private String nonexistentBytes = null;

  @SerializedName("NonexistentCount")
  private String nonexistentCount = null;

  @SerializedName("RemainingBytes")
  private String remainingBytes = null;

  @SerializedName("RemainingCount")
  private String remainingCount = null;

  @SerializedName("RemainingSeconds")
  private String remainingSeconds = null;

  @SerializedName("SkippedBytes")
  private String skippedBytes = null;

  @SerializedName("SkippedCount")
  private String skippedCount = null;

  @SerializedName("SucceedBytes")
  private String succeedBytes = null;

  @SerializedName("SucceedCount")
  private String succeedCount = null;

  @SerializedName("TotalBytes")
  private String totalBytes = null;

  @SerializedName("TotalCount")
  private String totalCount = null;

  @SerializedName("TotalSeconds")
  private String totalSeconds = null;

  public GetRealTimeStatisticsResponse bandwidth(String bandwidth) {
    this.bandwidth = bandwidth;
    return this;
  }

   /**
   * Get bandwidth
   * @return bandwidth
  **/
  @Schema(description = "")
  public String getBandwidth() {
    return bandwidth;
  }

  public void setBandwidth(String bandwidth) {
    this.bandwidth = bandwidth;
  }

  public GetRealTimeStatisticsResponse failedBytes(String failedBytes) {
    this.failedBytes = failedBytes;
    return this;
  }

   /**
   * Get failedBytes
   * @return failedBytes
  **/
  @Schema(description = "")
  public String getFailedBytes() {
    return failedBytes;
  }

  public void setFailedBytes(String failedBytes) {
    this.failedBytes = failedBytes;
  }

  public GetRealTimeStatisticsResponse failedCount(String failedCount) {
    this.failedCount = failedCount;
    return this;
  }

   /**
   * Get failedCount
   * @return failedCount
  **/
  @Schema(description = "")
  public String getFailedCount() {
    return failedCount;
  }

  public void setFailedCount(String failedCount) {
    this.failedCount = failedCount;
  }

  public GetRealTimeStatisticsResponse nonexistentBytes(String nonexistentBytes) {
    this.nonexistentBytes = nonexistentBytes;
    return this;
  }

   /**
   * Get nonexistentBytes
   * @return nonexistentBytes
  **/
  @Schema(description = "")
  public String getNonexistentBytes() {
    return nonexistentBytes;
  }

  public void setNonexistentBytes(String nonexistentBytes) {
    this.nonexistentBytes = nonexistentBytes;
  }

  public GetRealTimeStatisticsResponse nonexistentCount(String nonexistentCount) {
    this.nonexistentCount = nonexistentCount;
    return this;
  }

   /**
   * Get nonexistentCount
   * @return nonexistentCount
  **/
  @Schema(description = "")
  public String getNonexistentCount() {
    return nonexistentCount;
  }

  public void setNonexistentCount(String nonexistentCount) {
    this.nonexistentCount = nonexistentCount;
  }

  public GetRealTimeStatisticsResponse remainingBytes(String remainingBytes) {
    this.remainingBytes = remainingBytes;
    return this;
  }

   /**
   * Get remainingBytes
   * @return remainingBytes
  **/
  @Schema(description = "")
  public String getRemainingBytes() {
    return remainingBytes;
  }

  public void setRemainingBytes(String remainingBytes) {
    this.remainingBytes = remainingBytes;
  }

  public GetRealTimeStatisticsResponse remainingCount(String remainingCount) {
    this.remainingCount = remainingCount;
    return this;
  }

   /**
   * Get remainingCount
   * @return remainingCount
  **/
  @Schema(description = "")
  public String getRemainingCount() {
    return remainingCount;
  }

  public void setRemainingCount(String remainingCount) {
    this.remainingCount = remainingCount;
  }

  public GetRealTimeStatisticsResponse remainingSeconds(String remainingSeconds) {
    this.remainingSeconds = remainingSeconds;
    return this;
  }

   /**
   * Get remainingSeconds
   * @return remainingSeconds
  **/
  @Schema(description = "")
  public String getRemainingSeconds() {
    return remainingSeconds;
  }

  public void setRemainingSeconds(String remainingSeconds) {
    this.remainingSeconds = remainingSeconds;
  }

  public GetRealTimeStatisticsResponse skippedBytes(String skippedBytes) {
    this.skippedBytes = skippedBytes;
    return this;
  }

   /**
   * Get skippedBytes
   * @return skippedBytes
  **/
  @Schema(description = "")
  public String getSkippedBytes() {
    return skippedBytes;
  }

  public void setSkippedBytes(String skippedBytes) {
    this.skippedBytes = skippedBytes;
  }

  public GetRealTimeStatisticsResponse skippedCount(String skippedCount) {
    this.skippedCount = skippedCount;
    return this;
  }

   /**
   * Get skippedCount
   * @return skippedCount
  **/
  @Schema(description = "")
  public String getSkippedCount() {
    return skippedCount;
  }

  public void setSkippedCount(String skippedCount) {
    this.skippedCount = skippedCount;
  }

  public GetRealTimeStatisticsResponse succeedBytes(String succeedBytes) {
    this.succeedBytes = succeedBytes;
    return this;
  }

   /**
   * Get succeedBytes
   * @return succeedBytes
  **/
  @Schema(description = "")
  public String getSucceedBytes() {
    return succeedBytes;
  }

  public void setSucceedBytes(String succeedBytes) {
    this.succeedBytes = succeedBytes;
  }

  public GetRealTimeStatisticsResponse succeedCount(String succeedCount) {
    this.succeedCount = succeedCount;
    return this;
  }

   /**
   * Get succeedCount
   * @return succeedCount
  **/
  @Schema(description = "")
  public String getSucceedCount() {
    return succeedCount;
  }

  public void setSucceedCount(String succeedCount) {
    this.succeedCount = succeedCount;
  }

  public GetRealTimeStatisticsResponse totalBytes(String totalBytes) {
    this.totalBytes = totalBytes;
    return this;
  }

   /**
   * Get totalBytes
   * @return totalBytes
  **/
  @Schema(description = "")
  public String getTotalBytes() {
    return totalBytes;
  }

  public void setTotalBytes(String totalBytes) {
    this.totalBytes = totalBytes;
  }

  public GetRealTimeStatisticsResponse totalCount(String totalCount) {
    this.totalCount = totalCount;
    return this;
  }

   /**
   * Get totalCount
   * @return totalCount
  **/
  @Schema(description = "")
  public String getTotalCount() {
    return totalCount;
  }

  public void setTotalCount(String totalCount) {
    this.totalCount = totalCount;
  }

  public GetRealTimeStatisticsResponse totalSeconds(String totalSeconds) {
    this.totalSeconds = totalSeconds;
    return this;
  }

   /**
   * Get totalSeconds
   * @return totalSeconds
  **/
  @Schema(description = "")
  public String getTotalSeconds() {
    return totalSeconds;
  }

  public void setTotalSeconds(String totalSeconds) {
    this.totalSeconds = totalSeconds;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetRealTimeStatisticsResponse getRealTimeStatisticsResponse = (GetRealTimeStatisticsResponse) o;
    return Objects.equals(this.bandwidth, getRealTimeStatisticsResponse.bandwidth) &&
        Objects.equals(this.failedBytes, getRealTimeStatisticsResponse.failedBytes) &&
        Objects.equals(this.failedCount, getRealTimeStatisticsResponse.failedCount) &&
        Objects.equals(this.nonexistentBytes, getRealTimeStatisticsResponse.nonexistentBytes) &&
        Objects.equals(this.nonexistentCount, getRealTimeStatisticsResponse.nonexistentCount) &&
        Objects.equals(this.remainingBytes, getRealTimeStatisticsResponse.remainingBytes) &&
        Objects.equals(this.remainingCount, getRealTimeStatisticsResponse.remainingCount) &&
        Objects.equals(this.remainingSeconds, getRealTimeStatisticsResponse.remainingSeconds) &&
        Objects.equals(this.skippedBytes, getRealTimeStatisticsResponse.skippedBytes) &&
        Objects.equals(this.skippedCount, getRealTimeStatisticsResponse.skippedCount) &&
        Objects.equals(this.succeedBytes, getRealTimeStatisticsResponse.succeedBytes) &&
        Objects.equals(this.succeedCount, getRealTimeStatisticsResponse.succeedCount) &&
        Objects.equals(this.totalBytes, getRealTimeStatisticsResponse.totalBytes) &&
        Objects.equals(this.totalCount, getRealTimeStatisticsResponse.totalCount) &&
        Objects.equals(this.totalSeconds, getRealTimeStatisticsResponse.totalSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bandwidth, failedBytes, failedCount, nonexistentBytes, nonexistentCount, remainingBytes, remainingCount, remainingSeconds, skippedBytes, skippedCount, succeedBytes, succeedCount, totalBytes, totalCount, totalSeconds);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetRealTimeStatisticsResponse {\n");
    
    sb.append("    bandwidth: ").append(toIndentedString(bandwidth)).append("\n");
    sb.append("    failedBytes: ").append(toIndentedString(failedBytes)).append("\n");
    sb.append("    failedCount: ").append(toIndentedString(failedCount)).append("\n");
    sb.append("    nonexistentBytes: ").append(toIndentedString(nonexistentBytes)).append("\n");
    sb.append("    nonexistentCount: ").append(toIndentedString(nonexistentCount)).append("\n");
    sb.append("    remainingBytes: ").append(toIndentedString(remainingBytes)).append("\n");
    sb.append("    remainingCount: ").append(toIndentedString(remainingCount)).append("\n");
    sb.append("    remainingSeconds: ").append(toIndentedString(remainingSeconds)).append("\n");
    sb.append("    skippedBytes: ").append(toIndentedString(skippedBytes)).append("\n");
    sb.append("    skippedCount: ").append(toIndentedString(skippedCount)).append("\n");
    sb.append("    succeedBytes: ").append(toIndentedString(succeedBytes)).append("\n");
    sb.append("    succeedCount: ").append(toIndentedString(succeedCount)).append("\n");
    sb.append("    totalBytes: ").append(toIndentedString(totalBytes)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("    totalSeconds: ").append(toIndentedString(totalSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
