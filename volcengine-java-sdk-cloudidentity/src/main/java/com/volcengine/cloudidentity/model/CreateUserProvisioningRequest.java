/*
 * cloudidentity
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.cloudidentity.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * CreateUserProvisioningRequest
 */



public class CreateUserProvisioningRequest {
  /**
   * Gets or Sets deletionStrategy
   */
  @JsonAdapter(DeletionStrategyEnum.Adapter.class)
  public enum DeletionStrategyEnum {
    @SerializedName("Keep")
    KEEP("Keep"),
    @SerializedName("Delete")
    DELETE("Delete");

    private String value;

    DeletionStrategyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DeletionStrategyEnum fromValue(String input) {
      for (DeletionStrategyEnum b : DeletionStrategyEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DeletionStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeletionStrategyEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public DeletionStrategyEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return DeletionStrategyEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("DeletionStrategy")
  private DeletionStrategyEnum deletionStrategy = null;

  @SerializedName("Description")
  private String description = null;

  /**
   * Gets or Sets duplicationStrategy
   */
  @JsonAdapter(DuplicationStrategyEnum.Adapter.class)
  public enum DuplicationStrategyEnum {
    @SerializedName("KeepBoth")
    KEEPBOTH("KeepBoth"),
    @SerializedName("Takeover")
    TAKEOVER("Takeover");

    private String value;

    DuplicationStrategyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DuplicationStrategyEnum fromValue(String input) {
      for (DuplicationStrategyEnum b : DuplicationStrategyEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DuplicationStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DuplicationStrategyEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public DuplicationStrategyEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return DuplicationStrategyEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("DuplicationStrategy")
  private DuplicationStrategyEnum duplicationStrategy = null;

  @SerializedName("DuplicationSuffix")
  private String duplicationSuffix = null;

  /**
   * Gets or Sets identitySourceStrategy
   */
  @JsonAdapter(IdentitySourceStrategyEnum.Adapter.class)
  public enum IdentitySourceStrategyEnum {
    @SerializedName("Create")
    CREATE("Create"),
    @SerializedName("Ignore")
    IGNORE("Ignore");

    private String value;

    IdentitySourceStrategyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static IdentitySourceStrategyEnum fromValue(String input) {
      for (IdentitySourceStrategyEnum b : IdentitySourceStrategyEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<IdentitySourceStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IdentitySourceStrategyEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public IdentitySourceStrategyEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return IdentitySourceStrategyEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("IdentitySourceStrategy")
  private IdentitySourceStrategyEnum identitySourceStrategy = null;

  @SerializedName("PrincipalId")
  private String principalId = null;

  /**
   * Gets or Sets principalType
   */
  @JsonAdapter(PrincipalTypeEnum.Adapter.class)
  public enum PrincipalTypeEnum {
    @SerializedName("User")
    USER("User"),
    @SerializedName("Group")
    GROUP("Group");

    private String value;

    PrincipalTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PrincipalTypeEnum fromValue(String input) {
      for (PrincipalTypeEnum b : PrincipalTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PrincipalTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrincipalTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public PrincipalTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return PrincipalTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("PrincipalType")
  private PrincipalTypeEnum principalType = null;

  @SerializedName("TargetId")
  private String targetId = null;

  public CreateUserProvisioningRequest deletionStrategy(DeletionStrategyEnum deletionStrategy) {
    this.deletionStrategy = deletionStrategy;
    return this;
  }

   /**
   * Get deletionStrategy
   * @return deletionStrategy
  **/
  @NotNull
  @Schema(required = true, description = "")
  public DeletionStrategyEnum getDeletionStrategy() {
    return deletionStrategy;
  }

  public void setDeletionStrategy(DeletionStrategyEnum deletionStrategy) {
    this.deletionStrategy = deletionStrategy;
  }

  public CreateUserProvisioningRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CreateUserProvisioningRequest duplicationStrategy(DuplicationStrategyEnum duplicationStrategy) {
    this.duplicationStrategy = duplicationStrategy;
    return this;
  }

   /**
   * Get duplicationStrategy
   * @return duplicationStrategy
  **/
  @NotNull
  @Schema(required = true, description = "")
  public DuplicationStrategyEnum getDuplicationStrategy() {
    return duplicationStrategy;
  }

  public void setDuplicationStrategy(DuplicationStrategyEnum duplicationStrategy) {
    this.duplicationStrategy = duplicationStrategy;
  }

  public CreateUserProvisioningRequest duplicationSuffix(String duplicationSuffix) {
    this.duplicationSuffix = duplicationSuffix;
    return this;
  }

   /**
   * Get duplicationSuffix
   * @return duplicationSuffix
  **/
  @Schema(description = "")
  public String getDuplicationSuffix() {
    return duplicationSuffix;
  }

  public void setDuplicationSuffix(String duplicationSuffix) {
    this.duplicationSuffix = duplicationSuffix;
  }

  public CreateUserProvisioningRequest identitySourceStrategy(IdentitySourceStrategyEnum identitySourceStrategy) {
    this.identitySourceStrategy = identitySourceStrategy;
    return this;
  }

   /**
   * Get identitySourceStrategy
   * @return identitySourceStrategy
  **/
  @NotNull
  @Schema(required = true, description = "")
  public IdentitySourceStrategyEnum getIdentitySourceStrategy() {
    return identitySourceStrategy;
  }

  public void setIdentitySourceStrategy(IdentitySourceStrategyEnum identitySourceStrategy) {
    this.identitySourceStrategy = identitySourceStrategy;
  }

  public CreateUserProvisioningRequest principalId(String principalId) {
    this.principalId = principalId;
    return this;
  }

   /**
   * Get principalId
   * @return principalId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getPrincipalId() {
    return principalId;
  }

  public void setPrincipalId(String principalId) {
    this.principalId = principalId;
  }

  public CreateUserProvisioningRequest principalType(PrincipalTypeEnum principalType) {
    this.principalType = principalType;
    return this;
  }

   /**
   * Get principalType
   * @return principalType
  **/
  @NotNull
  @Schema(required = true, description = "")
  public PrincipalTypeEnum getPrincipalType() {
    return principalType;
  }

  public void setPrincipalType(PrincipalTypeEnum principalType) {
    this.principalType = principalType;
  }

  public CreateUserProvisioningRequest targetId(String targetId) {
    this.targetId = targetId;
    return this;
  }

   /**
   * Get targetId
   * @return targetId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getTargetId() {
    return targetId;
  }

  public void setTargetId(String targetId) {
    this.targetId = targetId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateUserProvisioningRequest createUserProvisioningRequest = (CreateUserProvisioningRequest) o;
    return Objects.equals(this.deletionStrategy, createUserProvisioningRequest.deletionStrategy) &&
        Objects.equals(this.description, createUserProvisioningRequest.description) &&
        Objects.equals(this.duplicationStrategy, createUserProvisioningRequest.duplicationStrategy) &&
        Objects.equals(this.duplicationSuffix, createUserProvisioningRequest.duplicationSuffix) &&
        Objects.equals(this.identitySourceStrategy, createUserProvisioningRequest.identitySourceStrategy) &&
        Objects.equals(this.principalId, createUserProvisioningRequest.principalId) &&
        Objects.equals(this.principalType, createUserProvisioningRequest.principalType) &&
        Objects.equals(this.targetId, createUserProvisioningRequest.targetId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deletionStrategy, description, duplicationStrategy, duplicationSuffix, identitySourceStrategy, principalId, principalType, targetId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateUserProvisioningRequest {\n");
    
    sb.append("    deletionStrategy: ").append(toIndentedString(deletionStrategy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    duplicationStrategy: ").append(toIndentedString(duplicationStrategy)).append("\n");
    sb.append("    duplicationSuffix: ").append(toIndentedString(duplicationSuffix)).append("\n");
    sb.append("    identitySourceStrategy: ").append(toIndentedString(identitySourceStrategy)).append("\n");
    sb.append("    principalId: ").append(toIndentedString(principalId)).append("\n");
    sb.append("    principalType: ").append(toIndentedString(principalType)).append("\n");
    sb.append("    targetId: ").append(toIndentedString(targetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
