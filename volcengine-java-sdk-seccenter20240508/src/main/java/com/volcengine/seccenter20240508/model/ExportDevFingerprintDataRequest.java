/*
 * seccenter20240508
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.seccenter20240508.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.seccenter20240508.model.ConditionsForExportDevFingerprintDataInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ExportDevFingerprintDataRequest
 */



public class ExportDevFingerprintDataRequest {
  @SerializedName("Conditions")
  private ConditionsForExportDevFingerprintDataInput conditions = null;

  /**
   * Gets or Sets fingerprintType
   */
  @JsonAdapter(FingerprintTypeEnum.Adapter.class)
  public enum FingerprintTypeEnum {
    @SerializedName("process")
    PROCESS("process"),
    @SerializedName("port")
    PORT("port"),
    @SerializedName("software")
    SOFTWARE("software");

    private String value;

    FingerprintTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FingerprintTypeEnum fromValue(String input) {
      for (FingerprintTypeEnum b : FingerprintTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FingerprintTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FingerprintTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public FingerprintTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return FingerprintTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("FingerprintType")
  private FingerprintTypeEnum fingerprintType = null;

  @SerializedName("IDList")
  private List<String> idList = null;

  public ExportDevFingerprintDataRequest conditions(ConditionsForExportDevFingerprintDataInput conditions) {
    this.conditions = conditions;
    return this;
  }

   /**
   * Get conditions
   * @return conditions
  **/
  @Valid
  @Schema(description = "")
  public ConditionsForExportDevFingerprintDataInput getConditions() {
    return conditions;
  }

  public void setConditions(ConditionsForExportDevFingerprintDataInput conditions) {
    this.conditions = conditions;
  }

  public ExportDevFingerprintDataRequest fingerprintType(FingerprintTypeEnum fingerprintType) {
    this.fingerprintType = fingerprintType;
    return this;
  }

   /**
   * Get fingerprintType
   * @return fingerprintType
  **/
  @Schema(description = "")
  public FingerprintTypeEnum getFingerprintType() {
    return fingerprintType;
  }

  public void setFingerprintType(FingerprintTypeEnum fingerprintType) {
    this.fingerprintType = fingerprintType;
  }

  public ExportDevFingerprintDataRequest idList(List<String> idList) {
    this.idList = idList;
    return this;
  }

  public ExportDevFingerprintDataRequest addIdListItem(String idListItem) {
    if (this.idList == null) {
      this.idList = new ArrayList<String>();
    }
    this.idList.add(idListItem);
    return this;
  }

   /**
   * Get idList
   * @return idList
  **/
  @Schema(description = "")
  public List<String> getIdList() {
    return idList;
  }

  public void setIdList(List<String> idList) {
    this.idList = idList;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportDevFingerprintDataRequest exportDevFingerprintDataRequest = (ExportDevFingerprintDataRequest) o;
    return Objects.equals(this.conditions, exportDevFingerprintDataRequest.conditions) &&
        Objects.equals(this.fingerprintType, exportDevFingerprintDataRequest.fingerprintType) &&
        Objects.equals(this.idList, exportDevFingerprintDataRequest.idList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditions, fingerprintType, idList);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportDevFingerprintDataRequest {\n");
    
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    fingerprintType: ").append(toIndentedString(fingerprintType)).append("\n");
    sb.append("    idList: ").append(toIndentedString(idList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
