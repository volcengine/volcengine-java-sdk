/*
 * milvus
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.milvus.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * NodeCuTypeSupportSpecListForDescribeAvailableSpecOutput
 */



public class NodeCuTypeSupportSpecListForDescribeAvailableSpecOutput {
  @SerializedName("MaxNodeNum")
  private Float maxNodeNum = null;

  @SerializedName("NodeCUType")
  private String nodeCUType = null;

  @SerializedName("SpecName")
  private List<String> specName = null;

  public NodeCuTypeSupportSpecListForDescribeAvailableSpecOutput maxNodeNum(Float maxNodeNum) {
    this.maxNodeNum = maxNodeNum;
    return this;
  }

   /**
   * Get maxNodeNum
   * @return maxNodeNum
  **/
  @Schema(description = "")
  public Float getMaxNodeNum() {
    return maxNodeNum;
  }

  public void setMaxNodeNum(Float maxNodeNum) {
    this.maxNodeNum = maxNodeNum;
  }

  public NodeCuTypeSupportSpecListForDescribeAvailableSpecOutput nodeCUType(String nodeCUType) {
    this.nodeCUType = nodeCUType;
    return this;
  }

   /**
   * Get nodeCUType
   * @return nodeCUType
  **/
  @Schema(description = "")
  public String getNodeCUType() {
    return nodeCUType;
  }

  public void setNodeCUType(String nodeCUType) {
    this.nodeCUType = nodeCUType;
  }

  public NodeCuTypeSupportSpecListForDescribeAvailableSpecOutput specName(List<String> specName) {
    this.specName = specName;
    return this;
  }

  public NodeCuTypeSupportSpecListForDescribeAvailableSpecOutput addSpecNameItem(String specNameItem) {
    if (this.specName == null) {
      this.specName = new ArrayList<String>();
    }
    this.specName.add(specNameItem);
    return this;
  }

   /**
   * Get specName
   * @return specName
  **/
  @Schema(description = "")
  public List<String> getSpecName() {
    return specName;
  }

  public void setSpecName(List<String> specName) {
    this.specName = specName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeCuTypeSupportSpecListForDescribeAvailableSpecOutput nodeCuTypeSupportSpecListForDescribeAvailableSpecOutput = (NodeCuTypeSupportSpecListForDescribeAvailableSpecOutput) o;
    return Objects.equals(this.maxNodeNum, nodeCuTypeSupportSpecListForDescribeAvailableSpecOutput.maxNodeNum) &&
        Objects.equals(this.nodeCUType, nodeCuTypeSupportSpecListForDescribeAvailableSpecOutput.nodeCUType) &&
        Objects.equals(this.specName, nodeCuTypeSupportSpecListForDescribeAvailableSpecOutput.specName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxNodeNum, nodeCUType, specName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeCuTypeSupportSpecListForDescribeAvailableSpecOutput {\n");
    
    sb.append("    maxNodeNum: ").append(toIndentedString(maxNodeNum)).append("\n");
    sb.append("    nodeCUType: ").append(toIndentedString(nodeCUType)).append("\n");
    sb.append("    specName: ").append(toIndentedString(specName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
