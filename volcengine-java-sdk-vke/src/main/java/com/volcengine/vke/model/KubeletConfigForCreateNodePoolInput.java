/*
 * vke
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vke.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.vke.model.EvictionHardForCreateNodePoolInput;
import com.volcengine.vke.model.FeatureGatesForCreateNodePoolInput;
import com.volcengine.vke.model.KubeReservedForCreateNodePoolInput;
import com.volcengine.vke.model.SystemReservedForCreateNodePoolInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * KubeletConfigForCreateNodePoolInput
 */



public class KubeletConfigForCreateNodePoolInput {
  @SerializedName("CpuManagerPolicy")
  private String cpuManagerPolicy = null;

  @SerializedName("EvictionHard")
  private List<EvictionHardForCreateNodePoolInput> evictionHard = null;

  @SerializedName("FeatureGates")
  private FeatureGatesForCreateNodePoolInput featureGates = null;

  @SerializedName("KubeApiBurst")
  private Integer kubeApiBurst = null;

  @SerializedName("KubeApiQps")
  private Integer kubeApiQps = null;

  @SerializedName("KubeReserved")
  private List<KubeReservedForCreateNodePoolInput> kubeReserved = null;

  @SerializedName("MaxPods")
  private Integer maxPods = null;

  @SerializedName("RegistryBurst")
  private Integer registryBurst = null;

  @SerializedName("RegistryPullQps")
  private Integer registryPullQps = null;

  @SerializedName("SerializeImagePulls")
  private Boolean serializeImagePulls = null;

  @SerializedName("SystemReserved")
  private List<SystemReservedForCreateNodePoolInput> systemReserved = null;

  /**
   * Gets or Sets topologyManagerPolicy
   */
  @JsonAdapter(TopologyManagerPolicyEnum.Adapter.class)
  public enum TopologyManagerPolicyEnum {
    @SerializedName("restricted")
    RESTRICTED("restricted"),
    @SerializedName("best-effort")
    BEST_EFFORT("best-effort"),
    @SerializedName("none")
    NONE("none"),
    @SerializedName("single-numa-node")
    SINGLE_NUMA_NODE("single-numa-node");

    private String value;

    TopologyManagerPolicyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TopologyManagerPolicyEnum fromValue(String input) {
      for (TopologyManagerPolicyEnum b : TopologyManagerPolicyEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TopologyManagerPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TopologyManagerPolicyEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TopologyManagerPolicyEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TopologyManagerPolicyEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("TopologyManagerPolicy")
  private TopologyManagerPolicyEnum topologyManagerPolicy = null;

  /**
   * Gets or Sets topologyManagerScope
   */
  @JsonAdapter(TopologyManagerScopeEnum.Adapter.class)
  public enum TopologyManagerScopeEnum {
    @SerializedName("pod")
    POD("pod"),
    @SerializedName("container")
    CONTAINER("container");

    private String value;

    TopologyManagerScopeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TopologyManagerScopeEnum fromValue(String input) {
      for (TopologyManagerScopeEnum b : TopologyManagerScopeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TopologyManagerScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TopologyManagerScopeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TopologyManagerScopeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TopologyManagerScopeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("TopologyManagerScope")
  private TopologyManagerScopeEnum topologyManagerScope = null;

  public KubeletConfigForCreateNodePoolInput cpuManagerPolicy(String cpuManagerPolicy) {
    this.cpuManagerPolicy = cpuManagerPolicy;
    return this;
  }

   /**
   * Get cpuManagerPolicy
   * @return cpuManagerPolicy
  **/
  @Schema(description = "")
  public String getCpuManagerPolicy() {
    return cpuManagerPolicy;
  }

  public void setCpuManagerPolicy(String cpuManagerPolicy) {
    this.cpuManagerPolicy = cpuManagerPolicy;
  }

  public KubeletConfigForCreateNodePoolInput evictionHard(List<EvictionHardForCreateNodePoolInput> evictionHard) {
    this.evictionHard = evictionHard;
    return this;
  }

  public KubeletConfigForCreateNodePoolInput addEvictionHardItem(EvictionHardForCreateNodePoolInput evictionHardItem) {
    if (this.evictionHard == null) {
      this.evictionHard = new ArrayList<EvictionHardForCreateNodePoolInput>();
    }
    this.evictionHard.add(evictionHardItem);
    return this;
  }

   /**
   * Get evictionHard
   * @return evictionHard
  **/
  @Valid
  @Schema(description = "")
  public List<EvictionHardForCreateNodePoolInput> getEvictionHard() {
    return evictionHard;
  }

  public void setEvictionHard(List<EvictionHardForCreateNodePoolInput> evictionHard) {
    this.evictionHard = evictionHard;
  }

  public KubeletConfigForCreateNodePoolInput featureGates(FeatureGatesForCreateNodePoolInput featureGates) {
    this.featureGates = featureGates;
    return this;
  }

   /**
   * Get featureGates
   * @return featureGates
  **/
  @Valid
  @Schema(description = "")
  public FeatureGatesForCreateNodePoolInput getFeatureGates() {
    return featureGates;
  }

  public void setFeatureGates(FeatureGatesForCreateNodePoolInput featureGates) {
    this.featureGates = featureGates;
  }

  public KubeletConfigForCreateNodePoolInput kubeApiBurst(Integer kubeApiBurst) {
    this.kubeApiBurst = kubeApiBurst;
    return this;
  }

   /**
   * Get kubeApiBurst
   * minimum: 1
   * maximum: 100
   * @return kubeApiBurst
  **/
 @Min(1) @Max(100)  @Schema(description = "")
  public Integer getKubeApiBurst() {
    return kubeApiBurst;
  }

  public void setKubeApiBurst(Integer kubeApiBurst) {
    this.kubeApiBurst = kubeApiBurst;
  }

  public KubeletConfigForCreateNodePoolInput kubeApiQps(Integer kubeApiQps) {
    this.kubeApiQps = kubeApiQps;
    return this;
  }

   /**
   * Get kubeApiQps
   * minimum: 1
   * maximum: 50
   * @return kubeApiQps
  **/
 @Min(1) @Max(50)  @Schema(description = "")
  public Integer getKubeApiQps() {
    return kubeApiQps;
  }

  public void setKubeApiQps(Integer kubeApiQps) {
    this.kubeApiQps = kubeApiQps;
  }

  public KubeletConfigForCreateNodePoolInput kubeReserved(List<KubeReservedForCreateNodePoolInput> kubeReserved) {
    this.kubeReserved = kubeReserved;
    return this;
  }

  public KubeletConfigForCreateNodePoolInput addKubeReservedItem(KubeReservedForCreateNodePoolInput kubeReservedItem) {
    if (this.kubeReserved == null) {
      this.kubeReserved = new ArrayList<KubeReservedForCreateNodePoolInput>();
    }
    this.kubeReserved.add(kubeReservedItem);
    return this;
  }

   /**
   * Get kubeReserved
   * @return kubeReserved
  **/
  @Valid
  @Schema(description = "")
  public List<KubeReservedForCreateNodePoolInput> getKubeReserved() {
    return kubeReserved;
  }

  public void setKubeReserved(List<KubeReservedForCreateNodePoolInput> kubeReserved) {
    this.kubeReserved = kubeReserved;
  }

  public KubeletConfigForCreateNodePoolInput maxPods(Integer maxPods) {
    this.maxPods = maxPods;
    return this;
  }

   /**
   * Get maxPods
   * @return maxPods
  **/
  @Schema(description = "")
  public Integer getMaxPods() {
    return maxPods;
  }

  public void setMaxPods(Integer maxPods) {
    this.maxPods = maxPods;
  }

  public KubeletConfigForCreateNodePoolInput registryBurst(Integer registryBurst) {
    this.registryBurst = registryBurst;
    return this;
  }

   /**
   * Get registryBurst
   * minimum: 1
   * maximum: 100
   * @return registryBurst
  **/
 @Min(1) @Max(100)  @Schema(description = "")
  public Integer getRegistryBurst() {
    return registryBurst;
  }

  public void setRegistryBurst(Integer registryBurst) {
    this.registryBurst = registryBurst;
  }

  public KubeletConfigForCreateNodePoolInput registryPullQps(Integer registryPullQps) {
    this.registryPullQps = registryPullQps;
    return this;
  }

   /**
   * Get registryPullQps
   * minimum: 1
   * maximum: 50
   * @return registryPullQps
  **/
 @Min(1) @Max(50)  @Schema(description = "")
  public Integer getRegistryPullQps() {
    return registryPullQps;
  }

  public void setRegistryPullQps(Integer registryPullQps) {
    this.registryPullQps = registryPullQps;
  }

  public KubeletConfigForCreateNodePoolInput serializeImagePulls(Boolean serializeImagePulls) {
    this.serializeImagePulls = serializeImagePulls;
    return this;
  }

   /**
   * Get serializeImagePulls
   * @return serializeImagePulls
  **/
  @Schema(description = "")
  public Boolean isSerializeImagePulls() {
    return serializeImagePulls;
  }

  public void setSerializeImagePulls(Boolean serializeImagePulls) {
    this.serializeImagePulls = serializeImagePulls;
  }

  public KubeletConfigForCreateNodePoolInput systemReserved(List<SystemReservedForCreateNodePoolInput> systemReserved) {
    this.systemReserved = systemReserved;
    return this;
  }

  public KubeletConfigForCreateNodePoolInput addSystemReservedItem(SystemReservedForCreateNodePoolInput systemReservedItem) {
    if (this.systemReserved == null) {
      this.systemReserved = new ArrayList<SystemReservedForCreateNodePoolInput>();
    }
    this.systemReserved.add(systemReservedItem);
    return this;
  }

   /**
   * Get systemReserved
   * @return systemReserved
  **/
  @Valid
  @Schema(description = "")
  public List<SystemReservedForCreateNodePoolInput> getSystemReserved() {
    return systemReserved;
  }

  public void setSystemReserved(List<SystemReservedForCreateNodePoolInput> systemReserved) {
    this.systemReserved = systemReserved;
  }

  public KubeletConfigForCreateNodePoolInput topologyManagerPolicy(TopologyManagerPolicyEnum topologyManagerPolicy) {
    this.topologyManagerPolicy = topologyManagerPolicy;
    return this;
  }

   /**
   * Get topologyManagerPolicy
   * @return topologyManagerPolicy
  **/
  @Schema(description = "")
  public TopologyManagerPolicyEnum getTopologyManagerPolicy() {
    return topologyManagerPolicy;
  }

  public void setTopologyManagerPolicy(TopologyManagerPolicyEnum topologyManagerPolicy) {
    this.topologyManagerPolicy = topologyManagerPolicy;
  }

  public KubeletConfigForCreateNodePoolInput topologyManagerScope(TopologyManagerScopeEnum topologyManagerScope) {
    this.topologyManagerScope = topologyManagerScope;
    return this;
  }

   /**
   * Get topologyManagerScope
   * @return topologyManagerScope
  **/
  @Schema(description = "")
  public TopologyManagerScopeEnum getTopologyManagerScope() {
    return topologyManagerScope;
  }

  public void setTopologyManagerScope(TopologyManagerScopeEnum topologyManagerScope) {
    this.topologyManagerScope = topologyManagerScope;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KubeletConfigForCreateNodePoolInput kubeletConfigForCreateNodePoolInput = (KubeletConfigForCreateNodePoolInput) o;
    return Objects.equals(this.cpuManagerPolicy, kubeletConfigForCreateNodePoolInput.cpuManagerPolicy) &&
        Objects.equals(this.evictionHard, kubeletConfigForCreateNodePoolInput.evictionHard) &&
        Objects.equals(this.featureGates, kubeletConfigForCreateNodePoolInput.featureGates) &&
        Objects.equals(this.kubeApiBurst, kubeletConfigForCreateNodePoolInput.kubeApiBurst) &&
        Objects.equals(this.kubeApiQps, kubeletConfigForCreateNodePoolInput.kubeApiQps) &&
        Objects.equals(this.kubeReserved, kubeletConfigForCreateNodePoolInput.kubeReserved) &&
        Objects.equals(this.maxPods, kubeletConfigForCreateNodePoolInput.maxPods) &&
        Objects.equals(this.registryBurst, kubeletConfigForCreateNodePoolInput.registryBurst) &&
        Objects.equals(this.registryPullQps, kubeletConfigForCreateNodePoolInput.registryPullQps) &&
        Objects.equals(this.serializeImagePulls, kubeletConfigForCreateNodePoolInput.serializeImagePulls) &&
        Objects.equals(this.systemReserved, kubeletConfigForCreateNodePoolInput.systemReserved) &&
        Objects.equals(this.topologyManagerPolicy, kubeletConfigForCreateNodePoolInput.topologyManagerPolicy) &&
        Objects.equals(this.topologyManagerScope, kubeletConfigForCreateNodePoolInput.topologyManagerScope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cpuManagerPolicy, evictionHard, featureGates, kubeApiBurst, kubeApiQps, kubeReserved, maxPods, registryBurst, registryPullQps, serializeImagePulls, systemReserved, topologyManagerPolicy, topologyManagerScope);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KubeletConfigForCreateNodePoolInput {\n");
    
    sb.append("    cpuManagerPolicy: ").append(toIndentedString(cpuManagerPolicy)).append("\n");
    sb.append("    evictionHard: ").append(toIndentedString(evictionHard)).append("\n");
    sb.append("    featureGates: ").append(toIndentedString(featureGates)).append("\n");
    sb.append("    kubeApiBurst: ").append(toIndentedString(kubeApiBurst)).append("\n");
    sb.append("    kubeApiQps: ").append(toIndentedString(kubeApiQps)).append("\n");
    sb.append("    kubeReserved: ").append(toIndentedString(kubeReserved)).append("\n");
    sb.append("    maxPods: ").append(toIndentedString(maxPods)).append("\n");
    sb.append("    registryBurst: ").append(toIndentedString(registryBurst)).append("\n");
    sb.append("    registryPullQps: ").append(toIndentedString(registryPullQps)).append("\n");
    sb.append("    serializeImagePulls: ").append(toIndentedString(serializeImagePulls)).append("\n");
    sb.append("    systemReserved: ").append(toIndentedString(systemReserved)).append("\n");
    sb.append("    topologyManagerPolicy: ").append(toIndentedString(topologyManagerPolicy)).append("\n");
    sb.append("    topologyManagerScope: ").append(toIndentedString(topologyManagerScope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
