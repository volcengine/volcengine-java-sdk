/*
 * seccenter20240508
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.seccenter20240508.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.seccenter20240508.model.RuleForAddRaspConfigInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * BlockForAddRaspConfigInput
 */



public class BlockForAddRaspConfigInput {
  @SerializedName("HookFunc")
  private List<String> hookFunc = null;

  @SerializedName("HookParam")
  private Long hookParam = null;

  @SerializedName("Rules")
  private List<RuleForAddRaspConfigInput> rules = null;

  @SerializedName("Runtime")
  private String runtime = null;

  public BlockForAddRaspConfigInput hookFunc(List<String> hookFunc) {
    this.hookFunc = hookFunc;
    return this;
  }

  public BlockForAddRaspConfigInput addHookFuncItem(String hookFuncItem) {
    if (this.hookFunc == null) {
      this.hookFunc = new ArrayList<String>();
    }
    this.hookFunc.add(hookFuncItem);
    return this;
  }

   /**
   * Get hookFunc
   * @return hookFunc
  **/
  @Schema(description = "")
  public List<String> getHookFunc() {
    return hookFunc;
  }

  public void setHookFunc(List<String> hookFunc) {
    this.hookFunc = hookFunc;
  }

  public BlockForAddRaspConfigInput hookParam(Long hookParam) {
    this.hookParam = hookParam;
    return this;
  }

   /**
   * Get hookParam
   * @return hookParam
  **/
  @Schema(description = "")
  public Long getHookParam() {
    return hookParam;
  }

  public void setHookParam(Long hookParam) {
    this.hookParam = hookParam;
  }

  public BlockForAddRaspConfigInput rules(List<RuleForAddRaspConfigInput> rules) {
    this.rules = rules;
    return this;
  }

  public BlockForAddRaspConfigInput addRulesItem(RuleForAddRaspConfigInput rulesItem) {
    if (this.rules == null) {
      this.rules = new ArrayList<RuleForAddRaspConfigInput>();
    }
    this.rules.add(rulesItem);
    return this;
  }

   /**
   * Get rules
   * @return rules
  **/
  @Valid
  @Schema(description = "")
  public List<RuleForAddRaspConfigInput> getRules() {
    return rules;
  }

  public void setRules(List<RuleForAddRaspConfigInput> rules) {
    this.rules = rules;
  }

  public BlockForAddRaspConfigInput runtime(String runtime) {
    this.runtime = runtime;
    return this;
  }

   /**
   * Get runtime
   * @return runtime
  **/
  @Schema(description = "")
  public String getRuntime() {
    return runtime;
  }

  public void setRuntime(String runtime) {
    this.runtime = runtime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlockForAddRaspConfigInput blockForAddRaspConfigInput = (BlockForAddRaspConfigInput) o;
    return Objects.equals(this.hookFunc, blockForAddRaspConfigInput.hookFunc) &&
        Objects.equals(this.hookParam, blockForAddRaspConfigInput.hookParam) &&
        Objects.equals(this.rules, blockForAddRaspConfigInput.rules) &&
        Objects.equals(this.runtime, blockForAddRaspConfigInput.runtime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hookFunc, hookParam, rules, runtime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlockForAddRaspConfigInput {\n");
    
    sb.append("    hookFunc: ").append(toIndentedString(hookFunc)).append("\n");
    sb.append("    hookParam: ").append(toIndentedString(hookParam)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
