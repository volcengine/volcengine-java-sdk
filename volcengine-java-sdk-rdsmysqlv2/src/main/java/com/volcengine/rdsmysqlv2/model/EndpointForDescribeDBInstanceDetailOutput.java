/*
 * rds_mysql_v2
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.rdsmysqlv2.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.rdsmysqlv2.model.AddressForDescribeDBInstanceDetailOutput;
import com.volcengine.rdsmysqlv2.model.ReadOnlyNodeWeightForDescribeDBInstanceDetailOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * EndpointForDescribeDBInstanceDetailOutput
 */


public class EndpointForDescribeDBInstanceDetailOutput {
  @SerializedName("Addresses")
  private List<AddressForDescribeDBInstanceDetailOutput> addresses = null;

  @SerializedName("AutoAddNewNodes")
  private String autoAddNewNodes = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("EnableReadOnly")
  private String enableReadOnly = null;

  @SerializedName("EnableReadWriteSplitting")
  private String enableReadWriteSplitting = null;

  @SerializedName("EndpointId")
  private String endpointId = null;

  @SerializedName("EndpointName")
  private String endpointName = null;

  @SerializedName("EndpointType")
  private String endpointType = null;

  @SerializedName("ReadOnlyNodeWeight")
  private List<ReadOnlyNodeWeightForDescribeDBInstanceDetailOutput> readOnlyNodeWeight = null;

  @SerializedName("ReadWriteMode")
  private String readWriteMode = null;

  public EndpointForDescribeDBInstanceDetailOutput addresses(List<AddressForDescribeDBInstanceDetailOutput> addresses) {
    this.addresses = addresses;
    return this;
  }

  public EndpointForDescribeDBInstanceDetailOutput addAddressesItem(AddressForDescribeDBInstanceDetailOutput addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<AddressForDescribeDBInstanceDetailOutput>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

   /**
   * Get addresses
   * @return addresses
  **/
  @Valid
  @Schema(description = "")
  public List<AddressForDescribeDBInstanceDetailOutput> getAddresses() {
    return addresses;
  }

  public void setAddresses(List<AddressForDescribeDBInstanceDetailOutput> addresses) {
    this.addresses = addresses;
  }

  public EndpointForDescribeDBInstanceDetailOutput autoAddNewNodes(String autoAddNewNodes) {
    this.autoAddNewNodes = autoAddNewNodes;
    return this;
  }

   /**
   * Get autoAddNewNodes
   * @return autoAddNewNodes
  **/
  @Schema(description = "")
  public String getAutoAddNewNodes() {
    return autoAddNewNodes;
  }

  public void setAutoAddNewNodes(String autoAddNewNodes) {
    this.autoAddNewNodes = autoAddNewNodes;
  }

  public EndpointForDescribeDBInstanceDetailOutput description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public EndpointForDescribeDBInstanceDetailOutput enableReadOnly(String enableReadOnly) {
    this.enableReadOnly = enableReadOnly;
    return this;
  }

   /**
   * Get enableReadOnly
   * @return enableReadOnly
  **/
  @Schema(description = "")
  public String getEnableReadOnly() {
    return enableReadOnly;
  }

  public void setEnableReadOnly(String enableReadOnly) {
    this.enableReadOnly = enableReadOnly;
  }

  public EndpointForDescribeDBInstanceDetailOutput enableReadWriteSplitting(String enableReadWriteSplitting) {
    this.enableReadWriteSplitting = enableReadWriteSplitting;
    return this;
  }

   /**
   * Get enableReadWriteSplitting
   * @return enableReadWriteSplitting
  **/
  @Schema(description = "")
  public String getEnableReadWriteSplitting() {
    return enableReadWriteSplitting;
  }

  public void setEnableReadWriteSplitting(String enableReadWriteSplitting) {
    this.enableReadWriteSplitting = enableReadWriteSplitting;
  }

  public EndpointForDescribeDBInstanceDetailOutput endpointId(String endpointId) {
    this.endpointId = endpointId;
    return this;
  }

   /**
   * Get endpointId
   * @return endpointId
  **/
  @Schema(description = "")
  public String getEndpointId() {
    return endpointId;
  }

  public void setEndpointId(String endpointId) {
    this.endpointId = endpointId;
  }

  public EndpointForDescribeDBInstanceDetailOutput endpointName(String endpointName) {
    this.endpointName = endpointName;
    return this;
  }

   /**
   * Get endpointName
   * @return endpointName
  **/
  @Schema(description = "")
  public String getEndpointName() {
    return endpointName;
  }

  public void setEndpointName(String endpointName) {
    this.endpointName = endpointName;
  }

  public EndpointForDescribeDBInstanceDetailOutput endpointType(String endpointType) {
    this.endpointType = endpointType;
    return this;
  }

   /**
   * Get endpointType
   * @return endpointType
  **/
  @Schema(description = "")
  public String getEndpointType() {
    return endpointType;
  }

  public void setEndpointType(String endpointType) {
    this.endpointType = endpointType;
  }

  public EndpointForDescribeDBInstanceDetailOutput readOnlyNodeWeight(List<ReadOnlyNodeWeightForDescribeDBInstanceDetailOutput> readOnlyNodeWeight) {
    this.readOnlyNodeWeight = readOnlyNodeWeight;
    return this;
  }

  public EndpointForDescribeDBInstanceDetailOutput addReadOnlyNodeWeightItem(ReadOnlyNodeWeightForDescribeDBInstanceDetailOutput readOnlyNodeWeightItem) {
    if (this.readOnlyNodeWeight == null) {
      this.readOnlyNodeWeight = new ArrayList<ReadOnlyNodeWeightForDescribeDBInstanceDetailOutput>();
    }
    this.readOnlyNodeWeight.add(readOnlyNodeWeightItem);
    return this;
  }

   /**
   * Get readOnlyNodeWeight
   * @return readOnlyNodeWeight
  **/
  @Valid
  @Schema(description = "")
  public List<ReadOnlyNodeWeightForDescribeDBInstanceDetailOutput> getReadOnlyNodeWeight() {
    return readOnlyNodeWeight;
  }

  public void setReadOnlyNodeWeight(List<ReadOnlyNodeWeightForDescribeDBInstanceDetailOutput> readOnlyNodeWeight) {
    this.readOnlyNodeWeight = readOnlyNodeWeight;
  }

  public EndpointForDescribeDBInstanceDetailOutput readWriteMode(String readWriteMode) {
    this.readWriteMode = readWriteMode;
    return this;
  }

   /**
   * Get readWriteMode
   * @return readWriteMode
  **/
  @Schema(description = "")
  public String getReadWriteMode() {
    return readWriteMode;
  }

  public void setReadWriteMode(String readWriteMode) {
    this.readWriteMode = readWriteMode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointForDescribeDBInstanceDetailOutput endpointForDescribeDBInstanceDetailOutput = (EndpointForDescribeDBInstanceDetailOutput) o;
    return Objects.equals(this.addresses, endpointForDescribeDBInstanceDetailOutput.addresses) &&
        Objects.equals(this.autoAddNewNodes, endpointForDescribeDBInstanceDetailOutput.autoAddNewNodes) &&
        Objects.equals(this.description, endpointForDescribeDBInstanceDetailOutput.description) &&
        Objects.equals(this.enableReadOnly, endpointForDescribeDBInstanceDetailOutput.enableReadOnly) &&
        Objects.equals(this.enableReadWriteSplitting, endpointForDescribeDBInstanceDetailOutput.enableReadWriteSplitting) &&
        Objects.equals(this.endpointId, endpointForDescribeDBInstanceDetailOutput.endpointId) &&
        Objects.equals(this.endpointName, endpointForDescribeDBInstanceDetailOutput.endpointName) &&
        Objects.equals(this.endpointType, endpointForDescribeDBInstanceDetailOutput.endpointType) &&
        Objects.equals(this.readOnlyNodeWeight, endpointForDescribeDBInstanceDetailOutput.readOnlyNodeWeight) &&
        Objects.equals(this.readWriteMode, endpointForDescribeDBInstanceDetailOutput.readWriteMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addresses, autoAddNewNodes, description, enableReadOnly, enableReadWriteSplitting, endpointId, endpointName, endpointType, readOnlyNodeWeight, readWriteMode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointForDescribeDBInstanceDetailOutput {\n");
    
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    autoAddNewNodes: ").append(toIndentedString(autoAddNewNodes)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enableReadOnly: ").append(toIndentedString(enableReadOnly)).append("\n");
    sb.append("    enableReadWriteSplitting: ").append(toIndentedString(enableReadWriteSplitting)).append("\n");
    sb.append("    endpointId: ").append(toIndentedString(endpointId)).append("\n");
    sb.append("    endpointName: ").append(toIndentedString(endpointName)).append("\n");
    sb.append("    endpointType: ").append(toIndentedString(endpointType)).append("\n");
    sb.append("    readOnlyNodeWeight: ").append(toIndentedString(readOnlyNodeWeight)).append("\n");
    sb.append("    readWriteMode: ").append(toIndentedString(readWriteMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
