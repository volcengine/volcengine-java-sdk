/*
 * clb
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.clb.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.clb.model.HealthCheckForCreateListenerInput;
import com.volcengine.clb.model.TagForCreateListenerInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * CreateListenerRequest
 */



public class CreateListenerRequest {
  @SerializedName("AclIds")
  private List<String> aclIds = null;

  @SerializedName("AclStatus")
  private String aclStatus = null;

  @SerializedName("AclType")
  private String aclType = null;

  @SerializedName("Bandwidth")
  private Integer bandwidth = null;

  @SerializedName("CACertificateId")
  private String caCertificateId = null;

  @SerializedName("CAEnabled")
  private String caEnabled = null;

  @SerializedName("CertCenterCertificateId")
  private String certCenterCertificateId = null;

  @SerializedName("CertificateId")
  private String certificateId = null;

  @SerializedName("CertificateSource")
  private String certificateSource = null;

  @SerializedName("ClientBodyTimeout")
  private Integer clientBodyTimeout = null;

  @SerializedName("ClientHeaderTimeout")
  private Integer clientHeaderTimeout = null;

  @SerializedName("ConnectionDrainEnabled")
  private String connectionDrainEnabled = null;

  @SerializedName("ConnectionDrainTimeout")
  private Integer connectionDrainTimeout = null;

  @SerializedName("Cookie")
  private String cookie = null;

  @SerializedName("Cps")
  private Integer cps = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("Enabled")
  private String enabled = null;

  @SerializedName("EndPort")
  private Integer endPort = null;

  @SerializedName("EnhancedSchedulerEnable")
  private String enhancedSchedulerEnable = null;

  @SerializedName("EstablishedTimeout")
  private Integer establishedTimeout = null;

  @SerializedName("HealthCheck")
  private HealthCheckForCreateListenerInput healthCheck = null;

  @SerializedName("Http2Enabled")
  private String http2Enabled = null;

  @SerializedName("KeepaliveTimeout")
  private Integer keepaliveTimeout = null;

  @SerializedName("ListenerName")
  private String listenerName = null;

  @SerializedName("LoadBalancerId")
  private String loadBalancerId = null;

  @SerializedName("LoadType")
  private String loadType = null;

  @SerializedName("MaxConnections")
  private Integer maxConnections = null;

  @SerializedName("PersistenceTimeout")
  private Integer persistenceTimeout = null;

  @SerializedName("PersistenceType")
  private String persistenceType = null;

  @SerializedName("Port")
  private Integer port = null;

  @SerializedName("Protocol")
  private String protocol = null;

  @SerializedName("ProxyConnectTimeout")
  private Integer proxyConnectTimeout = null;

  @SerializedName("ProxyProtocolType")
  private String proxyProtocolType = null;

  @SerializedName("ProxyReadTimeout")
  private Integer proxyReadTimeout = null;

  @SerializedName("ProxySendTimeout")
  private Integer proxySendTimeout = null;

  @SerializedName("Scheduler")
  private String scheduler = null;

  @SerializedName("SecurityPolicyId")
  private String securityPolicyId = null;

  @SerializedName("SendTimeout")
  private Integer sendTimeout = null;

  @SerializedName("ServerGroupId")
  private String serverGroupId = null;

  @SerializedName("StartPort")
  private Integer startPort = null;

  @SerializedName("Tags")
  private List<TagForCreateListenerInput> tags = null;

  public CreateListenerRequest aclIds(List<String> aclIds) {
    this.aclIds = aclIds;
    return this;
  }

  public CreateListenerRequest addAclIdsItem(String aclIdsItem) {
    if (this.aclIds == null) {
      this.aclIds = new ArrayList<String>();
    }
    this.aclIds.add(aclIdsItem);
    return this;
  }

   /**
   * Get aclIds
   * @return aclIds
  **/
  @Schema(description = "")
  public List<String> getAclIds() {
    return aclIds;
  }

  public void setAclIds(List<String> aclIds) {
    this.aclIds = aclIds;
  }

  public CreateListenerRequest aclStatus(String aclStatus) {
    this.aclStatus = aclStatus;
    return this;
  }

   /**
   * Get aclStatus
   * @return aclStatus
  **/
  @Schema(description = "")
  public String getAclStatus() {
    return aclStatus;
  }

  public void setAclStatus(String aclStatus) {
    this.aclStatus = aclStatus;
  }

  public CreateListenerRequest aclType(String aclType) {
    this.aclType = aclType;
    return this;
  }

   /**
   * Get aclType
   * @return aclType
  **/
  @Schema(description = "")
  public String getAclType() {
    return aclType;
  }

  public void setAclType(String aclType) {
    this.aclType = aclType;
  }

  public CreateListenerRequest bandwidth(Integer bandwidth) {
    this.bandwidth = bandwidth;
    return this;
  }

   /**
   * Get bandwidth
   * @return bandwidth
  **/
  @Schema(description = "")
  public Integer getBandwidth() {
    return bandwidth;
  }

  public void setBandwidth(Integer bandwidth) {
    this.bandwidth = bandwidth;
  }

  public CreateListenerRequest caCertificateId(String caCertificateId) {
    this.caCertificateId = caCertificateId;
    return this;
  }

   /**
   * Get caCertificateId
   * @return caCertificateId
  **/
  @Schema(description = "")
  public String getCaCertificateId() {
    return caCertificateId;
  }

  public void setCaCertificateId(String caCertificateId) {
    this.caCertificateId = caCertificateId;
  }

  public CreateListenerRequest caEnabled(String caEnabled) {
    this.caEnabled = caEnabled;
    return this;
  }

   /**
   * Get caEnabled
   * @return caEnabled
  **/
  @Schema(description = "")
  public String getCaEnabled() {
    return caEnabled;
  }

  public void setCaEnabled(String caEnabled) {
    this.caEnabled = caEnabled;
  }

  public CreateListenerRequest certCenterCertificateId(String certCenterCertificateId) {
    this.certCenterCertificateId = certCenterCertificateId;
    return this;
  }

   /**
   * Get certCenterCertificateId
   * @return certCenterCertificateId
  **/
  @Schema(description = "")
  public String getCertCenterCertificateId() {
    return certCenterCertificateId;
  }

  public void setCertCenterCertificateId(String certCenterCertificateId) {
    this.certCenterCertificateId = certCenterCertificateId;
  }

  public CreateListenerRequest certificateId(String certificateId) {
    this.certificateId = certificateId;
    return this;
  }

   /**
   * Get certificateId
   * @return certificateId
  **/
  @Schema(description = "")
  public String getCertificateId() {
    return certificateId;
  }

  public void setCertificateId(String certificateId) {
    this.certificateId = certificateId;
  }

  public CreateListenerRequest certificateSource(String certificateSource) {
    this.certificateSource = certificateSource;
    return this;
  }

   /**
   * Get certificateSource
   * @return certificateSource
  **/
  @Schema(description = "")
  public String getCertificateSource() {
    return certificateSource;
  }

  public void setCertificateSource(String certificateSource) {
    this.certificateSource = certificateSource;
  }

  public CreateListenerRequest clientBodyTimeout(Integer clientBodyTimeout) {
    this.clientBodyTimeout = clientBodyTimeout;
    return this;
  }

   /**
   * Get clientBodyTimeout
   * @return clientBodyTimeout
  **/
  @Schema(description = "")
  public Integer getClientBodyTimeout() {
    return clientBodyTimeout;
  }

  public void setClientBodyTimeout(Integer clientBodyTimeout) {
    this.clientBodyTimeout = clientBodyTimeout;
  }

  public CreateListenerRequest clientHeaderTimeout(Integer clientHeaderTimeout) {
    this.clientHeaderTimeout = clientHeaderTimeout;
    return this;
  }

   /**
   * Get clientHeaderTimeout
   * @return clientHeaderTimeout
  **/
  @Schema(description = "")
  public Integer getClientHeaderTimeout() {
    return clientHeaderTimeout;
  }

  public void setClientHeaderTimeout(Integer clientHeaderTimeout) {
    this.clientHeaderTimeout = clientHeaderTimeout;
  }

  public CreateListenerRequest connectionDrainEnabled(String connectionDrainEnabled) {
    this.connectionDrainEnabled = connectionDrainEnabled;
    return this;
  }

   /**
   * Get connectionDrainEnabled
   * @return connectionDrainEnabled
  **/
  @Schema(description = "")
  public String getConnectionDrainEnabled() {
    return connectionDrainEnabled;
  }

  public void setConnectionDrainEnabled(String connectionDrainEnabled) {
    this.connectionDrainEnabled = connectionDrainEnabled;
  }

  public CreateListenerRequest connectionDrainTimeout(Integer connectionDrainTimeout) {
    this.connectionDrainTimeout = connectionDrainTimeout;
    return this;
  }

   /**
   * Get connectionDrainTimeout
   * @return connectionDrainTimeout
  **/
  @Schema(description = "")
  public Integer getConnectionDrainTimeout() {
    return connectionDrainTimeout;
  }

  public void setConnectionDrainTimeout(Integer connectionDrainTimeout) {
    this.connectionDrainTimeout = connectionDrainTimeout;
  }

  public CreateListenerRequest cookie(String cookie) {
    this.cookie = cookie;
    return this;
  }

   /**
   * Get cookie
   * @return cookie
  **/
  @Schema(description = "")
  public String getCookie() {
    return cookie;
  }

  public void setCookie(String cookie) {
    this.cookie = cookie;
  }

  public CreateListenerRequest cps(Integer cps) {
    this.cps = cps;
    return this;
  }

   /**
   * Get cps
   * @return cps
  **/
  @Schema(description = "")
  public Integer getCps() {
    return cps;
  }

  public void setCps(Integer cps) {
    this.cps = cps;
  }

  public CreateListenerRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CreateListenerRequest enabled(String enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @Schema(description = "")
  public String getEnabled() {
    return enabled;
  }

  public void setEnabled(String enabled) {
    this.enabled = enabled;
  }

  public CreateListenerRequest endPort(Integer endPort) {
    this.endPort = endPort;
    return this;
  }

   /**
   * Get endPort
   * @return endPort
  **/
  @Schema(description = "")
  public Integer getEndPort() {
    return endPort;
  }

  public void setEndPort(Integer endPort) {
    this.endPort = endPort;
  }

  public CreateListenerRequest enhancedSchedulerEnable(String enhancedSchedulerEnable) {
    this.enhancedSchedulerEnable = enhancedSchedulerEnable;
    return this;
  }

   /**
   * Get enhancedSchedulerEnable
   * @return enhancedSchedulerEnable
  **/
  @Schema(description = "")
  public String getEnhancedSchedulerEnable() {
    return enhancedSchedulerEnable;
  }

  public void setEnhancedSchedulerEnable(String enhancedSchedulerEnable) {
    this.enhancedSchedulerEnable = enhancedSchedulerEnable;
  }

  public CreateListenerRequest establishedTimeout(Integer establishedTimeout) {
    this.establishedTimeout = establishedTimeout;
    return this;
  }

   /**
   * Get establishedTimeout
   * @return establishedTimeout
  **/
  @Schema(description = "")
  public Integer getEstablishedTimeout() {
    return establishedTimeout;
  }

  public void setEstablishedTimeout(Integer establishedTimeout) {
    this.establishedTimeout = establishedTimeout;
  }

  public CreateListenerRequest healthCheck(HealthCheckForCreateListenerInput healthCheck) {
    this.healthCheck = healthCheck;
    return this;
  }

   /**
   * Get healthCheck
   * @return healthCheck
  **/
  @Valid
  @Schema(description = "")
  public HealthCheckForCreateListenerInput getHealthCheck() {
    return healthCheck;
  }

  public void setHealthCheck(HealthCheckForCreateListenerInput healthCheck) {
    this.healthCheck = healthCheck;
  }

  public CreateListenerRequest http2Enabled(String http2Enabled) {
    this.http2Enabled = http2Enabled;
    return this;
  }

   /**
   * Get http2Enabled
   * @return http2Enabled
  **/
  @Schema(description = "")
  public String getHttp2Enabled() {
    return http2Enabled;
  }

  public void setHttp2Enabled(String http2Enabled) {
    this.http2Enabled = http2Enabled;
  }

  public CreateListenerRequest keepaliveTimeout(Integer keepaliveTimeout) {
    this.keepaliveTimeout = keepaliveTimeout;
    return this;
  }

   /**
   * Get keepaliveTimeout
   * @return keepaliveTimeout
  **/
  @Schema(description = "")
  public Integer getKeepaliveTimeout() {
    return keepaliveTimeout;
  }

  public void setKeepaliveTimeout(Integer keepaliveTimeout) {
    this.keepaliveTimeout = keepaliveTimeout;
  }

  public CreateListenerRequest listenerName(String listenerName) {
    this.listenerName = listenerName;
    return this;
  }

   /**
   * Get listenerName
   * @return listenerName
  **/
  @Schema(description = "")
  public String getListenerName() {
    return listenerName;
  }

  public void setListenerName(String listenerName) {
    this.listenerName = listenerName;
  }

  public CreateListenerRequest loadBalancerId(String loadBalancerId) {
    this.loadBalancerId = loadBalancerId;
    return this;
  }

   /**
   * Get loadBalancerId
   * @return loadBalancerId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getLoadBalancerId() {
    return loadBalancerId;
  }

  public void setLoadBalancerId(String loadBalancerId) {
    this.loadBalancerId = loadBalancerId;
  }

  public CreateListenerRequest loadType(String loadType) {
    this.loadType = loadType;
    return this;
  }

   /**
   * Get loadType
   * @return loadType
  **/
  @Schema(description = "")
  public String getLoadType() {
    return loadType;
  }

  public void setLoadType(String loadType) {
    this.loadType = loadType;
  }

  public CreateListenerRequest maxConnections(Integer maxConnections) {
    this.maxConnections = maxConnections;
    return this;
  }

   /**
   * Get maxConnections
   * @return maxConnections
  **/
  @Schema(description = "")
  public Integer getMaxConnections() {
    return maxConnections;
  }

  public void setMaxConnections(Integer maxConnections) {
    this.maxConnections = maxConnections;
  }

  public CreateListenerRequest persistenceTimeout(Integer persistenceTimeout) {
    this.persistenceTimeout = persistenceTimeout;
    return this;
  }

   /**
   * Get persistenceTimeout
   * @return persistenceTimeout
  **/
  @Schema(description = "")
  public Integer getPersistenceTimeout() {
    return persistenceTimeout;
  }

  public void setPersistenceTimeout(Integer persistenceTimeout) {
    this.persistenceTimeout = persistenceTimeout;
  }

  public CreateListenerRequest persistenceType(String persistenceType) {
    this.persistenceType = persistenceType;
    return this;
  }

   /**
   * Get persistenceType
   * @return persistenceType
  **/
  @Schema(description = "")
  public String getPersistenceType() {
    return persistenceType;
  }

  public void setPersistenceType(String persistenceType) {
    this.persistenceType = persistenceType;
  }

  public CreateListenerRequest port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @NotNull
  @Schema(required = true, description = "")
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }

  public CreateListenerRequest protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * Get protocol
   * @return protocol
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }

  public CreateListenerRequest proxyConnectTimeout(Integer proxyConnectTimeout) {
    this.proxyConnectTimeout = proxyConnectTimeout;
    return this;
  }

   /**
   * Get proxyConnectTimeout
   * @return proxyConnectTimeout
  **/
  @Schema(description = "")
  public Integer getProxyConnectTimeout() {
    return proxyConnectTimeout;
  }

  public void setProxyConnectTimeout(Integer proxyConnectTimeout) {
    this.proxyConnectTimeout = proxyConnectTimeout;
  }

  public CreateListenerRequest proxyProtocolType(String proxyProtocolType) {
    this.proxyProtocolType = proxyProtocolType;
    return this;
  }

   /**
   * Get proxyProtocolType
   * @return proxyProtocolType
  **/
  @Schema(description = "")
  public String getProxyProtocolType() {
    return proxyProtocolType;
  }

  public void setProxyProtocolType(String proxyProtocolType) {
    this.proxyProtocolType = proxyProtocolType;
  }

  public CreateListenerRequest proxyReadTimeout(Integer proxyReadTimeout) {
    this.proxyReadTimeout = proxyReadTimeout;
    return this;
  }

   /**
   * Get proxyReadTimeout
   * @return proxyReadTimeout
  **/
  @Schema(description = "")
  public Integer getProxyReadTimeout() {
    return proxyReadTimeout;
  }

  public void setProxyReadTimeout(Integer proxyReadTimeout) {
    this.proxyReadTimeout = proxyReadTimeout;
  }

  public CreateListenerRequest proxySendTimeout(Integer proxySendTimeout) {
    this.proxySendTimeout = proxySendTimeout;
    return this;
  }

   /**
   * Get proxySendTimeout
   * @return proxySendTimeout
  **/
  @Schema(description = "")
  public Integer getProxySendTimeout() {
    return proxySendTimeout;
  }

  public void setProxySendTimeout(Integer proxySendTimeout) {
    this.proxySendTimeout = proxySendTimeout;
  }

  public CreateListenerRequest scheduler(String scheduler) {
    this.scheduler = scheduler;
    return this;
  }

   /**
   * Get scheduler
   * @return scheduler
  **/
  @Schema(description = "")
  public String getScheduler() {
    return scheduler;
  }

  public void setScheduler(String scheduler) {
    this.scheduler = scheduler;
  }

  public CreateListenerRequest securityPolicyId(String securityPolicyId) {
    this.securityPolicyId = securityPolicyId;
    return this;
  }

   /**
   * Get securityPolicyId
   * @return securityPolicyId
  **/
  @Schema(description = "")
  public String getSecurityPolicyId() {
    return securityPolicyId;
  }

  public void setSecurityPolicyId(String securityPolicyId) {
    this.securityPolicyId = securityPolicyId;
  }

  public CreateListenerRequest sendTimeout(Integer sendTimeout) {
    this.sendTimeout = sendTimeout;
    return this;
  }

   /**
   * Get sendTimeout
   * @return sendTimeout
  **/
  @Schema(description = "")
  public Integer getSendTimeout() {
    return sendTimeout;
  }

  public void setSendTimeout(Integer sendTimeout) {
    this.sendTimeout = sendTimeout;
  }

  public CreateListenerRequest serverGroupId(String serverGroupId) {
    this.serverGroupId = serverGroupId;
    return this;
  }

   /**
   * Get serverGroupId
   * @return serverGroupId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getServerGroupId() {
    return serverGroupId;
  }

  public void setServerGroupId(String serverGroupId) {
    this.serverGroupId = serverGroupId;
  }

  public CreateListenerRequest startPort(Integer startPort) {
    this.startPort = startPort;
    return this;
  }

   /**
   * Get startPort
   * @return startPort
  **/
  @Schema(description = "")
  public Integer getStartPort() {
    return startPort;
  }

  public void setStartPort(Integer startPort) {
    this.startPort = startPort;
  }

  public CreateListenerRequest tags(List<TagForCreateListenerInput> tags) {
    this.tags = tags;
    return this;
  }

  public CreateListenerRequest addTagsItem(TagForCreateListenerInput tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<TagForCreateListenerInput>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Valid
  @Schema(description = "")
  public List<TagForCreateListenerInput> getTags() {
    return tags;
  }

  public void setTags(List<TagForCreateListenerInput> tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateListenerRequest createListenerRequest = (CreateListenerRequest) o;
    return Objects.equals(this.aclIds, createListenerRequest.aclIds) &&
        Objects.equals(this.aclStatus, createListenerRequest.aclStatus) &&
        Objects.equals(this.aclType, createListenerRequest.aclType) &&
        Objects.equals(this.bandwidth, createListenerRequest.bandwidth) &&
        Objects.equals(this.caCertificateId, createListenerRequest.caCertificateId) &&
        Objects.equals(this.caEnabled, createListenerRequest.caEnabled) &&
        Objects.equals(this.certCenterCertificateId, createListenerRequest.certCenterCertificateId) &&
        Objects.equals(this.certificateId, createListenerRequest.certificateId) &&
        Objects.equals(this.certificateSource, createListenerRequest.certificateSource) &&
        Objects.equals(this.clientBodyTimeout, createListenerRequest.clientBodyTimeout) &&
        Objects.equals(this.clientHeaderTimeout, createListenerRequest.clientHeaderTimeout) &&
        Objects.equals(this.connectionDrainEnabled, createListenerRequest.connectionDrainEnabled) &&
        Objects.equals(this.connectionDrainTimeout, createListenerRequest.connectionDrainTimeout) &&
        Objects.equals(this.cookie, createListenerRequest.cookie) &&
        Objects.equals(this.cps, createListenerRequest.cps) &&
        Objects.equals(this.description, createListenerRequest.description) &&
        Objects.equals(this.enabled, createListenerRequest.enabled) &&
        Objects.equals(this.endPort, createListenerRequest.endPort) &&
        Objects.equals(this.enhancedSchedulerEnable, createListenerRequest.enhancedSchedulerEnable) &&
        Objects.equals(this.establishedTimeout, createListenerRequest.establishedTimeout) &&
        Objects.equals(this.healthCheck, createListenerRequest.healthCheck) &&
        Objects.equals(this.http2Enabled, createListenerRequest.http2Enabled) &&
        Objects.equals(this.keepaliveTimeout, createListenerRequest.keepaliveTimeout) &&
        Objects.equals(this.listenerName, createListenerRequest.listenerName) &&
        Objects.equals(this.loadBalancerId, createListenerRequest.loadBalancerId) &&
        Objects.equals(this.loadType, createListenerRequest.loadType) &&
        Objects.equals(this.maxConnections, createListenerRequest.maxConnections) &&
        Objects.equals(this.persistenceTimeout, createListenerRequest.persistenceTimeout) &&
        Objects.equals(this.persistenceType, createListenerRequest.persistenceType) &&
        Objects.equals(this.port, createListenerRequest.port) &&
        Objects.equals(this.protocol, createListenerRequest.protocol) &&
        Objects.equals(this.proxyConnectTimeout, createListenerRequest.proxyConnectTimeout) &&
        Objects.equals(this.proxyProtocolType, createListenerRequest.proxyProtocolType) &&
        Objects.equals(this.proxyReadTimeout, createListenerRequest.proxyReadTimeout) &&
        Objects.equals(this.proxySendTimeout, createListenerRequest.proxySendTimeout) &&
        Objects.equals(this.scheduler, createListenerRequest.scheduler) &&
        Objects.equals(this.securityPolicyId, createListenerRequest.securityPolicyId) &&
        Objects.equals(this.sendTimeout, createListenerRequest.sendTimeout) &&
        Objects.equals(this.serverGroupId, createListenerRequest.serverGroupId) &&
        Objects.equals(this.startPort, createListenerRequest.startPort) &&
        Objects.equals(this.tags, createListenerRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aclIds, aclStatus, aclType, bandwidth, caCertificateId, caEnabled, certCenterCertificateId, certificateId, certificateSource, clientBodyTimeout, clientHeaderTimeout, connectionDrainEnabled, connectionDrainTimeout, cookie, cps, description, enabled, endPort, enhancedSchedulerEnable, establishedTimeout, healthCheck, http2Enabled, keepaliveTimeout, listenerName, loadBalancerId, loadType, maxConnections, persistenceTimeout, persistenceType, port, protocol, proxyConnectTimeout, proxyProtocolType, proxyReadTimeout, proxySendTimeout, scheduler, securityPolicyId, sendTimeout, serverGroupId, startPort, tags);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateListenerRequest {\n");
    
    sb.append("    aclIds: ").append(toIndentedString(aclIds)).append("\n");
    sb.append("    aclStatus: ").append(toIndentedString(aclStatus)).append("\n");
    sb.append("    aclType: ").append(toIndentedString(aclType)).append("\n");
    sb.append("    bandwidth: ").append(toIndentedString(bandwidth)).append("\n");
    sb.append("    caCertificateId: ").append(toIndentedString(caCertificateId)).append("\n");
    sb.append("    caEnabled: ").append(toIndentedString(caEnabled)).append("\n");
    sb.append("    certCenterCertificateId: ").append(toIndentedString(certCenterCertificateId)).append("\n");
    sb.append("    certificateId: ").append(toIndentedString(certificateId)).append("\n");
    sb.append("    certificateSource: ").append(toIndentedString(certificateSource)).append("\n");
    sb.append("    clientBodyTimeout: ").append(toIndentedString(clientBodyTimeout)).append("\n");
    sb.append("    clientHeaderTimeout: ").append(toIndentedString(clientHeaderTimeout)).append("\n");
    sb.append("    connectionDrainEnabled: ").append(toIndentedString(connectionDrainEnabled)).append("\n");
    sb.append("    connectionDrainTimeout: ").append(toIndentedString(connectionDrainTimeout)).append("\n");
    sb.append("    cookie: ").append(toIndentedString(cookie)).append("\n");
    sb.append("    cps: ").append(toIndentedString(cps)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    endPort: ").append(toIndentedString(endPort)).append("\n");
    sb.append("    enhancedSchedulerEnable: ").append(toIndentedString(enhancedSchedulerEnable)).append("\n");
    sb.append("    establishedTimeout: ").append(toIndentedString(establishedTimeout)).append("\n");
    sb.append("    healthCheck: ").append(toIndentedString(healthCheck)).append("\n");
    sb.append("    http2Enabled: ").append(toIndentedString(http2Enabled)).append("\n");
    sb.append("    keepaliveTimeout: ").append(toIndentedString(keepaliveTimeout)).append("\n");
    sb.append("    listenerName: ").append(toIndentedString(listenerName)).append("\n");
    sb.append("    loadBalancerId: ").append(toIndentedString(loadBalancerId)).append("\n");
    sb.append("    loadType: ").append(toIndentedString(loadType)).append("\n");
    sb.append("    maxConnections: ").append(toIndentedString(maxConnections)).append("\n");
    sb.append("    persistenceTimeout: ").append(toIndentedString(persistenceTimeout)).append("\n");
    sb.append("    persistenceType: ").append(toIndentedString(persistenceType)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    proxyConnectTimeout: ").append(toIndentedString(proxyConnectTimeout)).append("\n");
    sb.append("    proxyProtocolType: ").append(toIndentedString(proxyProtocolType)).append("\n");
    sb.append("    proxyReadTimeout: ").append(toIndentedString(proxyReadTimeout)).append("\n");
    sb.append("    proxySendTimeout: ").append(toIndentedString(proxySendTimeout)).append("\n");
    sb.append("    scheduler: ").append(toIndentedString(scheduler)).append("\n");
    sb.append("    securityPolicyId: ").append(toIndentedString(securityPolicyId)).append("\n");
    sb.append("    sendTimeout: ").append(toIndentedString(sendTimeout)).append("\n");
    sb.append("    serverGroupId: ").append(toIndentedString(serverGroupId)).append("\n");
    sb.append("    startPort: ").append(toIndentedString(startPort)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
