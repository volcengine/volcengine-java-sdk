/*
 * volc_observe
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.volcobserve.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ListNotifyTemplatesRequest
 */



public class ListNotifyTemplatesRequest {
  /**
   * Gets or Sets channels
   */
  @JsonAdapter(ChannelsEnum.Adapter.class)
  public enum ChannelsEnum {
    @SerializedName("email")
    EMAIL("email"),
    @SerializedName("sms")
    SMS("sms"),
    @SerializedName("phone")
    PHONE("phone"),
    @SerializedName("lark")
    LARK("lark"),
    @SerializedName("dingtalk")
    DINGTALK("dingtalk"),
    @SerializedName("wecom")
    WECOM("wecom"),
    @SerializedName("slack")
    SLACK("slack"),
    @SerializedName("api")
    API("api");

    private String value;

    ChannelsEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ChannelsEnum fromValue(String input) {
      for (ChannelsEnum b : ChannelsEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ChannelsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChannelsEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ChannelsEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ChannelsEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("Channels")
  private List<ChannelsEnum> channels = null;

  @SerializedName("Ids")
  private List<String> ids = null;

  @SerializedName("Name")
  private String name = null;

  @SerializedName("PageNumber")
  private Integer pageNumber = null;

  @SerializedName("PageSize")
  private Integer pageSize = null;

  /**
   * Gets or Sets types
   */
  @JsonAdapter(TypesEnum.Adapter.class)
  public enum TypesEnum {
    @SerializedName("metric")
    METRIC("metric"),
    @SerializedName("event")
    EVENT("event");

    private String value;

    TypesEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypesEnum fromValue(String input) {
      for (TypesEnum b : TypesEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypesEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypesEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypesEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("Types")
  private List<TypesEnum> types = null;

  public ListNotifyTemplatesRequest channels(List<ChannelsEnum> channels) {
    this.channels = channels;
    return this;
  }

  public ListNotifyTemplatesRequest addChannelsItem(ChannelsEnum channelsItem) {
    if (this.channels == null) {
      this.channels = new ArrayList<ChannelsEnum>();
    }
    this.channels.add(channelsItem);
    return this;
  }

   /**
   * Get channels
   * @return channels
  **/
  @Schema(description = "")
  public List<ChannelsEnum> getChannels() {
    return channels;
  }

  public void setChannels(List<ChannelsEnum> channels) {
    this.channels = channels;
  }

  public ListNotifyTemplatesRequest ids(List<String> ids) {
    this.ids = ids;
    return this;
  }

  public ListNotifyTemplatesRequest addIdsItem(String idsItem) {
    if (this.ids == null) {
      this.ids = new ArrayList<String>();
    }
    this.ids.add(idsItem);
    return this;
  }

   /**
   * Get ids
   * @return ids
  **/
  @Schema(description = "")
  public List<String> getIds() {
    return ids;
  }

  public void setIds(List<String> ids) {
    this.ids = ids;
  }

  public ListNotifyTemplatesRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
 @Size(min=1,max=128)  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ListNotifyTemplatesRequest pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

   /**
   * Get pageNumber
   * @return pageNumber
  **/
  @Schema(description = "")
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }

  public ListNotifyTemplatesRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * @return pageSize
  **/
  @Schema(description = "")
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }

  public ListNotifyTemplatesRequest types(List<TypesEnum> types) {
    this.types = types;
    return this;
  }

  public ListNotifyTemplatesRequest addTypesItem(TypesEnum typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<TypesEnum>();
    }
    this.types.add(typesItem);
    return this;
  }

   /**
   * Get types
   * @return types
  **/
  @Schema(description = "")
  public List<TypesEnum> getTypes() {
    return types;
  }

  public void setTypes(List<TypesEnum> types) {
    this.types = types;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListNotifyTemplatesRequest listNotifyTemplatesRequest = (ListNotifyTemplatesRequest) o;
    return Objects.equals(this.channels, listNotifyTemplatesRequest.channels) &&
        Objects.equals(this.ids, listNotifyTemplatesRequest.ids) &&
        Objects.equals(this.name, listNotifyTemplatesRequest.name) &&
        Objects.equals(this.pageNumber, listNotifyTemplatesRequest.pageNumber) &&
        Objects.equals(this.pageSize, listNotifyTemplatesRequest.pageSize) &&
        Objects.equals(this.types, listNotifyTemplatesRequest.types);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channels, ids, name, pageNumber, pageSize, types);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListNotifyTemplatesRequest {\n");
    
    sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
