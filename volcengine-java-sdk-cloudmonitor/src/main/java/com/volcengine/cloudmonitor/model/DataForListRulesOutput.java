/*
 * cloudmonitor
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.cloudmonitor.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.cloudmonitor.model.ConditionForListRulesOutput;
import com.volcengine.cloudmonitor.model.ConvertTagForListRulesOutput;
import com.volcengine.cloudmonitor.model.DimensionConditionsForListRulesOutput;
import com.volcengine.cloudmonitor.model.LevelConditionForListRulesOutput;
import com.volcengine.cloudmonitor.model.NotifyTemplateForListRulesOutput;
import com.volcengine.cloudmonitor.model.RecoveryNotifyForListRulesOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DataForListRulesOutput
 */



public class DataForListRulesOutput {
  @SerializedName("AlertMethods")
  private List<String> alertMethods = null;

  @SerializedName("AlertState")
  private String alertState = null;

  @SerializedName("ConditionOperator")
  private String conditionOperator = null;

  @SerializedName("Conditions")
  private List<ConditionForListRulesOutput> conditions = null;

  @SerializedName("ContactGroupIds")
  private List<String> contactGroupIds = null;

  @SerializedName("CreatedAt")
  private String createdAt = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("DimensionConditions")
  private DimensionConditionsForListRulesOutput dimensionConditions = null;

  @SerializedName("EffectEndAt")
  private String effectEndAt = null;

  @SerializedName("EffectStartAt")
  private String effectStartAt = null;

  @SerializedName("EnableState")
  private String enableState = null;

  @SerializedName("EvaluationCount")
  private Integer evaluationCount = null;

  @SerializedName("Id")
  private String id = null;

  @SerializedName("Level")
  private String level = null;

  @SerializedName("LevelConditions")
  private List<LevelConditionForListRulesOutput> levelConditions = null;

  @SerializedName("MultipleConditions")
  private Boolean multipleConditions = null;

  @SerializedName("Namespace")
  private String namespace = null;

  @SerializedName("NotificationId")
  private String notificationId = null;

  @SerializedName("NotifyTemplates")
  private List<NotifyTemplateForListRulesOutput> notifyTemplates = null;

  @SerializedName("OriginalDimensions")
  private Map<String, List<String>> originalDimensions = null;

  @SerializedName("ProjectName")
  private String projectName = null;

  @SerializedName("RecoveryNotify")
  private RecoveryNotifyForListRulesOutput recoveryNotify = null;

  @SerializedName("Regions")
  private List<String> regions = null;

  @SerializedName("ResourceType")
  private String resourceType = null;

  @SerializedName("RuleName")
  private String ruleName = null;

  @SerializedName("RuleType")
  private String ruleType = null;

  @SerializedName("SilenceTime")
  private Integer silenceTime = null;

  @SerializedName("SubNamespace")
  private String subNamespace = null;

  @SerializedName("Tags")
  private List<ConvertTagForListRulesOutput> tags = null;

  @SerializedName("UpdatedAt")
  private String updatedAt = null;

  @SerializedName("WebHook")
  private String webHook = null;

  @SerializedName("WebhookIds")
  private List<String> webhookIds = null;

  public DataForListRulesOutput alertMethods(List<String> alertMethods) {
    this.alertMethods = alertMethods;
    return this;
  }

  public DataForListRulesOutput addAlertMethodsItem(String alertMethodsItem) {
    if (this.alertMethods == null) {
      this.alertMethods = new ArrayList<String>();
    }
    this.alertMethods.add(alertMethodsItem);
    return this;
  }

   /**
   * Get alertMethods
   * @return alertMethods
  **/
  @Schema(description = "")
  public List<String> getAlertMethods() {
    return alertMethods;
  }

  public void setAlertMethods(List<String> alertMethods) {
    this.alertMethods = alertMethods;
  }

  public DataForListRulesOutput alertState(String alertState) {
    this.alertState = alertState;
    return this;
  }

   /**
   * Get alertState
   * @return alertState
  **/
  @Schema(description = "")
  public String getAlertState() {
    return alertState;
  }

  public void setAlertState(String alertState) {
    this.alertState = alertState;
  }

  public DataForListRulesOutput conditionOperator(String conditionOperator) {
    this.conditionOperator = conditionOperator;
    return this;
  }

   /**
   * Get conditionOperator
   * @return conditionOperator
  **/
  @Schema(description = "")
  public String getConditionOperator() {
    return conditionOperator;
  }

  public void setConditionOperator(String conditionOperator) {
    this.conditionOperator = conditionOperator;
  }

  public DataForListRulesOutput conditions(List<ConditionForListRulesOutput> conditions) {
    this.conditions = conditions;
    return this;
  }

  public DataForListRulesOutput addConditionsItem(ConditionForListRulesOutput conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<ConditionForListRulesOutput>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * Get conditions
   * @return conditions
  **/
  @Valid
  @Schema(description = "")
  public List<ConditionForListRulesOutput> getConditions() {
    return conditions;
  }

  public void setConditions(List<ConditionForListRulesOutput> conditions) {
    this.conditions = conditions;
  }

  public DataForListRulesOutput contactGroupIds(List<String> contactGroupIds) {
    this.contactGroupIds = contactGroupIds;
    return this;
  }

  public DataForListRulesOutput addContactGroupIdsItem(String contactGroupIdsItem) {
    if (this.contactGroupIds == null) {
      this.contactGroupIds = new ArrayList<String>();
    }
    this.contactGroupIds.add(contactGroupIdsItem);
    return this;
  }

   /**
   * Get contactGroupIds
   * @return contactGroupIds
  **/
  @Schema(description = "")
  public List<String> getContactGroupIds() {
    return contactGroupIds;
  }

  public void setContactGroupIds(List<String> contactGroupIds) {
    this.contactGroupIds = contactGroupIds;
  }

  public DataForListRulesOutput createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @Schema(description = "")
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }

  public DataForListRulesOutput description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public DataForListRulesOutput dimensionConditions(DimensionConditionsForListRulesOutput dimensionConditions) {
    this.dimensionConditions = dimensionConditions;
    return this;
  }

   /**
   * Get dimensionConditions
   * @return dimensionConditions
  **/
  @Valid
  @Schema(description = "")
  public DimensionConditionsForListRulesOutput getDimensionConditions() {
    return dimensionConditions;
  }

  public void setDimensionConditions(DimensionConditionsForListRulesOutput dimensionConditions) {
    this.dimensionConditions = dimensionConditions;
  }

  public DataForListRulesOutput effectEndAt(String effectEndAt) {
    this.effectEndAt = effectEndAt;
    return this;
  }

   /**
   * Get effectEndAt
   * @return effectEndAt
  **/
  @Schema(description = "")
  public String getEffectEndAt() {
    return effectEndAt;
  }

  public void setEffectEndAt(String effectEndAt) {
    this.effectEndAt = effectEndAt;
  }

  public DataForListRulesOutput effectStartAt(String effectStartAt) {
    this.effectStartAt = effectStartAt;
    return this;
  }

   /**
   * Get effectStartAt
   * @return effectStartAt
  **/
  @Schema(description = "")
  public String getEffectStartAt() {
    return effectStartAt;
  }

  public void setEffectStartAt(String effectStartAt) {
    this.effectStartAt = effectStartAt;
  }

  public DataForListRulesOutput enableState(String enableState) {
    this.enableState = enableState;
    return this;
  }

   /**
   * Get enableState
   * @return enableState
  **/
  @Schema(description = "")
  public String getEnableState() {
    return enableState;
  }

  public void setEnableState(String enableState) {
    this.enableState = enableState;
  }

  public DataForListRulesOutput evaluationCount(Integer evaluationCount) {
    this.evaluationCount = evaluationCount;
    return this;
  }

   /**
   * Get evaluationCount
   * @return evaluationCount
  **/
  @Schema(description = "")
  public Integer getEvaluationCount() {
    return evaluationCount;
  }

  public void setEvaluationCount(Integer evaluationCount) {
    this.evaluationCount = evaluationCount;
  }

  public DataForListRulesOutput id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public DataForListRulesOutput level(String level) {
    this.level = level;
    return this;
  }

   /**
   * Get level
   * @return level
  **/
  @Schema(description = "")
  public String getLevel() {
    return level;
  }

  public void setLevel(String level) {
    this.level = level;
  }

  public DataForListRulesOutput levelConditions(List<LevelConditionForListRulesOutput> levelConditions) {
    this.levelConditions = levelConditions;
    return this;
  }

  public DataForListRulesOutput addLevelConditionsItem(LevelConditionForListRulesOutput levelConditionsItem) {
    if (this.levelConditions == null) {
      this.levelConditions = new ArrayList<LevelConditionForListRulesOutput>();
    }
    this.levelConditions.add(levelConditionsItem);
    return this;
  }

   /**
   * Get levelConditions
   * @return levelConditions
  **/
  @Valid
  @Schema(description = "")
  public List<LevelConditionForListRulesOutput> getLevelConditions() {
    return levelConditions;
  }

  public void setLevelConditions(List<LevelConditionForListRulesOutput> levelConditions) {
    this.levelConditions = levelConditions;
  }

  public DataForListRulesOutput multipleConditions(Boolean multipleConditions) {
    this.multipleConditions = multipleConditions;
    return this;
  }

   /**
   * Get multipleConditions
   * @return multipleConditions
  **/
  @Schema(description = "")
  public Boolean isMultipleConditions() {
    return multipleConditions;
  }

  public void setMultipleConditions(Boolean multipleConditions) {
    this.multipleConditions = multipleConditions;
  }

  public DataForListRulesOutput namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

   /**
   * Get namespace
   * @return namespace
  **/
  @Schema(description = "")
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }

  public DataForListRulesOutput notificationId(String notificationId) {
    this.notificationId = notificationId;
    return this;
  }

   /**
   * Get notificationId
   * @return notificationId
  **/
  @Schema(description = "")
  public String getNotificationId() {
    return notificationId;
  }

  public void setNotificationId(String notificationId) {
    this.notificationId = notificationId;
  }

  public DataForListRulesOutput notifyTemplates(List<NotifyTemplateForListRulesOutput> notifyTemplates) {
    this.notifyTemplates = notifyTemplates;
    return this;
  }

  public DataForListRulesOutput addNotifyTemplatesItem(NotifyTemplateForListRulesOutput notifyTemplatesItem) {
    if (this.notifyTemplates == null) {
      this.notifyTemplates = new ArrayList<NotifyTemplateForListRulesOutput>();
    }
    this.notifyTemplates.add(notifyTemplatesItem);
    return this;
  }

   /**
   * Get notifyTemplates
   * @return notifyTemplates
  **/
  @Valid
  @Schema(description = "")
  public List<NotifyTemplateForListRulesOutput> getNotifyTemplates() {
    return notifyTemplates;
  }

  public void setNotifyTemplates(List<NotifyTemplateForListRulesOutput> notifyTemplates) {
    this.notifyTemplates = notifyTemplates;
  }

  public DataForListRulesOutput originalDimensions(Map<String, List<String>> originalDimensions) {
    this.originalDimensions = originalDimensions;
    return this;
  }

  public DataForListRulesOutput putOriginalDimensionsItem(String key, List<String> originalDimensionsItem) {
    if (this.originalDimensions == null) {
      this.originalDimensions = new HashMap<String, List<String>>();
    }
    this.originalDimensions.put(key, originalDimensionsItem);
    return this;
  }

   /**
   * Get originalDimensions
   * @return originalDimensions
  **/
  @Valid
  @Schema(description = "")
  public Map<String, List<String>> getOriginalDimensions() {
    return originalDimensions;
  }

  public void setOriginalDimensions(Map<String, List<String>> originalDimensions) {
    this.originalDimensions = originalDimensions;
  }

  public DataForListRulesOutput projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
  @Schema(description = "")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public DataForListRulesOutput recoveryNotify(RecoveryNotifyForListRulesOutput recoveryNotify) {
    this.recoveryNotify = recoveryNotify;
    return this;
  }

   /**
   * Get recoveryNotify
   * @return recoveryNotify
  **/
  @Valid
  @Schema(description = "")
  public RecoveryNotifyForListRulesOutput getRecoveryNotify() {
    return recoveryNotify;
  }

  public void setRecoveryNotify(RecoveryNotifyForListRulesOutput recoveryNotify) {
    this.recoveryNotify = recoveryNotify;
  }

  public DataForListRulesOutput regions(List<String> regions) {
    this.regions = regions;
    return this;
  }

  public DataForListRulesOutput addRegionsItem(String regionsItem) {
    if (this.regions == null) {
      this.regions = new ArrayList<String>();
    }
    this.regions.add(regionsItem);
    return this;
  }

   /**
   * Get regions
   * @return regions
  **/
  @Schema(description = "")
  public List<String> getRegions() {
    return regions;
  }

  public void setRegions(List<String> regions) {
    this.regions = regions;
  }

  public DataForListRulesOutput resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

   /**
   * Get resourceType
   * @return resourceType
  **/
  @Schema(description = "")
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }

  public DataForListRulesOutput ruleName(String ruleName) {
    this.ruleName = ruleName;
    return this;
  }

   /**
   * Get ruleName
   * @return ruleName
  **/
  @Schema(description = "")
  public String getRuleName() {
    return ruleName;
  }

  public void setRuleName(String ruleName) {
    this.ruleName = ruleName;
  }

  public DataForListRulesOutput ruleType(String ruleType) {
    this.ruleType = ruleType;
    return this;
  }

   /**
   * Get ruleType
   * @return ruleType
  **/
  @Schema(description = "")
  public String getRuleType() {
    return ruleType;
  }

  public void setRuleType(String ruleType) {
    this.ruleType = ruleType;
  }

  public DataForListRulesOutput silenceTime(Integer silenceTime) {
    this.silenceTime = silenceTime;
    return this;
  }

   /**
   * Get silenceTime
   * @return silenceTime
  **/
  @Schema(description = "")
  public Integer getSilenceTime() {
    return silenceTime;
  }

  public void setSilenceTime(Integer silenceTime) {
    this.silenceTime = silenceTime;
  }

  public DataForListRulesOutput subNamespace(String subNamespace) {
    this.subNamespace = subNamespace;
    return this;
  }

   /**
   * Get subNamespace
   * @return subNamespace
  **/
  @Schema(description = "")
  public String getSubNamespace() {
    return subNamespace;
  }

  public void setSubNamespace(String subNamespace) {
    this.subNamespace = subNamespace;
  }

  public DataForListRulesOutput tags(List<ConvertTagForListRulesOutput> tags) {
    this.tags = tags;
    return this;
  }

  public DataForListRulesOutput addTagsItem(ConvertTagForListRulesOutput tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<ConvertTagForListRulesOutput>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Valid
  @Schema(description = "")
  public List<ConvertTagForListRulesOutput> getTags() {
    return tags;
  }

  public void setTags(List<ConvertTagForListRulesOutput> tags) {
    this.tags = tags;
  }

  public DataForListRulesOutput updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @Schema(description = "")
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }

  public DataForListRulesOutput webHook(String webHook) {
    this.webHook = webHook;
    return this;
  }

   /**
   * Get webHook
   * @return webHook
  **/
  @Schema(description = "")
  public String getWebHook() {
    return webHook;
  }

  public void setWebHook(String webHook) {
    this.webHook = webHook;
  }

  public DataForListRulesOutput webhookIds(List<String> webhookIds) {
    this.webhookIds = webhookIds;
    return this;
  }

  public DataForListRulesOutput addWebhookIdsItem(String webhookIdsItem) {
    if (this.webhookIds == null) {
      this.webhookIds = new ArrayList<String>();
    }
    this.webhookIds.add(webhookIdsItem);
    return this;
  }

   /**
   * Get webhookIds
   * @return webhookIds
  **/
  @Schema(description = "")
  public List<String> getWebhookIds() {
    return webhookIds;
  }

  public void setWebhookIds(List<String> webhookIds) {
    this.webhookIds = webhookIds;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataForListRulesOutput dataForListRulesOutput = (DataForListRulesOutput) o;
    return Objects.equals(this.alertMethods, dataForListRulesOutput.alertMethods) &&
        Objects.equals(this.alertState, dataForListRulesOutput.alertState) &&
        Objects.equals(this.conditionOperator, dataForListRulesOutput.conditionOperator) &&
        Objects.equals(this.conditions, dataForListRulesOutput.conditions) &&
        Objects.equals(this.contactGroupIds, dataForListRulesOutput.contactGroupIds) &&
        Objects.equals(this.createdAt, dataForListRulesOutput.createdAt) &&
        Objects.equals(this.description, dataForListRulesOutput.description) &&
        Objects.equals(this.dimensionConditions, dataForListRulesOutput.dimensionConditions) &&
        Objects.equals(this.effectEndAt, dataForListRulesOutput.effectEndAt) &&
        Objects.equals(this.effectStartAt, dataForListRulesOutput.effectStartAt) &&
        Objects.equals(this.enableState, dataForListRulesOutput.enableState) &&
        Objects.equals(this.evaluationCount, dataForListRulesOutput.evaluationCount) &&
        Objects.equals(this.id, dataForListRulesOutput.id) &&
        Objects.equals(this.level, dataForListRulesOutput.level) &&
        Objects.equals(this.levelConditions, dataForListRulesOutput.levelConditions) &&
        Objects.equals(this.multipleConditions, dataForListRulesOutput.multipleConditions) &&
        Objects.equals(this.namespace, dataForListRulesOutput.namespace) &&
        Objects.equals(this.notificationId, dataForListRulesOutput.notificationId) &&
        Objects.equals(this.notifyTemplates, dataForListRulesOutput.notifyTemplates) &&
        Objects.equals(this.originalDimensions, dataForListRulesOutput.originalDimensions) &&
        Objects.equals(this.projectName, dataForListRulesOutput.projectName) &&
        Objects.equals(this.recoveryNotify, dataForListRulesOutput.recoveryNotify) &&
        Objects.equals(this.regions, dataForListRulesOutput.regions) &&
        Objects.equals(this.resourceType, dataForListRulesOutput.resourceType) &&
        Objects.equals(this.ruleName, dataForListRulesOutput.ruleName) &&
        Objects.equals(this.ruleType, dataForListRulesOutput.ruleType) &&
        Objects.equals(this.silenceTime, dataForListRulesOutput.silenceTime) &&
        Objects.equals(this.subNamespace, dataForListRulesOutput.subNamespace) &&
        Objects.equals(this.tags, dataForListRulesOutput.tags) &&
        Objects.equals(this.updatedAt, dataForListRulesOutput.updatedAt) &&
        Objects.equals(this.webHook, dataForListRulesOutput.webHook) &&
        Objects.equals(this.webhookIds, dataForListRulesOutput.webhookIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertMethods, alertState, conditionOperator, conditions, contactGroupIds, createdAt, description, dimensionConditions, effectEndAt, effectStartAt, enableState, evaluationCount, id, level, levelConditions, multipleConditions, namespace, notificationId, notifyTemplates, originalDimensions, projectName, recoveryNotify, regions, resourceType, ruleName, ruleType, silenceTime, subNamespace, tags, updatedAt, webHook, webhookIds);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataForListRulesOutput {\n");
    
    sb.append("    alertMethods: ").append(toIndentedString(alertMethods)).append("\n");
    sb.append("    alertState: ").append(toIndentedString(alertState)).append("\n");
    sb.append("    conditionOperator: ").append(toIndentedString(conditionOperator)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    contactGroupIds: ").append(toIndentedString(contactGroupIds)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dimensionConditions: ").append(toIndentedString(dimensionConditions)).append("\n");
    sb.append("    effectEndAt: ").append(toIndentedString(effectEndAt)).append("\n");
    sb.append("    effectStartAt: ").append(toIndentedString(effectStartAt)).append("\n");
    sb.append("    enableState: ").append(toIndentedString(enableState)).append("\n");
    sb.append("    evaluationCount: ").append(toIndentedString(evaluationCount)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    levelConditions: ").append(toIndentedString(levelConditions)).append("\n");
    sb.append("    multipleConditions: ").append(toIndentedString(multipleConditions)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    notificationId: ").append(toIndentedString(notificationId)).append("\n");
    sb.append("    notifyTemplates: ").append(toIndentedString(notifyTemplates)).append("\n");
    sb.append("    originalDimensions: ").append(toIndentedString(originalDimensions)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    recoveryNotify: ").append(toIndentedString(recoveryNotify)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    ruleName: ").append(toIndentedString(ruleName)).append("\n");
    sb.append("    ruleType: ").append(toIndentedString(ruleType)).append("\n");
    sb.append("    silenceTime: ").append(toIndentedString(silenceTime)).append("\n");
    sb.append("    subNamespace: ").append(toIndentedString(subNamespace)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    webHook: ").append(toIndentedString(webHook)).append("\n");
    sb.append("    webhookIds: ").append(toIndentedString(webhookIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
