/*
 * seccenter20240508
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.seccenter20240508.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.seccenter20240508.model.EnvironListForGetRaspProcessDetailOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * GetRaspProcessDetailResponse
 */



public class GetRaspProcessDetailResponse extends com.volcengine.model.AbstractResponse {
  @SerializedName("AgentID")
  private String agentID = null;

  @SerializedName("Cmdline")
  private String cmdline = null;

  @SerializedName("EnvironList")
  private List<EnvironListForGetRaspProcessDetailOutput> environList = null;

  @SerializedName("ExeName")
  private String exeName = null;

  @SerializedName("ExePath")
  private String exePath = null;

  @SerializedName("InspectPort")
  private Long inspectPort = null;

  @SerializedName("Pid")
  private String pid = null;

  @SerializedName("ProcessState")
  private String processState = null;

  @SerializedName("ProtectTime")
  private Long protectTime = null;

  @SerializedName("Reason")
  private String reason = null;

  @SerializedName("RelateRaspConfigName")
  private String relateRaspConfigName = null;

  @SerializedName("RelatedConfigID")
  private String relatedConfigID = null;

  @SerializedName("Runtime")
  private String runtime = null;

  @SerializedName("RuntimeVersion")
  private String runtimeVersion = null;

  @SerializedName("StartTimeUnix")
  private Long startTimeUnix = null;

  @SerializedName("Status")
  private String status = null;

  @SerializedName("UpdateTime")
  private Long updateTime = null;

  public GetRaspProcessDetailResponse agentID(String agentID) {
    this.agentID = agentID;
    return this;
  }

   /**
   * Get agentID
   * @return agentID
  **/
  @Schema(description = "")
  public String getAgentID() {
    return agentID;
  }

  public void setAgentID(String agentID) {
    this.agentID = agentID;
  }

  public GetRaspProcessDetailResponse cmdline(String cmdline) {
    this.cmdline = cmdline;
    return this;
  }

   /**
   * Get cmdline
   * @return cmdline
  **/
  @Schema(description = "")
  public String getCmdline() {
    return cmdline;
  }

  public void setCmdline(String cmdline) {
    this.cmdline = cmdline;
  }

  public GetRaspProcessDetailResponse environList(List<EnvironListForGetRaspProcessDetailOutput> environList) {
    this.environList = environList;
    return this;
  }

  public GetRaspProcessDetailResponse addEnvironListItem(EnvironListForGetRaspProcessDetailOutput environListItem) {
    if (this.environList == null) {
      this.environList = new ArrayList<EnvironListForGetRaspProcessDetailOutput>();
    }
    this.environList.add(environListItem);
    return this;
  }

   /**
   * Get environList
   * @return environList
  **/
  @Valid
  @Schema(description = "")
  public List<EnvironListForGetRaspProcessDetailOutput> getEnvironList() {
    return environList;
  }

  public void setEnvironList(List<EnvironListForGetRaspProcessDetailOutput> environList) {
    this.environList = environList;
  }

  public GetRaspProcessDetailResponse exeName(String exeName) {
    this.exeName = exeName;
    return this;
  }

   /**
   * Get exeName
   * @return exeName
  **/
  @Schema(description = "")
  public String getExeName() {
    return exeName;
  }

  public void setExeName(String exeName) {
    this.exeName = exeName;
  }

  public GetRaspProcessDetailResponse exePath(String exePath) {
    this.exePath = exePath;
    return this;
  }

   /**
   * Get exePath
   * @return exePath
  **/
  @Schema(description = "")
  public String getExePath() {
    return exePath;
  }

  public void setExePath(String exePath) {
    this.exePath = exePath;
  }

  public GetRaspProcessDetailResponse inspectPort(Long inspectPort) {
    this.inspectPort = inspectPort;
    return this;
  }

   /**
   * Get inspectPort
   * @return inspectPort
  **/
  @Schema(description = "")
  public Long getInspectPort() {
    return inspectPort;
  }

  public void setInspectPort(Long inspectPort) {
    this.inspectPort = inspectPort;
  }

  public GetRaspProcessDetailResponse pid(String pid) {
    this.pid = pid;
    return this;
  }

   /**
   * Get pid
   * @return pid
  **/
  @Schema(description = "")
  public String getPid() {
    return pid;
  }

  public void setPid(String pid) {
    this.pid = pid;
  }

  public GetRaspProcessDetailResponse processState(String processState) {
    this.processState = processState;
    return this;
  }

   /**
   * Get processState
   * @return processState
  **/
  @Schema(description = "")
  public String getProcessState() {
    return processState;
  }

  public void setProcessState(String processState) {
    this.processState = processState;
  }

  public GetRaspProcessDetailResponse protectTime(Long protectTime) {
    this.protectTime = protectTime;
    return this;
  }

   /**
   * Get protectTime
   * @return protectTime
  **/
  @Schema(description = "")
  public Long getProtectTime() {
    return protectTime;
  }

  public void setProtectTime(Long protectTime) {
    this.protectTime = protectTime;
  }

  public GetRaspProcessDetailResponse reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * Get reason
   * @return reason
  **/
  @Schema(description = "")
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public GetRaspProcessDetailResponse relateRaspConfigName(String relateRaspConfigName) {
    this.relateRaspConfigName = relateRaspConfigName;
    return this;
  }

   /**
   * Get relateRaspConfigName
   * @return relateRaspConfigName
  **/
  @Schema(description = "")
  public String getRelateRaspConfigName() {
    return relateRaspConfigName;
  }

  public void setRelateRaspConfigName(String relateRaspConfigName) {
    this.relateRaspConfigName = relateRaspConfigName;
  }

  public GetRaspProcessDetailResponse relatedConfigID(String relatedConfigID) {
    this.relatedConfigID = relatedConfigID;
    return this;
  }

   /**
   * Get relatedConfigID
   * @return relatedConfigID
  **/
  @Schema(description = "")
  public String getRelatedConfigID() {
    return relatedConfigID;
  }

  public void setRelatedConfigID(String relatedConfigID) {
    this.relatedConfigID = relatedConfigID;
  }

  public GetRaspProcessDetailResponse runtime(String runtime) {
    this.runtime = runtime;
    return this;
  }

   /**
   * Get runtime
   * @return runtime
  **/
  @Schema(description = "")
  public String getRuntime() {
    return runtime;
  }

  public void setRuntime(String runtime) {
    this.runtime = runtime;
  }

  public GetRaspProcessDetailResponse runtimeVersion(String runtimeVersion) {
    this.runtimeVersion = runtimeVersion;
    return this;
  }

   /**
   * Get runtimeVersion
   * @return runtimeVersion
  **/
  @Schema(description = "")
  public String getRuntimeVersion() {
    return runtimeVersion;
  }

  public void setRuntimeVersion(String runtimeVersion) {
    this.runtimeVersion = runtimeVersion;
  }

  public GetRaspProcessDetailResponse startTimeUnix(Long startTimeUnix) {
    this.startTimeUnix = startTimeUnix;
    return this;
  }

   /**
   * Get startTimeUnix
   * @return startTimeUnix
  **/
  @Schema(description = "")
  public Long getStartTimeUnix() {
    return startTimeUnix;
  }

  public void setStartTimeUnix(Long startTimeUnix) {
    this.startTimeUnix = startTimeUnix;
  }

  public GetRaspProcessDetailResponse status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public GetRaspProcessDetailResponse updateTime(Long updateTime) {
    this.updateTime = updateTime;
    return this;
  }

   /**
   * Get updateTime
   * @return updateTime
  **/
  @Schema(description = "")
  public Long getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(Long updateTime) {
    this.updateTime = updateTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetRaspProcessDetailResponse getRaspProcessDetailResponse = (GetRaspProcessDetailResponse) o;
    return Objects.equals(this.agentID, getRaspProcessDetailResponse.agentID) &&
        Objects.equals(this.cmdline, getRaspProcessDetailResponse.cmdline) &&
        Objects.equals(this.environList, getRaspProcessDetailResponse.environList) &&
        Objects.equals(this.exeName, getRaspProcessDetailResponse.exeName) &&
        Objects.equals(this.exePath, getRaspProcessDetailResponse.exePath) &&
        Objects.equals(this.inspectPort, getRaspProcessDetailResponse.inspectPort) &&
        Objects.equals(this.pid, getRaspProcessDetailResponse.pid) &&
        Objects.equals(this.processState, getRaspProcessDetailResponse.processState) &&
        Objects.equals(this.protectTime, getRaspProcessDetailResponse.protectTime) &&
        Objects.equals(this.reason, getRaspProcessDetailResponse.reason) &&
        Objects.equals(this.relateRaspConfigName, getRaspProcessDetailResponse.relateRaspConfigName) &&
        Objects.equals(this.relatedConfigID, getRaspProcessDetailResponse.relatedConfigID) &&
        Objects.equals(this.runtime, getRaspProcessDetailResponse.runtime) &&
        Objects.equals(this.runtimeVersion, getRaspProcessDetailResponse.runtimeVersion) &&
        Objects.equals(this.startTimeUnix, getRaspProcessDetailResponse.startTimeUnix) &&
        Objects.equals(this.status, getRaspProcessDetailResponse.status) &&
        Objects.equals(this.updateTime, getRaspProcessDetailResponse.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentID, cmdline, environList, exeName, exePath, inspectPort, pid, processState, protectTime, reason, relateRaspConfigName, relatedConfigID, runtime, runtimeVersion, startTimeUnix, status, updateTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetRaspProcessDetailResponse {\n");
    
    sb.append("    agentID: ").append(toIndentedString(agentID)).append("\n");
    sb.append("    cmdline: ").append(toIndentedString(cmdline)).append("\n");
    sb.append("    environList: ").append(toIndentedString(environList)).append("\n");
    sb.append("    exeName: ").append(toIndentedString(exeName)).append("\n");
    sb.append("    exePath: ").append(toIndentedString(exePath)).append("\n");
    sb.append("    inspectPort: ").append(toIndentedString(inspectPort)).append("\n");
    sb.append("    pid: ").append(toIndentedString(pid)).append("\n");
    sb.append("    processState: ").append(toIndentedString(processState)).append("\n");
    sb.append("    protectTime: ").append(toIndentedString(protectTime)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    relateRaspConfigName: ").append(toIndentedString(relateRaspConfigName)).append("\n");
    sb.append("    relatedConfigID: ").append(toIndentedString(relatedConfigID)).append("\n");
    sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
    sb.append("    runtimeVersion: ").append(toIndentedString(runtimeVersion)).append("\n");
    sb.append("    startTimeUnix: ").append(toIndentedString(startTimeUnix)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
