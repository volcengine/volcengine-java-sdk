/*
 * ecs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.ecs.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.ecs.model.ItemForDescribeAutoInstallPackagesOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * PackageForDescribeAutoInstallPackagesOutput
 */



public class PackageForDescribeAutoInstallPackagesOutput {
  @SerializedName("Items")
  private List<ItemForDescribeAutoInstallPackagesOutput> items = null;

  @SerializedName("PackgeId")
  private String packgeId = null;

  @SerializedName("ScriptId")
  private String scriptId = null;

  public PackageForDescribeAutoInstallPackagesOutput items(List<ItemForDescribeAutoInstallPackagesOutput> items) {
    this.items = items;
    return this;
  }

  public PackageForDescribeAutoInstallPackagesOutput addItemsItem(ItemForDescribeAutoInstallPackagesOutput itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<ItemForDescribeAutoInstallPackagesOutput>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @Valid
  @Schema(description = "")
  public List<ItemForDescribeAutoInstallPackagesOutput> getItems() {
    return items;
  }

  public void setItems(List<ItemForDescribeAutoInstallPackagesOutput> items) {
    this.items = items;
  }

  public PackageForDescribeAutoInstallPackagesOutput packgeId(String packgeId) {
    this.packgeId = packgeId;
    return this;
  }

   /**
   * Get packgeId
   * @return packgeId
  **/
  @Schema(description = "")
  public String getPackgeId() {
    return packgeId;
  }

  public void setPackgeId(String packgeId) {
    this.packgeId = packgeId;
  }

  public PackageForDescribeAutoInstallPackagesOutput scriptId(String scriptId) {
    this.scriptId = scriptId;
    return this;
  }

   /**
   * Get scriptId
   * @return scriptId
  **/
  @Schema(description = "")
  public String getScriptId() {
    return scriptId;
  }

  public void setScriptId(String scriptId) {
    this.scriptId = scriptId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PackageForDescribeAutoInstallPackagesOutput packageForDescribeAutoInstallPackagesOutput = (PackageForDescribeAutoInstallPackagesOutput) o;
    return Objects.equals(this.items, packageForDescribeAutoInstallPackagesOutput.items) &&
        Objects.equals(this.packgeId, packageForDescribeAutoInstallPackagesOutput.packgeId) &&
        Objects.equals(this.scriptId, packageForDescribeAutoInstallPackagesOutput.scriptId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(items, packgeId, scriptId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PackageForDescribeAutoInstallPackagesOutput {\n");
    
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    packgeId: ").append(toIndentedString(packgeId)).append("\n");
    sb.append("    scriptId: ").append(toIndentedString(scriptId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
