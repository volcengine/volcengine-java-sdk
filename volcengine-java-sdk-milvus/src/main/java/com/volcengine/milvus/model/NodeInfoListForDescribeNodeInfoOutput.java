/*
 * milvus
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.milvus.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * NodeInfoListForDescribeNodeInfoOutput
 */



public class NodeInfoListForDescribeNodeInfoOutput {
  @SerializedName("CreateTime")
  private String createTime = null;

  @SerializedName("DisplayName")
  private String displayName = null;

  @SerializedName("NodeName")
  private String nodeName = null;

  @SerializedName("NodeType")
  private String nodeType = null;

  @SerializedName("Status")
  private String status = null;

  @SerializedName("TotalCpu")
  private String totalCpu = null;

  @SerializedName("TotalMemInBytes")
  private String totalMemInBytes = null;

  @SerializedName("UpdateTime")
  private String updateTime = null;

  @SerializedName("UsedCpu")
  private String usedCpu = null;

  @SerializedName("UsedMemInBytes")
  private String usedMemInBytes = null;

  public NodeInfoListForDescribeNodeInfoOutput createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

   /**
   * Get createTime
   * @return createTime
  **/
  @Schema(description = "")
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }

  public NodeInfoListForDescribeNodeInfoOutput displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @Schema(description = "")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public NodeInfoListForDescribeNodeInfoOutput nodeName(String nodeName) {
    this.nodeName = nodeName;
    return this;
  }

   /**
   * Get nodeName
   * @return nodeName
  **/
  @Schema(description = "")
  public String getNodeName() {
    return nodeName;
  }

  public void setNodeName(String nodeName) {
    this.nodeName = nodeName;
  }

  public NodeInfoListForDescribeNodeInfoOutput nodeType(String nodeType) {
    this.nodeType = nodeType;
    return this;
  }

   /**
   * Get nodeType
   * @return nodeType
  **/
  @Schema(description = "")
  public String getNodeType() {
    return nodeType;
  }

  public void setNodeType(String nodeType) {
    this.nodeType = nodeType;
  }

  public NodeInfoListForDescribeNodeInfoOutput status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public NodeInfoListForDescribeNodeInfoOutput totalCpu(String totalCpu) {
    this.totalCpu = totalCpu;
    return this;
  }

   /**
   * Get totalCpu
   * @return totalCpu
  **/
  @Schema(description = "")
  public String getTotalCpu() {
    return totalCpu;
  }

  public void setTotalCpu(String totalCpu) {
    this.totalCpu = totalCpu;
  }

  public NodeInfoListForDescribeNodeInfoOutput totalMemInBytes(String totalMemInBytes) {
    this.totalMemInBytes = totalMemInBytes;
    return this;
  }

   /**
   * Get totalMemInBytes
   * @return totalMemInBytes
  **/
  @Schema(description = "")
  public String getTotalMemInBytes() {
    return totalMemInBytes;
  }

  public void setTotalMemInBytes(String totalMemInBytes) {
    this.totalMemInBytes = totalMemInBytes;
  }

  public NodeInfoListForDescribeNodeInfoOutput updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

   /**
   * Get updateTime
   * @return updateTime
  **/
  @Schema(description = "")
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }

  public NodeInfoListForDescribeNodeInfoOutput usedCpu(String usedCpu) {
    this.usedCpu = usedCpu;
    return this;
  }

   /**
   * Get usedCpu
   * @return usedCpu
  **/
  @Schema(description = "")
  public String getUsedCpu() {
    return usedCpu;
  }

  public void setUsedCpu(String usedCpu) {
    this.usedCpu = usedCpu;
  }

  public NodeInfoListForDescribeNodeInfoOutput usedMemInBytes(String usedMemInBytes) {
    this.usedMemInBytes = usedMemInBytes;
    return this;
  }

   /**
   * Get usedMemInBytes
   * @return usedMemInBytes
  **/
  @Schema(description = "")
  public String getUsedMemInBytes() {
    return usedMemInBytes;
  }

  public void setUsedMemInBytes(String usedMemInBytes) {
    this.usedMemInBytes = usedMemInBytes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeInfoListForDescribeNodeInfoOutput nodeInfoListForDescribeNodeInfoOutput = (NodeInfoListForDescribeNodeInfoOutput) o;
    return Objects.equals(this.createTime, nodeInfoListForDescribeNodeInfoOutput.createTime) &&
        Objects.equals(this.displayName, nodeInfoListForDescribeNodeInfoOutput.displayName) &&
        Objects.equals(this.nodeName, nodeInfoListForDescribeNodeInfoOutput.nodeName) &&
        Objects.equals(this.nodeType, nodeInfoListForDescribeNodeInfoOutput.nodeType) &&
        Objects.equals(this.status, nodeInfoListForDescribeNodeInfoOutput.status) &&
        Objects.equals(this.totalCpu, nodeInfoListForDescribeNodeInfoOutput.totalCpu) &&
        Objects.equals(this.totalMemInBytes, nodeInfoListForDescribeNodeInfoOutput.totalMemInBytes) &&
        Objects.equals(this.updateTime, nodeInfoListForDescribeNodeInfoOutput.updateTime) &&
        Objects.equals(this.usedCpu, nodeInfoListForDescribeNodeInfoOutput.usedCpu) &&
        Objects.equals(this.usedMemInBytes, nodeInfoListForDescribeNodeInfoOutput.usedMemInBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, displayName, nodeName, nodeType, status, totalCpu, totalMemInBytes, updateTime, usedCpu, usedMemInBytes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeInfoListForDescribeNodeInfoOutput {\n");
    
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    nodeName: ").append(toIndentedString(nodeName)).append("\n");
    sb.append("    nodeType: ").append(toIndentedString(nodeType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    totalCpu: ").append(toIndentedString(totalCpu)).append("\n");
    sb.append("    totalMemInBytes: ").append(toIndentedString(totalMemInBytes)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    usedCpu: ").append(toIndentedString(usedCpu)).append("\n");
    sb.append("    usedMemInBytes: ").append(toIndentedString(usedMemInBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
