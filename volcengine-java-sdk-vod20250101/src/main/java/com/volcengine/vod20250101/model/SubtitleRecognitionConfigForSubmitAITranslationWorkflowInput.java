/*
 * vod20250101
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vod20250101.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * SubtitleRecognitionConfigForSubmitAITranslationWorkflowInput
 */



public class SubtitleRecognitionConfigForSubmitAITranslationWorkflowInput {
  @SerializedName("BilingualSubtitleFileName")
  private String bilingualSubtitleFileName = null;

  @SerializedName("RecognitionType")
  private String recognitionType = null;

  @SerializedName("SourceSubtitleFileName")
  private String sourceSubtitleFileName = null;

  @SerializedName("SubtitleFileName")
  private String subtitleFileName = null;

  @SerializedName("TargetSubtitleFileName")
  private String targetSubtitleFileName = null;

  public SubtitleRecognitionConfigForSubmitAITranslationWorkflowInput bilingualSubtitleFileName(String bilingualSubtitleFileName) {
    this.bilingualSubtitleFileName = bilingualSubtitleFileName;
    return this;
  }

   /**
   * Get bilingualSubtitleFileName
   * @return bilingualSubtitleFileName
  **/
  @Schema(description = "")
  public String getBilingualSubtitleFileName() {
    return bilingualSubtitleFileName;
  }

  public void setBilingualSubtitleFileName(String bilingualSubtitleFileName) {
    this.bilingualSubtitleFileName = bilingualSubtitleFileName;
  }

  public SubtitleRecognitionConfigForSubmitAITranslationWorkflowInput recognitionType(String recognitionType) {
    this.recognitionType = recognitionType;
    return this;
  }

   /**
   * Get recognitionType
   * @return recognitionType
  **/
  @Schema(description = "")
  public String getRecognitionType() {
    return recognitionType;
  }

  public void setRecognitionType(String recognitionType) {
    this.recognitionType = recognitionType;
  }

  public SubtitleRecognitionConfigForSubmitAITranslationWorkflowInput sourceSubtitleFileName(String sourceSubtitleFileName) {
    this.sourceSubtitleFileName = sourceSubtitleFileName;
    return this;
  }

   /**
   * Get sourceSubtitleFileName
   * @return sourceSubtitleFileName
  **/
  @Schema(description = "")
  public String getSourceSubtitleFileName() {
    return sourceSubtitleFileName;
  }

  public void setSourceSubtitleFileName(String sourceSubtitleFileName) {
    this.sourceSubtitleFileName = sourceSubtitleFileName;
  }

  public SubtitleRecognitionConfigForSubmitAITranslationWorkflowInput subtitleFileName(String subtitleFileName) {
    this.subtitleFileName = subtitleFileName;
    return this;
  }

   /**
   * Get subtitleFileName
   * @return subtitleFileName
  **/
  @Schema(description = "")
  public String getSubtitleFileName() {
    return subtitleFileName;
  }

  public void setSubtitleFileName(String subtitleFileName) {
    this.subtitleFileName = subtitleFileName;
  }

  public SubtitleRecognitionConfigForSubmitAITranslationWorkflowInput targetSubtitleFileName(String targetSubtitleFileName) {
    this.targetSubtitleFileName = targetSubtitleFileName;
    return this;
  }

   /**
   * Get targetSubtitleFileName
   * @return targetSubtitleFileName
  **/
  @Schema(description = "")
  public String getTargetSubtitleFileName() {
    return targetSubtitleFileName;
  }

  public void setTargetSubtitleFileName(String targetSubtitleFileName) {
    this.targetSubtitleFileName = targetSubtitleFileName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubtitleRecognitionConfigForSubmitAITranslationWorkflowInput subtitleRecognitionConfigForSubmitAITranslationWorkflowInput = (SubtitleRecognitionConfigForSubmitAITranslationWorkflowInput) o;
    return Objects.equals(this.bilingualSubtitleFileName, subtitleRecognitionConfigForSubmitAITranslationWorkflowInput.bilingualSubtitleFileName) &&
        Objects.equals(this.recognitionType, subtitleRecognitionConfigForSubmitAITranslationWorkflowInput.recognitionType) &&
        Objects.equals(this.sourceSubtitleFileName, subtitleRecognitionConfigForSubmitAITranslationWorkflowInput.sourceSubtitleFileName) &&
        Objects.equals(this.subtitleFileName, subtitleRecognitionConfigForSubmitAITranslationWorkflowInput.subtitleFileName) &&
        Objects.equals(this.targetSubtitleFileName, subtitleRecognitionConfigForSubmitAITranslationWorkflowInput.targetSubtitleFileName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bilingualSubtitleFileName, recognitionType, sourceSubtitleFileName, subtitleFileName, targetSubtitleFileName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubtitleRecognitionConfigForSubmitAITranslationWorkflowInput {\n");
    
    sb.append("    bilingualSubtitleFileName: ").append(toIndentedString(bilingualSubtitleFileName)).append("\n");
    sb.append("    recognitionType: ").append(toIndentedString(recognitionType)).append("\n");
    sb.append("    sourceSubtitleFileName: ").append(toIndentedString(sourceSubtitleFileName)).append("\n");
    sb.append("    subtitleFileName: ").append(toIndentedString(subtitleFileName)).append("\n");
    sb.append("    targetSubtitleFileName: ").append(toIndentedString(targetSubtitleFileName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
