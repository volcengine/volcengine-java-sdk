/*
 * ml_platform20240701
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.mlplatform20240701.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ListDevInstancesRequest
 */



public class ListDevInstancesRequest {
  @SerializedName("CreateUserIds")
  private List<Integer> createUserIds = null;

  @SerializedName("IdContains")
  private String idContains = null;

  @SerializedName("Ids")
  private List<String> ids = null;

  @SerializedName("NameContains")
  private String nameContains = null;

  @SerializedName("PageNumber")
  private Integer pageNumber = null;

  @SerializedName("PageSize")
  private Integer pageSize = null;

  @SerializedName("ProjectName")
  private String projectName = null;

  /**
   * Gets or Sets relationship
   */
  @JsonAdapter(RelationshipEnum.Adapter.class)
  public enum RelationshipEnum {
    @SerializedName("Created")
    CREATED("Created"),
    @SerializedName("Owned")
    OWNED("Owned");

    private String value;

    RelationshipEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RelationshipEnum fromValue(String input) {
      for (RelationshipEnum b : RelationshipEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RelationshipEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelationshipEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public RelationshipEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return RelationshipEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("Relationship")
  private RelationshipEnum relationship = null;

  @SerializedName("ResourceGroupIds")
  private List<String> resourceGroupIds = null;

  @SerializedName("ResourceQueueIds")
  private List<String> resourceQueueIds = null;

  @SerializedName("ResourceReservationPlanIds")
  private List<String> resourceReservationPlanIds = null;

  /**
   * Gets or Sets sortBy
   */
  @JsonAdapter(SortByEnum.Adapter.class)
  public enum SortByEnum {
    @SerializedName("CreateTime")
    CREATETIME("CreateTime");

    private String value;

    SortByEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SortByEnum fromValue(String input) {
      for (SortByEnum b : SortByEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SortByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortByEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SortByEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SortByEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("SortBy")
  private SortByEnum sortBy = null;

  /**
   * Gets or Sets sortOrder
   */
  @JsonAdapter(SortOrderEnum.Adapter.class)
  public enum SortOrderEnum {
    @SerializedName("Ascend")
    ASCEND("Ascend"),
    @SerializedName("Descend")
    DESCEND("Descend");

    private String value;

    SortOrderEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SortOrderEnum fromValue(String input) {
      for (SortOrderEnum b : SortOrderEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SortOrderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortOrderEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SortOrderEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SortOrderEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("SortOrder")
  private SortOrderEnum sortOrder = null;

  /**
   * Gets or Sets states
   */
  @JsonAdapter(StatesEnum.Adapter.class)
  public enum StatesEnum {
    @SerializedName("Pending")
    PENDING("Pending"),
    @SerializedName("Deploying")
    DEPLOYING("Deploying"),
    @SerializedName("Running")
    RUNNING("Running"),
    @SerializedName("Stopping")
    STOPPING("Stopping"),
    @SerializedName("Stopped")
    STOPPED("Stopped"),
    @SerializedName("Deleting")
    DELETING("Deleting"),
    @SerializedName("Abnormal")
    ABNORMAL("Abnormal"),
    @SerializedName("Failed")
    FAILED("Failed"),
    @SerializedName("Upgrading")
    UPGRADING("Upgrading");

    private String value;

    StatesEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatesEnum fromValue(String input) {
      for (StatesEnum b : StatesEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatesEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatesEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatesEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("States")
  private List<StatesEnum> states = null;

  public ListDevInstancesRequest createUserIds(List<Integer> createUserIds) {
    this.createUserIds = createUserIds;
    return this;
  }

  public ListDevInstancesRequest addCreateUserIdsItem(Integer createUserIdsItem) {
    if (this.createUserIds == null) {
      this.createUserIds = new ArrayList<Integer>();
    }
    this.createUserIds.add(createUserIdsItem);
    return this;
  }

   /**
   * Get createUserIds
   * @return createUserIds
  **/
  @Schema(description = "")
  public List<Integer> getCreateUserIds() {
    return createUserIds;
  }

  public void setCreateUserIds(List<Integer> createUserIds) {
    this.createUserIds = createUserIds;
  }

  public ListDevInstancesRequest idContains(String idContains) {
    this.idContains = idContains;
    return this;
  }

   /**
   * Get idContains
   * @return idContains
  **/
  @Schema(description = "")
  public String getIdContains() {
    return idContains;
  }

  public void setIdContains(String idContains) {
    this.idContains = idContains;
  }

  public ListDevInstancesRequest ids(List<String> ids) {
    this.ids = ids;
    return this;
  }

  public ListDevInstancesRequest addIdsItem(String idsItem) {
    if (this.ids == null) {
      this.ids = new ArrayList<String>();
    }
    this.ids.add(idsItem);
    return this;
  }

   /**
   * Get ids
   * @return ids
  **/
  @Schema(description = "")
  public List<String> getIds() {
    return ids;
  }

  public void setIds(List<String> ids) {
    this.ids = ids;
  }

  public ListDevInstancesRequest nameContains(String nameContains) {
    this.nameContains = nameContains;
    return this;
  }

   /**
   * Get nameContains
   * @return nameContains
  **/
  @Schema(description = "")
  public String getNameContains() {
    return nameContains;
  }

  public void setNameContains(String nameContains) {
    this.nameContains = nameContains;
  }

  public ListDevInstancesRequest pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

   /**
   * Get pageNumber
   * @return pageNumber
  **/
  @Schema(description = "")
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }

  public ListDevInstancesRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * minimum: 10
   * maximum: 100
   * @return pageSize
  **/
 @Min(10) @Max(100)  @Schema(description = "")
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }

  public ListDevInstancesRequest projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
 @Size(min=1,max=64)  @Schema(description = "")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public ListDevInstancesRequest relationship(RelationshipEnum relationship) {
    this.relationship = relationship;
    return this;
  }

   /**
   * Get relationship
   * @return relationship
  **/
  @Schema(description = "")
  public RelationshipEnum getRelationship() {
    return relationship;
  }

  public void setRelationship(RelationshipEnum relationship) {
    this.relationship = relationship;
  }

  public ListDevInstancesRequest resourceGroupIds(List<String> resourceGroupIds) {
    this.resourceGroupIds = resourceGroupIds;
    return this;
  }

  public ListDevInstancesRequest addResourceGroupIdsItem(String resourceGroupIdsItem) {
    if (this.resourceGroupIds == null) {
      this.resourceGroupIds = new ArrayList<String>();
    }
    this.resourceGroupIds.add(resourceGroupIdsItem);
    return this;
  }

   /**
   * Get resourceGroupIds
   * @return resourceGroupIds
  **/
  @Schema(description = "")
  public List<String> getResourceGroupIds() {
    return resourceGroupIds;
  }

  public void setResourceGroupIds(List<String> resourceGroupIds) {
    this.resourceGroupIds = resourceGroupIds;
  }

  public ListDevInstancesRequest resourceQueueIds(List<String> resourceQueueIds) {
    this.resourceQueueIds = resourceQueueIds;
    return this;
  }

  public ListDevInstancesRequest addResourceQueueIdsItem(String resourceQueueIdsItem) {
    if (this.resourceQueueIds == null) {
      this.resourceQueueIds = new ArrayList<String>();
    }
    this.resourceQueueIds.add(resourceQueueIdsItem);
    return this;
  }

   /**
   * Get resourceQueueIds
   * @return resourceQueueIds
  **/
  @Schema(description = "")
  public List<String> getResourceQueueIds() {
    return resourceQueueIds;
  }

  public void setResourceQueueIds(List<String> resourceQueueIds) {
    this.resourceQueueIds = resourceQueueIds;
  }

  public ListDevInstancesRequest resourceReservationPlanIds(List<String> resourceReservationPlanIds) {
    this.resourceReservationPlanIds = resourceReservationPlanIds;
    return this;
  }

  public ListDevInstancesRequest addResourceReservationPlanIdsItem(String resourceReservationPlanIdsItem) {
    if (this.resourceReservationPlanIds == null) {
      this.resourceReservationPlanIds = new ArrayList<String>();
    }
    this.resourceReservationPlanIds.add(resourceReservationPlanIdsItem);
    return this;
  }

   /**
   * Get resourceReservationPlanIds
   * @return resourceReservationPlanIds
  **/
  @Schema(description = "")
  public List<String> getResourceReservationPlanIds() {
    return resourceReservationPlanIds;
  }

  public void setResourceReservationPlanIds(List<String> resourceReservationPlanIds) {
    this.resourceReservationPlanIds = resourceReservationPlanIds;
  }

  public ListDevInstancesRequest sortBy(SortByEnum sortBy) {
    this.sortBy = sortBy;
    return this;
  }

   /**
   * Get sortBy
   * @return sortBy
  **/
  @Schema(description = "")
  public SortByEnum getSortBy() {
    return sortBy;
  }

  public void setSortBy(SortByEnum sortBy) {
    this.sortBy = sortBy;
  }

  public ListDevInstancesRequest sortOrder(SortOrderEnum sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

   /**
   * Get sortOrder
   * @return sortOrder
  **/
  @Schema(description = "")
  public SortOrderEnum getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(SortOrderEnum sortOrder) {
    this.sortOrder = sortOrder;
  }

  public ListDevInstancesRequest states(List<StatesEnum> states) {
    this.states = states;
    return this;
  }

  public ListDevInstancesRequest addStatesItem(StatesEnum statesItem) {
    if (this.states == null) {
      this.states = new ArrayList<StatesEnum>();
    }
    this.states.add(statesItem);
    return this;
  }

   /**
   * Get states
   * @return states
  **/
  @Schema(description = "")
  public List<StatesEnum> getStates() {
    return states;
  }

  public void setStates(List<StatesEnum> states) {
    this.states = states;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListDevInstancesRequest listDevInstancesRequest = (ListDevInstancesRequest) o;
    return Objects.equals(this.createUserIds, listDevInstancesRequest.createUserIds) &&
        Objects.equals(this.idContains, listDevInstancesRequest.idContains) &&
        Objects.equals(this.ids, listDevInstancesRequest.ids) &&
        Objects.equals(this.nameContains, listDevInstancesRequest.nameContains) &&
        Objects.equals(this.pageNumber, listDevInstancesRequest.pageNumber) &&
        Objects.equals(this.pageSize, listDevInstancesRequest.pageSize) &&
        Objects.equals(this.projectName, listDevInstancesRequest.projectName) &&
        Objects.equals(this.relationship, listDevInstancesRequest.relationship) &&
        Objects.equals(this.resourceGroupIds, listDevInstancesRequest.resourceGroupIds) &&
        Objects.equals(this.resourceQueueIds, listDevInstancesRequest.resourceQueueIds) &&
        Objects.equals(this.resourceReservationPlanIds, listDevInstancesRequest.resourceReservationPlanIds) &&
        Objects.equals(this.sortBy, listDevInstancesRequest.sortBy) &&
        Objects.equals(this.sortOrder, listDevInstancesRequest.sortOrder) &&
        Objects.equals(this.states, listDevInstancesRequest.states);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createUserIds, idContains, ids, nameContains, pageNumber, pageSize, projectName, relationship, resourceGroupIds, resourceQueueIds, resourceReservationPlanIds, sortBy, sortOrder, states);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListDevInstancesRequest {\n");
    
    sb.append("    createUserIds: ").append(toIndentedString(createUserIds)).append("\n");
    sb.append("    idContains: ").append(toIndentedString(idContains)).append("\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    nameContains: ").append(toIndentedString(nameContains)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    relationship: ").append(toIndentedString(relationship)).append("\n");
    sb.append("    resourceGroupIds: ").append(toIndentedString(resourceGroupIds)).append("\n");
    sb.append("    resourceQueueIds: ").append(toIndentedString(resourceQueueIds)).append("\n");
    sb.append("    resourceReservationPlanIds: ").append(toIndentedString(resourceReservationPlanIds)).append("\n");
    sb.append("    sortBy: ").append(toIndentedString(sortBy)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    states: ").append(toIndentedString(states)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
