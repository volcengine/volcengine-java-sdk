/*
 * vod20250101
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vod20250101.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.vod20250101.model.DirectUrlForStartExecutionInput;
import com.volcengine.vod20250101.model.FileIdForStartExecutionInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * InputForStartExecutionInput
 */



public class InputForStartExecutionInput {
  @SerializedName("DirectUrl")
  private DirectUrlForStartExecutionInput directUrl = null;

  @SerializedName("FileId")
  private FileIdForStartExecutionInput fileId = null;

  @SerializedName("Tag")
  private String tag = null;

  @SerializedName("Type")
  private String type = null;

  @SerializedName("Vid")
  private String vid = null;

  public InputForStartExecutionInput directUrl(DirectUrlForStartExecutionInput directUrl) {
    this.directUrl = directUrl;
    return this;
  }

   /**
   * Get directUrl
   * @return directUrl
  **/
  @Valid
  @Schema(description = "")
  public DirectUrlForStartExecutionInput getDirectUrl() {
    return directUrl;
  }

  public void setDirectUrl(DirectUrlForStartExecutionInput directUrl) {
    this.directUrl = directUrl;
  }

  public InputForStartExecutionInput fileId(FileIdForStartExecutionInput fileId) {
    this.fileId = fileId;
    return this;
  }

   /**
   * Get fileId
   * @return fileId
  **/
  @Valid
  @Schema(description = "")
  public FileIdForStartExecutionInput getFileId() {
    return fileId;
  }

  public void setFileId(FileIdForStartExecutionInput fileId) {
    this.fileId = fileId;
  }

  public InputForStartExecutionInput tag(String tag) {
    this.tag = tag;
    return this;
  }

   /**
   * Get tag
   * @return tag
  **/
  @Schema(description = "")
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }

  public InputForStartExecutionInput type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public InputForStartExecutionInput vid(String vid) {
    this.vid = vid;
    return this;
  }

   /**
   * Get vid
   * @return vid
  **/
  @Schema(description = "")
  public String getVid() {
    return vid;
  }

  public void setVid(String vid) {
    this.vid = vid;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputForStartExecutionInput inputForStartExecutionInput = (InputForStartExecutionInput) o;
    return Objects.equals(this.directUrl, inputForStartExecutionInput.directUrl) &&
        Objects.equals(this.fileId, inputForStartExecutionInput.fileId) &&
        Objects.equals(this.tag, inputForStartExecutionInput.tag) &&
        Objects.equals(this.type, inputForStartExecutionInput.type) &&
        Objects.equals(this.vid, inputForStartExecutionInput.vid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(directUrl, fileId, tag, type, vid);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputForStartExecutionInput {\n");
    
    sb.append("    directUrl: ").append(toIndentedString(directUrl)).append("\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vid: ").append(toIndentedString(vid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
