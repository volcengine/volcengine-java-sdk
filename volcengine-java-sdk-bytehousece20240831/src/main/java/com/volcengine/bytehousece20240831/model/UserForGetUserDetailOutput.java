/*
 * bytehouse_ce20240831
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.bytehousece20240831.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * UserForGetUserDetailOutput
 */



public class UserForGetUserDetailOutput {
  @SerializedName("AccountID")
  private Integer accountID = null;

  @SerializedName("CloudName")
  private String cloudName = null;

  @SerializedName("Clusters")
  private List<String> clusters = null;

  @SerializedName("CreatedAt")
  private Long createdAt = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("Email")
  private String email = null;

  @SerializedName("ID")
  private Integer ID = null;

  @SerializedName("Immutable")
  private Boolean immutable = null;

  @SerializedName("IsSystemAdmin")
  private Boolean isSystemAdmin = null;

  @SerializedName("LastLoginAt")
  private Long lastLoginAt = null;

  @SerializedName("Name")
  private String name = null;

  @SerializedName("Readonly")
  private Boolean readonly = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    @SerializedName("ACTIVE_REMOVED")
    ACTIVE_REMOVED("ACTIVE_REMOVED"),
    @SerializedName("INACTIVE_REMOVED")
    INACTIVE_REMOVED("INACTIVE_REMOVED"),
    @SerializedName("INACTIVE")
    INACTIVE("INACTIVE"),
    @SerializedName("ACTIVE")
    ACTIVE("ACTIVE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("Status")
  private StatusEnum status = null;

  @SerializedName("UpdatedAt")
  private Long updatedAt = null;

  @SerializedName("UserID")
  private Integer userID = null;

  /**
   * Gets or Sets userType
   */
  @JsonAdapter(UserTypeEnum.Adapter.class)
  public enum UserTypeEnum {
    @SerializedName("SYSTEM")
    SYSTEM("SYSTEM"),
    @SerializedName("MAIN")
    MAIN("MAIN"),
    @SerializedName("NORMAL")
    NORMAL("NORMAL"),
    @SerializedName("ASSUMED_ROLE")
    ASSUMED_ROLE("ASSUMED_ROLE");

    private String value;

    UserTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static UserTypeEnum fromValue(String input) {
      for (UserTypeEnum b : UserTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<UserTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public UserTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return UserTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("UserType")
  private UserTypeEnum userType = null;

  @SerializedName("Username")
  private String username = null;

  public UserForGetUserDetailOutput accountID(Integer accountID) {
    this.accountID = accountID;
    return this;
  }

   /**
   * Get accountID
   * @return accountID
  **/
  @Schema(description = "")
  public Integer getAccountID() {
    return accountID;
  }

  public void setAccountID(Integer accountID) {
    this.accountID = accountID;
  }

  public UserForGetUserDetailOutput cloudName(String cloudName) {
    this.cloudName = cloudName;
    return this;
  }

   /**
   * Get cloudName
   * @return cloudName
  **/
  @Schema(description = "")
  public String getCloudName() {
    return cloudName;
  }

  public void setCloudName(String cloudName) {
    this.cloudName = cloudName;
  }

  public UserForGetUserDetailOutput clusters(List<String> clusters) {
    this.clusters = clusters;
    return this;
  }

  public UserForGetUserDetailOutput addClustersItem(String clustersItem) {
    if (this.clusters == null) {
      this.clusters = new ArrayList<String>();
    }
    this.clusters.add(clustersItem);
    return this;
  }

   /**
   * Get clusters
   * @return clusters
  **/
  @Schema(description = "")
  public List<String> getClusters() {
    return clusters;
  }

  public void setClusters(List<String> clusters) {
    this.clusters = clusters;
  }

  public UserForGetUserDetailOutput createdAt(Long createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @Schema(description = "")
  public Long getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Long createdAt) {
    this.createdAt = createdAt;
  }

  public UserForGetUserDetailOutput description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public UserForGetUserDetailOutput email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @Schema(description = "")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public UserForGetUserDetailOutput ID(Integer ID) {
    this.ID = ID;
    return this;
  }

   /**
   * Get ID
   * @return ID
  **/
  @Schema(description = "")
  public Integer getID() {
    return ID;
  }

  public void setID(Integer ID) {
    this.ID = ID;
  }

  public UserForGetUserDetailOutput immutable(Boolean immutable) {
    this.immutable = immutable;
    return this;
  }

   /**
   * Get immutable
   * @return immutable
  **/
  @Schema(description = "")
  public Boolean isImmutable() {
    return immutable;
  }

  public void setImmutable(Boolean immutable) {
    this.immutable = immutable;
  }

  public UserForGetUserDetailOutput isSystemAdmin(Boolean isSystemAdmin) {
    this.isSystemAdmin = isSystemAdmin;
    return this;
  }

   /**
   * Get isSystemAdmin
   * @return isSystemAdmin
  **/
  @Schema(description = "")
  public Boolean isIsSystemAdmin() {
    return isSystemAdmin;
  }

  public void setIsSystemAdmin(Boolean isSystemAdmin) {
    this.isSystemAdmin = isSystemAdmin;
  }

  public UserForGetUserDetailOutput lastLoginAt(Long lastLoginAt) {
    this.lastLoginAt = lastLoginAt;
    return this;
  }

   /**
   * Get lastLoginAt
   * @return lastLoginAt
  **/
  @Schema(description = "")
  public Long getLastLoginAt() {
    return lastLoginAt;
  }

  public void setLastLoginAt(Long lastLoginAt) {
    this.lastLoginAt = lastLoginAt;
  }

  public UserForGetUserDetailOutput name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public UserForGetUserDetailOutput readonly(Boolean readonly) {
    this.readonly = readonly;
    return this;
  }

   /**
   * Get readonly
   * @return readonly
  **/
  @Schema(description = "")
  public Boolean isReadonly() {
    return readonly;
  }

  public void setReadonly(Boolean readonly) {
    this.readonly = readonly;
  }

  public UserForGetUserDetailOutput status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public UserForGetUserDetailOutput updatedAt(Long updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @Schema(description = "")
  public Long getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(Long updatedAt) {
    this.updatedAt = updatedAt;
  }

  public UserForGetUserDetailOutput userID(Integer userID) {
    this.userID = userID;
    return this;
  }

   /**
   * Get userID
   * @return userID
  **/
  @Schema(description = "")
  public Integer getUserID() {
    return userID;
  }

  public void setUserID(Integer userID) {
    this.userID = userID;
  }

  public UserForGetUserDetailOutput userType(UserTypeEnum userType) {
    this.userType = userType;
    return this;
  }

   /**
   * Get userType
   * @return userType
  **/
  @Schema(description = "")
  public UserTypeEnum getUserType() {
    return userType;
  }

  public void setUserType(UserTypeEnum userType) {
    this.userType = userType;
  }

  public UserForGetUserDetailOutput username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @Schema(description = "")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserForGetUserDetailOutput userForGetUserDetailOutput = (UserForGetUserDetailOutput) o;
    return Objects.equals(this.accountID, userForGetUserDetailOutput.accountID) &&
        Objects.equals(this.cloudName, userForGetUserDetailOutput.cloudName) &&
        Objects.equals(this.clusters, userForGetUserDetailOutput.clusters) &&
        Objects.equals(this.createdAt, userForGetUserDetailOutput.createdAt) &&
        Objects.equals(this.description, userForGetUserDetailOutput.description) &&
        Objects.equals(this.email, userForGetUserDetailOutput.email) &&
        Objects.equals(this.ID, userForGetUserDetailOutput.ID) &&
        Objects.equals(this.immutable, userForGetUserDetailOutput.immutable) &&
        Objects.equals(this.isSystemAdmin, userForGetUserDetailOutput.isSystemAdmin) &&
        Objects.equals(this.lastLoginAt, userForGetUserDetailOutput.lastLoginAt) &&
        Objects.equals(this.name, userForGetUserDetailOutput.name) &&
        Objects.equals(this.readonly, userForGetUserDetailOutput.readonly) &&
        Objects.equals(this.status, userForGetUserDetailOutput.status) &&
        Objects.equals(this.updatedAt, userForGetUserDetailOutput.updatedAt) &&
        Objects.equals(this.userID, userForGetUserDetailOutput.userID) &&
        Objects.equals(this.userType, userForGetUserDetailOutput.userType) &&
        Objects.equals(this.username, userForGetUserDetailOutput.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountID, cloudName, clusters, createdAt, description, email, ID, immutable, isSystemAdmin, lastLoginAt, name, readonly, status, updatedAt, userID, userType, username);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserForGetUserDetailOutput {\n");
    
    sb.append("    accountID: ").append(toIndentedString(accountID)).append("\n");
    sb.append("    cloudName: ").append(toIndentedString(cloudName)).append("\n");
    sb.append("    clusters: ").append(toIndentedString(clusters)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    immutable: ").append(toIndentedString(immutable)).append("\n");
    sb.append("    isSystemAdmin: ").append(toIndentedString(isSystemAdmin)).append("\n");
    sb.append("    lastLoginAt: ").append(toIndentedString(lastLoginAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    readonly: ").append(toIndentedString(readonly)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    userID: ").append(toIndentedString(userID)).append("\n");
    sb.append("    userType: ").append(toIndentedString(userType)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
