/*
 * directconnect
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.directconnect.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.directconnect.model.TagForCreateDirectConnectGatewayInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * CreateDirectConnectGatewayRequest
 */



public class CreateDirectConnectGatewayRequest {
  @SerializedName("BgpAsn")
  private Integer bgpAsn = null;

  @SerializedName("ClientToken")
  private String clientToken = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("DirectConnectGatewayName")
  private String directConnectGatewayName = null;

  @SerializedName("EnableIpv6")
  private Boolean enableIpv6 = null;

  @SerializedName("ProjectName")
  private String projectName = null;

  @SerializedName("Tags")
  private List<TagForCreateDirectConnectGatewayInput> tags = null;

  public CreateDirectConnectGatewayRequest bgpAsn(Integer bgpAsn) {
    this.bgpAsn = bgpAsn;
    return this;
  }

   /**
   * Get bgpAsn
   * @return bgpAsn
  **/
  @Schema(description = "")
  public Integer getBgpAsn() {
    return bgpAsn;
  }

  public void setBgpAsn(Integer bgpAsn) {
    this.bgpAsn = bgpAsn;
  }

  public CreateDirectConnectGatewayRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

   /**
   * Get clientToken
   * @return clientToken
  **/
  @Schema(description = "")
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }

  public CreateDirectConnectGatewayRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CreateDirectConnectGatewayRequest directConnectGatewayName(String directConnectGatewayName) {
    this.directConnectGatewayName = directConnectGatewayName;
    return this;
  }

   /**
   * Get directConnectGatewayName
   * @return directConnectGatewayName
  **/
  @Schema(description = "")
  public String getDirectConnectGatewayName() {
    return directConnectGatewayName;
  }

  public void setDirectConnectGatewayName(String directConnectGatewayName) {
    this.directConnectGatewayName = directConnectGatewayName;
  }

  public CreateDirectConnectGatewayRequest enableIpv6(Boolean enableIpv6) {
    this.enableIpv6 = enableIpv6;
    return this;
  }

   /**
   * Get enableIpv6
   * @return enableIpv6
  **/
  @Schema(description = "")
  public Boolean isEnableIpv6() {
    return enableIpv6;
  }

  public void setEnableIpv6(Boolean enableIpv6) {
    this.enableIpv6 = enableIpv6;
  }

  public CreateDirectConnectGatewayRequest projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
  @Schema(description = "")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public CreateDirectConnectGatewayRequest tags(List<TagForCreateDirectConnectGatewayInput> tags) {
    this.tags = tags;
    return this;
  }

  public CreateDirectConnectGatewayRequest addTagsItem(TagForCreateDirectConnectGatewayInput tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<TagForCreateDirectConnectGatewayInput>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Valid
  @Schema(description = "")
  public List<TagForCreateDirectConnectGatewayInput> getTags() {
    return tags;
  }

  public void setTags(List<TagForCreateDirectConnectGatewayInput> tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDirectConnectGatewayRequest createDirectConnectGatewayRequest = (CreateDirectConnectGatewayRequest) o;
    return Objects.equals(this.bgpAsn, createDirectConnectGatewayRequest.bgpAsn) &&
        Objects.equals(this.clientToken, createDirectConnectGatewayRequest.clientToken) &&
        Objects.equals(this.description, createDirectConnectGatewayRequest.description) &&
        Objects.equals(this.directConnectGatewayName, createDirectConnectGatewayRequest.directConnectGatewayName) &&
        Objects.equals(this.enableIpv6, createDirectConnectGatewayRequest.enableIpv6) &&
        Objects.equals(this.projectName, createDirectConnectGatewayRequest.projectName) &&
        Objects.equals(this.tags, createDirectConnectGatewayRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bgpAsn, clientToken, description, directConnectGatewayName, enableIpv6, projectName, tags);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDirectConnectGatewayRequest {\n");
    
    sb.append("    bgpAsn: ").append(toIndentedString(bgpAsn)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    directConnectGatewayName: ").append(toIndentedString(directConnectGatewayName)).append("\n");
    sb.append("    enableIpv6: ").append(toIndentedString(enableIpv6)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
