/*
 * vpn
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vpn.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.vpn.model.BgpConfigForCreateVpnConnectionInput;
import com.volcengine.vpn.model.IkeConfigForCreateVpnConnectionInput;
import com.volcengine.vpn.model.IpsecConfigForCreateVpnConnectionInput;
import com.volcengine.vpn.model.TunnelOptionForCreateVpnConnectionInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * CreateVpnConnectionRequest
 */



public class CreateVpnConnectionRequest {
  @SerializedName("AttachType")
  private String attachType = null;

  @SerializedName("BgpConfig")
  private BgpConfigForCreateVpnConnectionInput bgpConfig = null;

  @SerializedName("ClientToken")
  private String clientToken = null;

  @SerializedName("CustomerGatewayId")
  private String customerGatewayId = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("DpdAction")
  private String dpdAction = null;

  @SerializedName("EnableTunnelsBgp")
  private Boolean enableTunnelsBgp = null;

  @SerializedName("IkeConfig")
  private IkeConfigForCreateVpnConnectionInput ikeConfig = null;

  @SerializedName("IpsecConfig")
  private IpsecConfigForCreateVpnConnectionInput ipsecConfig = null;

  @SerializedName("LocalSubnet")
  private List<String> localSubnet = null;

  @SerializedName("LogEnabled")
  private Boolean logEnabled = null;

  @SerializedName("NatTraversal")
  private Boolean natTraversal = null;

  @SerializedName("NegotiateInstantly")
  private Boolean negotiateInstantly = null;

  @SerializedName("ProjectName")
  private String projectName = null;

  @SerializedName("RemoteSubnet")
  private List<String> remoteSubnet = null;

  @SerializedName("Spec")
  private String spec = null;

  @SerializedName("TunnelOptions")
  private List<TunnelOptionForCreateVpnConnectionInput> tunnelOptions = null;

  @SerializedName("VpnConnectionName")
  private String vpnConnectionName = null;

  @SerializedName("VpnGatewayId")
  private String vpnGatewayId = null;

  public CreateVpnConnectionRequest attachType(String attachType) {
    this.attachType = attachType;
    return this;
  }

   /**
   * Get attachType
   * @return attachType
  **/
  @Schema(description = "")
  public String getAttachType() {
    return attachType;
  }

  public void setAttachType(String attachType) {
    this.attachType = attachType;
  }

  public CreateVpnConnectionRequest bgpConfig(BgpConfigForCreateVpnConnectionInput bgpConfig) {
    this.bgpConfig = bgpConfig;
    return this;
  }

   /**
   * Get bgpConfig
   * @return bgpConfig
  **/
  @Valid
  @Schema(description = "")
  public BgpConfigForCreateVpnConnectionInput getBgpConfig() {
    return bgpConfig;
  }

  public void setBgpConfig(BgpConfigForCreateVpnConnectionInput bgpConfig) {
    this.bgpConfig = bgpConfig;
  }

  public CreateVpnConnectionRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

   /**
   * Get clientToken
   * @return clientToken
  **/
  @Schema(description = "")
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }

  public CreateVpnConnectionRequest customerGatewayId(String customerGatewayId) {
    this.customerGatewayId = customerGatewayId;
    return this;
  }

   /**
   * Get customerGatewayId
   * @return customerGatewayId
  **/
  @Schema(description = "")
  public String getCustomerGatewayId() {
    return customerGatewayId;
  }

  public void setCustomerGatewayId(String customerGatewayId) {
    this.customerGatewayId = customerGatewayId;
  }

  public CreateVpnConnectionRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CreateVpnConnectionRequest dpdAction(String dpdAction) {
    this.dpdAction = dpdAction;
    return this;
  }

   /**
   * Get dpdAction
   * @return dpdAction
  **/
  @Schema(description = "")
  public String getDpdAction() {
    return dpdAction;
  }

  public void setDpdAction(String dpdAction) {
    this.dpdAction = dpdAction;
  }

  public CreateVpnConnectionRequest enableTunnelsBgp(Boolean enableTunnelsBgp) {
    this.enableTunnelsBgp = enableTunnelsBgp;
    return this;
  }

   /**
   * Get enableTunnelsBgp
   * @return enableTunnelsBgp
  **/
  @Schema(description = "")
  public Boolean isEnableTunnelsBgp() {
    return enableTunnelsBgp;
  }

  public void setEnableTunnelsBgp(Boolean enableTunnelsBgp) {
    this.enableTunnelsBgp = enableTunnelsBgp;
  }

  public CreateVpnConnectionRequest ikeConfig(IkeConfigForCreateVpnConnectionInput ikeConfig) {
    this.ikeConfig = ikeConfig;
    return this;
  }

   /**
   * Get ikeConfig
   * @return ikeConfig
  **/
  @Valid
  @Schema(description = "")
  public IkeConfigForCreateVpnConnectionInput getIkeConfig() {
    return ikeConfig;
  }

  public void setIkeConfig(IkeConfigForCreateVpnConnectionInput ikeConfig) {
    this.ikeConfig = ikeConfig;
  }

  public CreateVpnConnectionRequest ipsecConfig(IpsecConfigForCreateVpnConnectionInput ipsecConfig) {
    this.ipsecConfig = ipsecConfig;
    return this;
  }

   /**
   * Get ipsecConfig
   * @return ipsecConfig
  **/
  @Valid
  @Schema(description = "")
  public IpsecConfigForCreateVpnConnectionInput getIpsecConfig() {
    return ipsecConfig;
  }

  public void setIpsecConfig(IpsecConfigForCreateVpnConnectionInput ipsecConfig) {
    this.ipsecConfig = ipsecConfig;
  }

  public CreateVpnConnectionRequest localSubnet(List<String> localSubnet) {
    this.localSubnet = localSubnet;
    return this;
  }

  public CreateVpnConnectionRequest addLocalSubnetItem(String localSubnetItem) {
    if (this.localSubnet == null) {
      this.localSubnet = new ArrayList<String>();
    }
    this.localSubnet.add(localSubnetItem);
    return this;
  }

   /**
   * Get localSubnet
   * @return localSubnet
  **/
  @Schema(description = "")
  public List<String> getLocalSubnet() {
    return localSubnet;
  }

  public void setLocalSubnet(List<String> localSubnet) {
    this.localSubnet = localSubnet;
  }

  public CreateVpnConnectionRequest logEnabled(Boolean logEnabled) {
    this.logEnabled = logEnabled;
    return this;
  }

   /**
   * Get logEnabled
   * @return logEnabled
  **/
  @Schema(description = "")
  public Boolean isLogEnabled() {
    return logEnabled;
  }

  public void setLogEnabled(Boolean logEnabled) {
    this.logEnabled = logEnabled;
  }

  public CreateVpnConnectionRequest natTraversal(Boolean natTraversal) {
    this.natTraversal = natTraversal;
    return this;
  }

   /**
   * Get natTraversal
   * @return natTraversal
  **/
  @Schema(description = "")
  public Boolean isNatTraversal() {
    return natTraversal;
  }

  public void setNatTraversal(Boolean natTraversal) {
    this.natTraversal = natTraversal;
  }

  public CreateVpnConnectionRequest negotiateInstantly(Boolean negotiateInstantly) {
    this.negotiateInstantly = negotiateInstantly;
    return this;
  }

   /**
   * Get negotiateInstantly
   * @return negotiateInstantly
  **/
  @Schema(description = "")
  public Boolean isNegotiateInstantly() {
    return negotiateInstantly;
  }

  public void setNegotiateInstantly(Boolean negotiateInstantly) {
    this.negotiateInstantly = negotiateInstantly;
  }

  public CreateVpnConnectionRequest projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
  @Schema(description = "")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public CreateVpnConnectionRequest remoteSubnet(List<String> remoteSubnet) {
    this.remoteSubnet = remoteSubnet;
    return this;
  }

  public CreateVpnConnectionRequest addRemoteSubnetItem(String remoteSubnetItem) {
    if (this.remoteSubnet == null) {
      this.remoteSubnet = new ArrayList<String>();
    }
    this.remoteSubnet.add(remoteSubnetItem);
    return this;
  }

   /**
   * Get remoteSubnet
   * @return remoteSubnet
  **/
  @Schema(description = "")
  public List<String> getRemoteSubnet() {
    return remoteSubnet;
  }

  public void setRemoteSubnet(List<String> remoteSubnet) {
    this.remoteSubnet = remoteSubnet;
  }

  public CreateVpnConnectionRequest spec(String spec) {
    this.spec = spec;
    return this;
  }

   /**
   * Get spec
   * @return spec
  **/
  @Schema(description = "")
  public String getSpec() {
    return spec;
  }

  public void setSpec(String spec) {
    this.spec = spec;
  }

  public CreateVpnConnectionRequest tunnelOptions(List<TunnelOptionForCreateVpnConnectionInput> tunnelOptions) {
    this.tunnelOptions = tunnelOptions;
    return this;
  }

  public CreateVpnConnectionRequest addTunnelOptionsItem(TunnelOptionForCreateVpnConnectionInput tunnelOptionsItem) {
    if (this.tunnelOptions == null) {
      this.tunnelOptions = new ArrayList<TunnelOptionForCreateVpnConnectionInput>();
    }
    this.tunnelOptions.add(tunnelOptionsItem);
    return this;
  }

   /**
   * Get tunnelOptions
   * @return tunnelOptions
  **/
  @Valid
  @Schema(description = "")
  public List<TunnelOptionForCreateVpnConnectionInput> getTunnelOptions() {
    return tunnelOptions;
  }

  public void setTunnelOptions(List<TunnelOptionForCreateVpnConnectionInput> tunnelOptions) {
    this.tunnelOptions = tunnelOptions;
  }

  public CreateVpnConnectionRequest vpnConnectionName(String vpnConnectionName) {
    this.vpnConnectionName = vpnConnectionName;
    return this;
  }

   /**
   * Get vpnConnectionName
   * @return vpnConnectionName
  **/
  @Schema(description = "")
  public String getVpnConnectionName() {
    return vpnConnectionName;
  }

  public void setVpnConnectionName(String vpnConnectionName) {
    this.vpnConnectionName = vpnConnectionName;
  }

  public CreateVpnConnectionRequest vpnGatewayId(String vpnGatewayId) {
    this.vpnGatewayId = vpnGatewayId;
    return this;
  }

   /**
   * Get vpnGatewayId
   * @return vpnGatewayId
  **/
  @Schema(description = "")
  public String getVpnGatewayId() {
    return vpnGatewayId;
  }

  public void setVpnGatewayId(String vpnGatewayId) {
    this.vpnGatewayId = vpnGatewayId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateVpnConnectionRequest createVpnConnectionRequest = (CreateVpnConnectionRequest) o;
    return Objects.equals(this.attachType, createVpnConnectionRequest.attachType) &&
        Objects.equals(this.bgpConfig, createVpnConnectionRequest.bgpConfig) &&
        Objects.equals(this.clientToken, createVpnConnectionRequest.clientToken) &&
        Objects.equals(this.customerGatewayId, createVpnConnectionRequest.customerGatewayId) &&
        Objects.equals(this.description, createVpnConnectionRequest.description) &&
        Objects.equals(this.dpdAction, createVpnConnectionRequest.dpdAction) &&
        Objects.equals(this.enableTunnelsBgp, createVpnConnectionRequest.enableTunnelsBgp) &&
        Objects.equals(this.ikeConfig, createVpnConnectionRequest.ikeConfig) &&
        Objects.equals(this.ipsecConfig, createVpnConnectionRequest.ipsecConfig) &&
        Objects.equals(this.localSubnet, createVpnConnectionRequest.localSubnet) &&
        Objects.equals(this.logEnabled, createVpnConnectionRequest.logEnabled) &&
        Objects.equals(this.natTraversal, createVpnConnectionRequest.natTraversal) &&
        Objects.equals(this.negotiateInstantly, createVpnConnectionRequest.negotiateInstantly) &&
        Objects.equals(this.projectName, createVpnConnectionRequest.projectName) &&
        Objects.equals(this.remoteSubnet, createVpnConnectionRequest.remoteSubnet) &&
        Objects.equals(this.spec, createVpnConnectionRequest.spec) &&
        Objects.equals(this.tunnelOptions, createVpnConnectionRequest.tunnelOptions) &&
        Objects.equals(this.vpnConnectionName, createVpnConnectionRequest.vpnConnectionName) &&
        Objects.equals(this.vpnGatewayId, createVpnConnectionRequest.vpnGatewayId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachType, bgpConfig, clientToken, customerGatewayId, description, dpdAction, enableTunnelsBgp, ikeConfig, ipsecConfig, localSubnet, logEnabled, natTraversal, negotiateInstantly, projectName, remoteSubnet, spec, tunnelOptions, vpnConnectionName, vpnGatewayId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateVpnConnectionRequest {\n");
    
    sb.append("    attachType: ").append(toIndentedString(attachType)).append("\n");
    sb.append("    bgpConfig: ").append(toIndentedString(bgpConfig)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    customerGatewayId: ").append(toIndentedString(customerGatewayId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dpdAction: ").append(toIndentedString(dpdAction)).append("\n");
    sb.append("    enableTunnelsBgp: ").append(toIndentedString(enableTunnelsBgp)).append("\n");
    sb.append("    ikeConfig: ").append(toIndentedString(ikeConfig)).append("\n");
    sb.append("    ipsecConfig: ").append(toIndentedString(ipsecConfig)).append("\n");
    sb.append("    localSubnet: ").append(toIndentedString(localSubnet)).append("\n");
    sb.append("    logEnabled: ").append(toIndentedString(logEnabled)).append("\n");
    sb.append("    natTraversal: ").append(toIndentedString(natTraversal)).append("\n");
    sb.append("    negotiateInstantly: ").append(toIndentedString(negotiateInstantly)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    remoteSubnet: ").append(toIndentedString(remoteSubnet)).append("\n");
    sb.append("    spec: ").append(toIndentedString(spec)).append("\n");
    sb.append("    tunnelOptions: ").append(toIndentedString(tunnelOptions)).append("\n");
    sb.append("    vpnConnectionName: ").append(toIndentedString(vpnConnectionName)).append("\n");
    sb.append("    vpnGatewayId: ").append(toIndentedString(vpnGatewayId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
