/*
 * graph
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.graph.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.graph.model.ReplicasToCloseForListTabletTaskOutput;
import com.volcengine.graph.model.ReplicasToDeleteForListTabletTaskOutput;
import com.volcengine.graph.model.ReplicasToFailoverByPromoteForListTabletTaskOutput;
import com.volcengine.graph.model.ReplicasToFailoverByReopenForListTabletTaskOutput;
import com.volcengine.graph.model.ReplicasToOpenOrAddForListTabletTaskOutput;
import com.volcengine.graph.model.TabletToMergeForListTabletTaskOutput;
import com.volcengine.graph.model.TabletToSplitForListTabletTaskOutput;
import com.volcengine.graph.model.TabletsToDeleteForListTabletTaskOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * TabletTaskInfoForListTabletTaskOutput
 */



public class TabletTaskInfoForListTabletTaskOutput {
  @SerializedName("EnqueueTime")
  private Long enqueueTime = null;

  @SerializedName("Reason")
  private String reason = null;

  @SerializedName("ReplicasToClose")
  private List<ReplicasToCloseForListTabletTaskOutput> replicasToClose = null;

  @SerializedName("ReplicasToDelete")
  private List<ReplicasToDeleteForListTabletTaskOutput> replicasToDelete = null;

  @SerializedName("ReplicasToFailoverByPromote")
  private List<ReplicasToFailoverByPromoteForListTabletTaskOutput> replicasToFailoverByPromote = null;

  @SerializedName("ReplicasToFailoverByReopen")
  private List<ReplicasToFailoverByReopenForListTabletTaskOutput> replicasToFailoverByReopen = null;

  @SerializedName("ReplicasToOpenOrAdd")
  private List<ReplicasToOpenOrAddForListTabletTaskOutput> replicasToOpenOrAdd = null;

  @SerializedName("StartTime")
  private Long startTime = null;

  @SerializedName("TabletToMerge")
  private TabletToMergeForListTabletTaskOutput tabletToMerge = null;

  @SerializedName("TabletToSplit")
  private TabletToSplitForListTabletTaskOutput tabletToSplit = null;

  @SerializedName("TabletsToDelete")
  private List<TabletsToDeleteForListTabletTaskOutput> tabletsToDelete = null;

  @SerializedName("TaskId")
  private Long taskId = null;

  @SerializedName("TaskType")
  private String taskType = null;

  public TabletTaskInfoForListTabletTaskOutput enqueueTime(Long enqueueTime) {
    this.enqueueTime = enqueueTime;
    return this;
  }

   /**
   * Get enqueueTime
   * @return enqueueTime
  **/
  @Schema(description = "")
  public Long getEnqueueTime() {
    return enqueueTime;
  }

  public void setEnqueueTime(Long enqueueTime) {
    this.enqueueTime = enqueueTime;
  }

  public TabletTaskInfoForListTabletTaskOutput reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * Get reason
   * @return reason
  **/
  @Schema(description = "")
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public TabletTaskInfoForListTabletTaskOutput replicasToClose(List<ReplicasToCloseForListTabletTaskOutput> replicasToClose) {
    this.replicasToClose = replicasToClose;
    return this;
  }

  public TabletTaskInfoForListTabletTaskOutput addReplicasToCloseItem(ReplicasToCloseForListTabletTaskOutput replicasToCloseItem) {
    if (this.replicasToClose == null) {
      this.replicasToClose = new ArrayList<ReplicasToCloseForListTabletTaskOutput>();
    }
    this.replicasToClose.add(replicasToCloseItem);
    return this;
  }

   /**
   * Get replicasToClose
   * @return replicasToClose
  **/
  @Valid
  @Schema(description = "")
  public List<ReplicasToCloseForListTabletTaskOutput> getReplicasToClose() {
    return replicasToClose;
  }

  public void setReplicasToClose(List<ReplicasToCloseForListTabletTaskOutput> replicasToClose) {
    this.replicasToClose = replicasToClose;
  }

  public TabletTaskInfoForListTabletTaskOutput replicasToDelete(List<ReplicasToDeleteForListTabletTaskOutput> replicasToDelete) {
    this.replicasToDelete = replicasToDelete;
    return this;
  }

  public TabletTaskInfoForListTabletTaskOutput addReplicasToDeleteItem(ReplicasToDeleteForListTabletTaskOutput replicasToDeleteItem) {
    if (this.replicasToDelete == null) {
      this.replicasToDelete = new ArrayList<ReplicasToDeleteForListTabletTaskOutput>();
    }
    this.replicasToDelete.add(replicasToDeleteItem);
    return this;
  }

   /**
   * Get replicasToDelete
   * @return replicasToDelete
  **/
  @Valid
  @Schema(description = "")
  public List<ReplicasToDeleteForListTabletTaskOutput> getReplicasToDelete() {
    return replicasToDelete;
  }

  public void setReplicasToDelete(List<ReplicasToDeleteForListTabletTaskOutput> replicasToDelete) {
    this.replicasToDelete = replicasToDelete;
  }

  public TabletTaskInfoForListTabletTaskOutput replicasToFailoverByPromote(List<ReplicasToFailoverByPromoteForListTabletTaskOutput> replicasToFailoverByPromote) {
    this.replicasToFailoverByPromote = replicasToFailoverByPromote;
    return this;
  }

  public TabletTaskInfoForListTabletTaskOutput addReplicasToFailoverByPromoteItem(ReplicasToFailoverByPromoteForListTabletTaskOutput replicasToFailoverByPromoteItem) {
    if (this.replicasToFailoverByPromote == null) {
      this.replicasToFailoverByPromote = new ArrayList<ReplicasToFailoverByPromoteForListTabletTaskOutput>();
    }
    this.replicasToFailoverByPromote.add(replicasToFailoverByPromoteItem);
    return this;
  }

   /**
   * Get replicasToFailoverByPromote
   * @return replicasToFailoverByPromote
  **/
  @Valid
  @Schema(description = "")
  public List<ReplicasToFailoverByPromoteForListTabletTaskOutput> getReplicasToFailoverByPromote() {
    return replicasToFailoverByPromote;
  }

  public void setReplicasToFailoverByPromote(List<ReplicasToFailoverByPromoteForListTabletTaskOutput> replicasToFailoverByPromote) {
    this.replicasToFailoverByPromote = replicasToFailoverByPromote;
  }

  public TabletTaskInfoForListTabletTaskOutput replicasToFailoverByReopen(List<ReplicasToFailoverByReopenForListTabletTaskOutput> replicasToFailoverByReopen) {
    this.replicasToFailoverByReopen = replicasToFailoverByReopen;
    return this;
  }

  public TabletTaskInfoForListTabletTaskOutput addReplicasToFailoverByReopenItem(ReplicasToFailoverByReopenForListTabletTaskOutput replicasToFailoverByReopenItem) {
    if (this.replicasToFailoverByReopen == null) {
      this.replicasToFailoverByReopen = new ArrayList<ReplicasToFailoverByReopenForListTabletTaskOutput>();
    }
    this.replicasToFailoverByReopen.add(replicasToFailoverByReopenItem);
    return this;
  }

   /**
   * Get replicasToFailoverByReopen
   * @return replicasToFailoverByReopen
  **/
  @Valid
  @Schema(description = "")
  public List<ReplicasToFailoverByReopenForListTabletTaskOutput> getReplicasToFailoverByReopen() {
    return replicasToFailoverByReopen;
  }

  public void setReplicasToFailoverByReopen(List<ReplicasToFailoverByReopenForListTabletTaskOutput> replicasToFailoverByReopen) {
    this.replicasToFailoverByReopen = replicasToFailoverByReopen;
  }

  public TabletTaskInfoForListTabletTaskOutput replicasToOpenOrAdd(List<ReplicasToOpenOrAddForListTabletTaskOutput> replicasToOpenOrAdd) {
    this.replicasToOpenOrAdd = replicasToOpenOrAdd;
    return this;
  }

  public TabletTaskInfoForListTabletTaskOutput addReplicasToOpenOrAddItem(ReplicasToOpenOrAddForListTabletTaskOutput replicasToOpenOrAddItem) {
    if (this.replicasToOpenOrAdd == null) {
      this.replicasToOpenOrAdd = new ArrayList<ReplicasToOpenOrAddForListTabletTaskOutput>();
    }
    this.replicasToOpenOrAdd.add(replicasToOpenOrAddItem);
    return this;
  }

   /**
   * Get replicasToOpenOrAdd
   * @return replicasToOpenOrAdd
  **/
  @Valid
  @Schema(description = "")
  public List<ReplicasToOpenOrAddForListTabletTaskOutput> getReplicasToOpenOrAdd() {
    return replicasToOpenOrAdd;
  }

  public void setReplicasToOpenOrAdd(List<ReplicasToOpenOrAddForListTabletTaskOutput> replicasToOpenOrAdd) {
    this.replicasToOpenOrAdd = replicasToOpenOrAdd;
  }

  public TabletTaskInfoForListTabletTaskOutput startTime(Long startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * Get startTime
   * @return startTime
  **/
  @Schema(description = "")
  public Long getStartTime() {
    return startTime;
  }

  public void setStartTime(Long startTime) {
    this.startTime = startTime;
  }

  public TabletTaskInfoForListTabletTaskOutput tabletToMerge(TabletToMergeForListTabletTaskOutput tabletToMerge) {
    this.tabletToMerge = tabletToMerge;
    return this;
  }

   /**
   * Get tabletToMerge
   * @return tabletToMerge
  **/
  @Valid
  @Schema(description = "")
  public TabletToMergeForListTabletTaskOutput getTabletToMerge() {
    return tabletToMerge;
  }

  public void setTabletToMerge(TabletToMergeForListTabletTaskOutput tabletToMerge) {
    this.tabletToMerge = tabletToMerge;
  }

  public TabletTaskInfoForListTabletTaskOutput tabletToSplit(TabletToSplitForListTabletTaskOutput tabletToSplit) {
    this.tabletToSplit = tabletToSplit;
    return this;
  }

   /**
   * Get tabletToSplit
   * @return tabletToSplit
  **/
  @Valid
  @Schema(description = "")
  public TabletToSplitForListTabletTaskOutput getTabletToSplit() {
    return tabletToSplit;
  }

  public void setTabletToSplit(TabletToSplitForListTabletTaskOutput tabletToSplit) {
    this.tabletToSplit = tabletToSplit;
  }

  public TabletTaskInfoForListTabletTaskOutput tabletsToDelete(List<TabletsToDeleteForListTabletTaskOutput> tabletsToDelete) {
    this.tabletsToDelete = tabletsToDelete;
    return this;
  }

  public TabletTaskInfoForListTabletTaskOutput addTabletsToDeleteItem(TabletsToDeleteForListTabletTaskOutput tabletsToDeleteItem) {
    if (this.tabletsToDelete == null) {
      this.tabletsToDelete = new ArrayList<TabletsToDeleteForListTabletTaskOutput>();
    }
    this.tabletsToDelete.add(tabletsToDeleteItem);
    return this;
  }

   /**
   * Get tabletsToDelete
   * @return tabletsToDelete
  **/
  @Valid
  @Schema(description = "")
  public List<TabletsToDeleteForListTabletTaskOutput> getTabletsToDelete() {
    return tabletsToDelete;
  }

  public void setTabletsToDelete(List<TabletsToDeleteForListTabletTaskOutput> tabletsToDelete) {
    this.tabletsToDelete = tabletsToDelete;
  }

  public TabletTaskInfoForListTabletTaskOutput taskId(Long taskId) {
    this.taskId = taskId;
    return this;
  }

   /**
   * Get taskId
   * @return taskId
  **/
  @Schema(description = "")
  public Long getTaskId() {
    return taskId;
  }

  public void setTaskId(Long taskId) {
    this.taskId = taskId;
  }

  public TabletTaskInfoForListTabletTaskOutput taskType(String taskType) {
    this.taskType = taskType;
    return this;
  }

   /**
   * Get taskType
   * @return taskType
  **/
  @Schema(description = "")
  public String getTaskType() {
    return taskType;
  }

  public void setTaskType(String taskType) {
    this.taskType = taskType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TabletTaskInfoForListTabletTaskOutput tabletTaskInfoForListTabletTaskOutput = (TabletTaskInfoForListTabletTaskOutput) o;
    return Objects.equals(this.enqueueTime, tabletTaskInfoForListTabletTaskOutput.enqueueTime) &&
        Objects.equals(this.reason, tabletTaskInfoForListTabletTaskOutput.reason) &&
        Objects.equals(this.replicasToClose, tabletTaskInfoForListTabletTaskOutput.replicasToClose) &&
        Objects.equals(this.replicasToDelete, tabletTaskInfoForListTabletTaskOutput.replicasToDelete) &&
        Objects.equals(this.replicasToFailoverByPromote, tabletTaskInfoForListTabletTaskOutput.replicasToFailoverByPromote) &&
        Objects.equals(this.replicasToFailoverByReopen, tabletTaskInfoForListTabletTaskOutput.replicasToFailoverByReopen) &&
        Objects.equals(this.replicasToOpenOrAdd, tabletTaskInfoForListTabletTaskOutput.replicasToOpenOrAdd) &&
        Objects.equals(this.startTime, tabletTaskInfoForListTabletTaskOutput.startTime) &&
        Objects.equals(this.tabletToMerge, tabletTaskInfoForListTabletTaskOutput.tabletToMerge) &&
        Objects.equals(this.tabletToSplit, tabletTaskInfoForListTabletTaskOutput.tabletToSplit) &&
        Objects.equals(this.tabletsToDelete, tabletTaskInfoForListTabletTaskOutput.tabletsToDelete) &&
        Objects.equals(this.taskId, tabletTaskInfoForListTabletTaskOutput.taskId) &&
        Objects.equals(this.taskType, tabletTaskInfoForListTabletTaskOutput.taskType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enqueueTime, reason, replicasToClose, replicasToDelete, replicasToFailoverByPromote, replicasToFailoverByReopen, replicasToOpenOrAdd, startTime, tabletToMerge, tabletToSplit, tabletsToDelete, taskId, taskType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TabletTaskInfoForListTabletTaskOutput {\n");
    
    sb.append("    enqueueTime: ").append(toIndentedString(enqueueTime)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    replicasToClose: ").append(toIndentedString(replicasToClose)).append("\n");
    sb.append("    replicasToDelete: ").append(toIndentedString(replicasToDelete)).append("\n");
    sb.append("    replicasToFailoverByPromote: ").append(toIndentedString(replicasToFailoverByPromote)).append("\n");
    sb.append("    replicasToFailoverByReopen: ").append(toIndentedString(replicasToFailoverByReopen)).append("\n");
    sb.append("    replicasToOpenOrAdd: ").append(toIndentedString(replicasToOpenOrAdd)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    tabletToMerge: ").append(toIndentedString(tabletToMerge)).append("\n");
    sb.append("    tabletToSplit: ").append(toIndentedString(tabletToSplit)).append("\n");
    sb.append("    tabletsToDelete: ").append(toIndentedString(tabletsToDelete)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    taskType: ").append(toIndentedString(taskType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
