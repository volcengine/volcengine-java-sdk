/*
 * vikingdb
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vikingdb.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.vikingdb.model.FieldForCreateVikingdbCollectionInput;
import com.volcengine.vikingdb.model.TagForCreateVikingdbCollectionInput;
import com.volcengine.vikingdb.model.VectorizeForCreateVikingdbCollectionInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * CreateVikingdbCollectionRequest
 */



public class CreateVikingdbCollectionRequest {
  @SerializedName("CollectionName")
  private String collectionName = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("Fields")
  private List<FieldForCreateVikingdbCollectionInput> fields = null;

  @SerializedName("ProjectName")
  private String projectName = null;

  @SerializedName("Tags")
  private List<TagForCreateVikingdbCollectionInput> tags = null;

  @SerializedName("Vectorize")
  private VectorizeForCreateVikingdbCollectionInput vectorize = null;

  public CreateVikingdbCollectionRequest collectionName(String collectionName) {
    this.collectionName = collectionName;
    return this;
  }

   /**
   * Get collectionName
   * @return collectionName
  **/
  @NotNull
 @Size(min=1,max=128)  @Schema(required = true, description = "")
  public String getCollectionName() {
    return collectionName;
  }

  public void setCollectionName(String collectionName) {
    this.collectionName = collectionName;
  }

  public CreateVikingdbCollectionRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
 @Size(max=65535)  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CreateVikingdbCollectionRequest fields(List<FieldForCreateVikingdbCollectionInput> fields) {
    this.fields = fields;
    return this;
  }

  public CreateVikingdbCollectionRequest addFieldsItem(FieldForCreateVikingdbCollectionInput fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<FieldForCreateVikingdbCollectionInput>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * Get fields
   * @return fields
  **/
  @Valid
  @Schema(description = "")
  public List<FieldForCreateVikingdbCollectionInput> getFields() {
    return fields;
  }

  public void setFields(List<FieldForCreateVikingdbCollectionInput> fields) {
    this.fields = fields;
  }

  public CreateVikingdbCollectionRequest projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
 @Size(min=1)  @Schema(description = "")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public CreateVikingdbCollectionRequest tags(List<TagForCreateVikingdbCollectionInput> tags) {
    this.tags = tags;
    return this;
  }

  public CreateVikingdbCollectionRequest addTagsItem(TagForCreateVikingdbCollectionInput tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<TagForCreateVikingdbCollectionInput>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Valid
  @Schema(description = "")
  public List<TagForCreateVikingdbCollectionInput> getTags() {
    return tags;
  }

  public void setTags(List<TagForCreateVikingdbCollectionInput> tags) {
    this.tags = tags;
  }

  public CreateVikingdbCollectionRequest vectorize(VectorizeForCreateVikingdbCollectionInput vectorize) {
    this.vectorize = vectorize;
    return this;
  }

   /**
   * Get vectorize
   * @return vectorize
  **/
  @Valid
  @Schema(description = "")
  public VectorizeForCreateVikingdbCollectionInput getVectorize() {
    return vectorize;
  }

  public void setVectorize(VectorizeForCreateVikingdbCollectionInput vectorize) {
    this.vectorize = vectorize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateVikingdbCollectionRequest createVikingdbCollectionRequest = (CreateVikingdbCollectionRequest) o;
    return Objects.equals(this.collectionName, createVikingdbCollectionRequest.collectionName) &&
        Objects.equals(this.description, createVikingdbCollectionRequest.description) &&
        Objects.equals(this.fields, createVikingdbCollectionRequest.fields) &&
        Objects.equals(this.projectName, createVikingdbCollectionRequest.projectName) &&
        Objects.equals(this.tags, createVikingdbCollectionRequest.tags) &&
        Objects.equals(this.vectorize, createVikingdbCollectionRequest.vectorize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collectionName, description, fields, projectName, tags, vectorize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateVikingdbCollectionRequest {\n");
    
    sb.append("    collectionName: ").append(toIndentedString(collectionName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    vectorize: ").append(toIndentedString(vectorize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
