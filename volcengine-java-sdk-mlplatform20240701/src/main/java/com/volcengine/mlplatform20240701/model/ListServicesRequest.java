/*
 * ml_platform20240701
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.mlplatform20240701.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ListServicesRequest
 */



public class ListServicesRequest {
  @SerializedName("CreateTimeAfter")
  private String createTimeAfter = null;

  @SerializedName("CreateTimeBefore")
  private String createTimeBefore = null;

  @SerializedName("NameContains")
  private String nameContains = null;

  @SerializedName("PageNumber")
  private Integer pageNumber = null;

  @SerializedName("PageSize")
  private Integer pageSize = null;

  @SerializedName("ProjectName")
  private String projectName = null;

  /**
   * Gets or Sets sortBy
   */
  @JsonAdapter(SortByEnum.Adapter.class)
  public enum SortByEnum {
    @SerializedName("CreateTime")
    CREATETIME("CreateTime");

    private String value;

    SortByEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SortByEnum fromValue(String input) {
      for (SortByEnum b : SortByEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SortByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortByEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SortByEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SortByEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("SortBy")
  private SortByEnum sortBy = null;

  /**
   * Gets or Sets sortOrder
   */
  @JsonAdapter(SortOrderEnum.Adapter.class)
  public enum SortOrderEnum {
    @SerializedName("Ascend")
    ASCEND("Ascend"),
    @SerializedName("Descend")
    DESCEND("Descend");

    private String value;

    SortOrderEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SortOrderEnum fromValue(String input) {
      for (SortOrderEnum b : SortOrderEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SortOrderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortOrderEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SortOrderEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SortOrderEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("SortOrder")
  private SortOrderEnum sortOrder = null;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    @SerializedName("None")
    NONE("None"),
    @SerializedName("Creating")
    CREATING("Creating"),
    @SerializedName("Inservice")
    INSERVICE("Inservice"),
    @SerializedName("Stopping")
    STOPPING("Stopping"),
    @SerializedName("Stopped")
    STOPPED("Stopped"),
    @SerializedName("Deleting")
    DELETING("Deleting"),
    @SerializedName("Abnormal")
    ABNORMAL("Abnormal"),
    @SerializedName("Staging")
    STAGING("Staging"),
    @SerializedName("Deleted")
    DELETED("Deleted");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StateEnum fromValue(String input) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StateEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("State")
  private StateEnum state = null;

  @SerializedName("UpdateTimeAfter")
  private String updateTimeAfter = null;

  @SerializedName("UpdateTimeBefore")
  private String updateTimeBefore = null;

  public ListServicesRequest createTimeAfter(String createTimeAfter) {
    this.createTimeAfter = createTimeAfter;
    return this;
  }

   /**
   * Get createTimeAfter
   * @return createTimeAfter
  **/
  @Schema(description = "")
  public String getCreateTimeAfter() {
    return createTimeAfter;
  }

  public void setCreateTimeAfter(String createTimeAfter) {
    this.createTimeAfter = createTimeAfter;
  }

  public ListServicesRequest createTimeBefore(String createTimeBefore) {
    this.createTimeBefore = createTimeBefore;
    return this;
  }

   /**
   * Get createTimeBefore
   * @return createTimeBefore
  **/
  @Schema(description = "")
  public String getCreateTimeBefore() {
    return createTimeBefore;
  }

  public void setCreateTimeBefore(String createTimeBefore) {
    this.createTimeBefore = createTimeBefore;
  }

  public ListServicesRequest nameContains(String nameContains) {
    this.nameContains = nameContains;
    return this;
  }

   /**
   * Get nameContains
   * @return nameContains
  **/
  @Schema(description = "")
  public String getNameContains() {
    return nameContains;
  }

  public void setNameContains(String nameContains) {
    this.nameContains = nameContains;
  }

  public ListServicesRequest pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

   /**
   * Get pageNumber
   * @return pageNumber
  **/
  @Schema(description = "")
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }

  public ListServicesRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * minimum: 10
   * maximum: 100
   * @return pageSize
  **/
 @Min(10) @Max(100)  @Schema(description = "")
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }

  public ListServicesRequest projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
 @Size(min=1,max=64)  @Schema(description = "")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public ListServicesRequest sortBy(SortByEnum sortBy) {
    this.sortBy = sortBy;
    return this;
  }

   /**
   * Get sortBy
   * @return sortBy
  **/
  @Schema(description = "")
  public SortByEnum getSortBy() {
    return sortBy;
  }

  public void setSortBy(SortByEnum sortBy) {
    this.sortBy = sortBy;
  }

  public ListServicesRequest sortOrder(SortOrderEnum sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

   /**
   * Get sortOrder
   * @return sortOrder
  **/
  @Schema(description = "")
  public SortOrderEnum getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(SortOrderEnum sortOrder) {
    this.sortOrder = sortOrder;
  }

  public ListServicesRequest state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @Schema(description = "")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public ListServicesRequest updateTimeAfter(String updateTimeAfter) {
    this.updateTimeAfter = updateTimeAfter;
    return this;
  }

   /**
   * Get updateTimeAfter
   * @return updateTimeAfter
  **/
  @Schema(description = "")
  public String getUpdateTimeAfter() {
    return updateTimeAfter;
  }

  public void setUpdateTimeAfter(String updateTimeAfter) {
    this.updateTimeAfter = updateTimeAfter;
  }

  public ListServicesRequest updateTimeBefore(String updateTimeBefore) {
    this.updateTimeBefore = updateTimeBefore;
    return this;
  }

   /**
   * Get updateTimeBefore
   * @return updateTimeBefore
  **/
  @Schema(description = "")
  public String getUpdateTimeBefore() {
    return updateTimeBefore;
  }

  public void setUpdateTimeBefore(String updateTimeBefore) {
    this.updateTimeBefore = updateTimeBefore;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListServicesRequest listServicesRequest = (ListServicesRequest) o;
    return Objects.equals(this.createTimeAfter, listServicesRequest.createTimeAfter) &&
        Objects.equals(this.createTimeBefore, listServicesRequest.createTimeBefore) &&
        Objects.equals(this.nameContains, listServicesRequest.nameContains) &&
        Objects.equals(this.pageNumber, listServicesRequest.pageNumber) &&
        Objects.equals(this.pageSize, listServicesRequest.pageSize) &&
        Objects.equals(this.projectName, listServicesRequest.projectName) &&
        Objects.equals(this.sortBy, listServicesRequest.sortBy) &&
        Objects.equals(this.sortOrder, listServicesRequest.sortOrder) &&
        Objects.equals(this.state, listServicesRequest.state) &&
        Objects.equals(this.updateTimeAfter, listServicesRequest.updateTimeAfter) &&
        Objects.equals(this.updateTimeBefore, listServicesRequest.updateTimeBefore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTimeAfter, createTimeBefore, nameContains, pageNumber, pageSize, projectName, sortBy, sortOrder, state, updateTimeAfter, updateTimeBefore);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListServicesRequest {\n");
    
    sb.append("    createTimeAfter: ").append(toIndentedString(createTimeAfter)).append("\n");
    sb.append("    createTimeBefore: ").append(toIndentedString(createTimeBefore)).append("\n");
    sb.append("    nameContains: ").append(toIndentedString(nameContains)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    sortBy: ").append(toIndentedString(sortBy)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updateTimeAfter: ").append(toIndentedString(updateTimeAfter)).append("\n");
    sb.append("    updateTimeBefore: ").append(toIndentedString(updateTimeBefore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
