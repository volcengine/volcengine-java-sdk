/*
 * vke
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vke.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.vke.model.StatusForListAddonsInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * FilterForListAddonsInput
 */


public class FilterForListAddonsInput {
  @SerializedName("ClusterIds")
  private List<String> clusterIds = null;

  @SerializedName("CreateClientToken")
  private String createClientToken = null;

  /**
   * Gets or Sets deployModes
   */
  @JsonAdapter(DeployModesEnum.Adapter.class)
  public enum DeployModesEnum {
    MANAGED("Managed"),
    UNMANAGED("Unmanaged");

    private String value;

    DeployModesEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DeployModesEnum fromValue(String input) {
      for (DeployModesEnum b : DeployModesEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DeployModesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeployModesEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public DeployModesEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return DeployModesEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("DeployModes")
  private List<DeployModesEnum> deployModes = null;

  /**
   * Gets or Sets deployNodeTypes
   */
  @JsonAdapter(DeployNodeTypesEnum.Adapter.class)
  public enum DeployNodeTypesEnum {
    EDGENODE("EdgeNode"),
    NODE("Node"),
    VIRTUALNODE("VirtualNode");

    private String value;

    DeployNodeTypesEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DeployNodeTypesEnum fromValue(String input) {
      for (DeployNodeTypesEnum b : DeployNodeTypesEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DeployNodeTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeployNodeTypesEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public DeployNodeTypesEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return DeployNodeTypesEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("DeployNodeTypes")
  private List<DeployNodeTypesEnum> deployNodeTypes = null;

  @SerializedName("Names")
  private List<String> names = null;

  @SerializedName("Statuses")
  private List<StatusForListAddonsInput> statuses = null;

  @SerializedName("UpdateClientToken")
  private String updateClientToken = null;

  public FilterForListAddonsInput clusterIds(List<String> clusterIds) {
    this.clusterIds = clusterIds;
    return this;
  }

  public FilterForListAddonsInput addClusterIdsItem(String clusterIdsItem) {
    if (this.clusterIds == null) {
      this.clusterIds = new ArrayList<String>();
    }
    this.clusterIds.add(clusterIdsItem);
    return this;
  }

   /**
   * Get clusterIds
   * @return clusterIds
  **/
  @Schema(description = "")
  public List<String> getClusterIds() {
    return clusterIds;
  }

  public void setClusterIds(List<String> clusterIds) {
    this.clusterIds = clusterIds;
  }

  public FilterForListAddonsInput createClientToken(String createClientToken) {
    this.createClientToken = createClientToken;
    return this;
  }

   /**
   * Get createClientToken
   * @return createClientToken
  **/
  @Schema(description = "")
  public String getCreateClientToken() {
    return createClientToken;
  }

  public void setCreateClientToken(String createClientToken) {
    this.createClientToken = createClientToken;
  }

  public FilterForListAddonsInput deployModes(List<DeployModesEnum> deployModes) {
    this.deployModes = deployModes;
    return this;
  }

  public FilterForListAddonsInput addDeployModesItem(DeployModesEnum deployModesItem) {
    if (this.deployModes == null) {
      this.deployModes = new ArrayList<DeployModesEnum>();
    }
    this.deployModes.add(deployModesItem);
    return this;
  }

   /**
   * Get deployModes
   * @return deployModes
  **/
  @Schema(description = "")
  public List<DeployModesEnum> getDeployModes() {
    return deployModes;
  }

  public void setDeployModes(List<DeployModesEnum> deployModes) {
    this.deployModes = deployModes;
  }

  public FilterForListAddonsInput deployNodeTypes(List<DeployNodeTypesEnum> deployNodeTypes) {
    this.deployNodeTypes = deployNodeTypes;
    return this;
  }

  public FilterForListAddonsInput addDeployNodeTypesItem(DeployNodeTypesEnum deployNodeTypesItem) {
    if (this.deployNodeTypes == null) {
      this.deployNodeTypes = new ArrayList<DeployNodeTypesEnum>();
    }
    this.deployNodeTypes.add(deployNodeTypesItem);
    return this;
  }

   /**
   * Get deployNodeTypes
   * @return deployNodeTypes
  **/
  @Schema(description = "")
  public List<DeployNodeTypesEnum> getDeployNodeTypes() {
    return deployNodeTypes;
  }

  public void setDeployNodeTypes(List<DeployNodeTypesEnum> deployNodeTypes) {
    this.deployNodeTypes = deployNodeTypes;
  }

  public FilterForListAddonsInput names(List<String> names) {
    this.names = names;
    return this;
  }

  public FilterForListAddonsInput addNamesItem(String namesItem) {
    if (this.names == null) {
      this.names = new ArrayList<String>();
    }
    this.names.add(namesItem);
    return this;
  }

   /**
   * Get names
   * @return names
  **/
  @Schema(description = "")
  public List<String> getNames() {
    return names;
  }

  public void setNames(List<String> names) {
    this.names = names;
  }

  public FilterForListAddonsInput statuses(List<StatusForListAddonsInput> statuses) {
    this.statuses = statuses;
    return this;
  }

  public FilterForListAddonsInput addStatusesItem(StatusForListAddonsInput statusesItem) {
    if (this.statuses == null) {
      this.statuses = new ArrayList<StatusForListAddonsInput>();
    }
    this.statuses.add(statusesItem);
    return this;
  }

   /**
   * Get statuses
   * @return statuses
  **/
  @Valid
  @Schema(description = "")
  public List<StatusForListAddonsInput> getStatuses() {
    return statuses;
  }

  public void setStatuses(List<StatusForListAddonsInput> statuses) {
    this.statuses = statuses;
  }

  public FilterForListAddonsInput updateClientToken(String updateClientToken) {
    this.updateClientToken = updateClientToken;
    return this;
  }

   /**
   * Get updateClientToken
   * @return updateClientToken
  **/
  @Schema(description = "")
  public String getUpdateClientToken() {
    return updateClientToken;
  }

  public void setUpdateClientToken(String updateClientToken) {
    this.updateClientToken = updateClientToken;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterForListAddonsInput filterForListAddonsInput = (FilterForListAddonsInput) o;
    return Objects.equals(this.clusterIds, filterForListAddonsInput.clusterIds) &&
        Objects.equals(this.createClientToken, filterForListAddonsInput.createClientToken) &&
        Objects.equals(this.deployModes, filterForListAddonsInput.deployModes) &&
        Objects.equals(this.deployNodeTypes, filterForListAddonsInput.deployNodeTypes) &&
        Objects.equals(this.names, filterForListAddonsInput.names) &&
        Objects.equals(this.statuses, filterForListAddonsInput.statuses) &&
        Objects.equals(this.updateClientToken, filterForListAddonsInput.updateClientToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterIds, createClientToken, deployModes, deployNodeTypes, names, statuses, updateClientToken);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterForListAddonsInput {\n");
    
    sb.append("    clusterIds: ").append(toIndentedString(clusterIds)).append("\n");
    sb.append("    createClientToken: ").append(toIndentedString(createClientToken)).append("\n");
    sb.append("    deployModes: ").append(toIndentedString(deployModes)).append("\n");
    sb.append("    deployNodeTypes: ").append(toIndentedString(deployNodeTypes)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("    updateClientToken: ").append(toIndentedString(updateClientToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
