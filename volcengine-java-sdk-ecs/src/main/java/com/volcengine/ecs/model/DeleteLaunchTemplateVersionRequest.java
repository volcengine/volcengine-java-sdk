/*
 * ecs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.ecs.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DeleteLaunchTemplateVersionRequest
 */



public class DeleteLaunchTemplateVersionRequest {
  @SerializedName("DeleteVersions")
  private List<Integer> deleteVersions = null;

  @SerializedName("LaunchTemplateId")
  private String launchTemplateId = null;

  @SerializedName("LaunchTemplateName")
  private String launchTemplateName = null;

  public DeleteLaunchTemplateVersionRequest deleteVersions(List<Integer> deleteVersions) {
    this.deleteVersions = deleteVersions;
    return this;
  }

  public DeleteLaunchTemplateVersionRequest addDeleteVersionsItem(Integer deleteVersionsItem) {
    if (this.deleteVersions == null) {
      this.deleteVersions = new ArrayList<Integer>();
    }
    this.deleteVersions.add(deleteVersionsItem);
    return this;
  }

   /**
   * Get deleteVersions
   * @return deleteVersions
  **/
  @Schema(description = "")
  public List<Integer> getDeleteVersions() {
    return deleteVersions;
  }

  public void setDeleteVersions(List<Integer> deleteVersions) {
    this.deleteVersions = deleteVersions;
  }

  public DeleteLaunchTemplateVersionRequest launchTemplateId(String launchTemplateId) {
    this.launchTemplateId = launchTemplateId;
    return this;
  }

   /**
   * Get launchTemplateId
   * @return launchTemplateId
  **/
  @Schema(description = "")
  public String getLaunchTemplateId() {
    return launchTemplateId;
  }

  public void setLaunchTemplateId(String launchTemplateId) {
    this.launchTemplateId = launchTemplateId;
  }

  public DeleteLaunchTemplateVersionRequest launchTemplateName(String launchTemplateName) {
    this.launchTemplateName = launchTemplateName;
    return this;
  }

   /**
   * Get launchTemplateName
   * @return launchTemplateName
  **/
  @Schema(description = "")
  public String getLaunchTemplateName() {
    return launchTemplateName;
  }

  public void setLaunchTemplateName(String launchTemplateName) {
    this.launchTemplateName = launchTemplateName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeleteLaunchTemplateVersionRequest deleteLaunchTemplateVersionRequest = (DeleteLaunchTemplateVersionRequest) o;
    return Objects.equals(this.deleteVersions, deleteLaunchTemplateVersionRequest.deleteVersions) &&
        Objects.equals(this.launchTemplateId, deleteLaunchTemplateVersionRequest.launchTemplateId) &&
        Objects.equals(this.launchTemplateName, deleteLaunchTemplateVersionRequest.launchTemplateName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deleteVersions, launchTemplateId, launchTemplateName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeleteLaunchTemplateVersionRequest {\n");
    
    sb.append("    deleteVersions: ").append(toIndentedString(deleteVersions)).append("\n");
    sb.append("    launchTemplateId: ").append(toIndentedString(launchTemplateId)).append("\n");
    sb.append("    launchTemplateName: ").append(toIndentedString(launchTemplateName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
