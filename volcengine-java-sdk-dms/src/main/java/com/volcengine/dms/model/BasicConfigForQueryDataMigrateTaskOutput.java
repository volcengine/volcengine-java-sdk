/*
 * dms
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.dms.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.dms.model.ObjectMigrationPolicyForQueryDataMigrateTaskOutput;
import com.volcengine.dms.model.OfflineMigrationPolicyForQueryDataMigrateTaskOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * BasicConfigForQueryDataMigrateTaskOutput
 */



public class BasicConfigForQueryDataMigrateTaskOutput {
  @SerializedName("Bandwidth")
  private Long bandwidth = null;

  @SerializedName("EnableRangeCheck")
  private Boolean enableRangeCheck = null;

  @SerializedName("FailedNumToAbort")
  private Integer failedNumToAbort = null;

  @SerializedName("ObjectMigrationPolicy")
  private ObjectMigrationPolicyForQueryDataMigrateTaskOutput objectMigrationPolicy = null;

  @SerializedName("OfflineMigrationPolicy")
  private OfflineMigrationPolicyForQueryDataMigrateTaskOutput offlineMigrationPolicy = null;

  /**
   * Gets or Sets overwritePolicy
   */
  @JsonAdapter(OverwritePolicyEnum.Adapter.class)
  public enum OverwritePolicyEnum {
    @SerializedName("Force")
    FORCE("Force"),
    @SerializedName("None")
    NONE("None"),
    @SerializedName("LastModify")
    LASTMODIFY("LastModify");

    private String value;

    OverwritePolicyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OverwritePolicyEnum fromValue(String input) {
      for (OverwritePolicyEnum b : OverwritePolicyEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OverwritePolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OverwritePolicyEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public OverwritePolicyEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return OverwritePolicyEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("OverwritePolicy")
  private OverwritePolicyEnum overwritePolicy = null;

  /**
   * Gets or Sets sourceType
   */
  @JsonAdapter(SourceTypeEnum.Adapter.class)
  public enum SourceTypeEnum {
    @SerializedName("StorageTypeObject")
    STORAGETYPEOBJECT("StorageTypeObject"),
    @SerializedName("StorageTypeUrl")
    STORAGETYPEURL("StorageTypeUrl");

    private String value;

    SourceTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SourceTypeEnum fromValue(String input) {
      for (SourceTypeEnum b : SourceTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SourceTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("SourceType")
  private SourceTypeEnum sourceType = null;

  /**
   * Gets or Sets storageClass
   */
  @JsonAdapter(StorageClassEnum.Adapter.class)
  public enum StorageClassEnum {
    @SerializedName("Standard")
    STANDARD("Standard"),
    @SerializedName("InheritSource")
    INHERITSOURCE("InheritSource"),
    @SerializedName("Ia")
    IA("Ia"),
    @SerializedName("ArchiveFr")
    ARCHIVEFR("ArchiveFr"),
    @SerializedName("IntelligentTiering")
    INTELLIGENTTIERING("IntelligentTiering"),
    @SerializedName("ColdArchive")
    COLDARCHIVE("ColdArchive"),
    @SerializedName("Archive")
    ARCHIVE("Archive"),
    @SerializedName("DeepColdArchive")
    DEEPCOLDARCHIVE("DeepColdArchive");

    private String value;

    StorageClassEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StorageClassEnum fromValue(String input) {
      for (StorageClassEnum b : StorageClassEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StorageClassEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StorageClassEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StorageClassEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StorageClassEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("StorageClass")
  private StorageClassEnum storageClass = null;

  @SerializedName("TaskName")
  private String taskName = null;

  public BasicConfigForQueryDataMigrateTaskOutput bandwidth(Long bandwidth) {
    this.bandwidth = bandwidth;
    return this;
  }

   /**
   * Get bandwidth
   * @return bandwidth
  **/
  @Schema(description = "")
  public Long getBandwidth() {
    return bandwidth;
  }

  public void setBandwidth(Long bandwidth) {
    this.bandwidth = bandwidth;
  }

  public BasicConfigForQueryDataMigrateTaskOutput enableRangeCheck(Boolean enableRangeCheck) {
    this.enableRangeCheck = enableRangeCheck;
    return this;
  }

   /**
   * Get enableRangeCheck
   * @return enableRangeCheck
  **/
  @Schema(description = "")
  public Boolean isEnableRangeCheck() {
    return enableRangeCheck;
  }

  public void setEnableRangeCheck(Boolean enableRangeCheck) {
    this.enableRangeCheck = enableRangeCheck;
  }

  public BasicConfigForQueryDataMigrateTaskOutput failedNumToAbort(Integer failedNumToAbort) {
    this.failedNumToAbort = failedNumToAbort;
    return this;
  }

   /**
   * Get failedNumToAbort
   * minimum: -1
   * @return failedNumToAbort
  **/
 @Min(-1)  @Schema(description = "")
  public Integer getFailedNumToAbort() {
    return failedNumToAbort;
  }

  public void setFailedNumToAbort(Integer failedNumToAbort) {
    this.failedNumToAbort = failedNumToAbort;
  }

  public BasicConfigForQueryDataMigrateTaskOutput objectMigrationPolicy(ObjectMigrationPolicyForQueryDataMigrateTaskOutput objectMigrationPolicy) {
    this.objectMigrationPolicy = objectMigrationPolicy;
    return this;
  }

   /**
   * Get objectMigrationPolicy
   * @return objectMigrationPolicy
  **/
  @Valid
  @Schema(description = "")
  public ObjectMigrationPolicyForQueryDataMigrateTaskOutput getObjectMigrationPolicy() {
    return objectMigrationPolicy;
  }

  public void setObjectMigrationPolicy(ObjectMigrationPolicyForQueryDataMigrateTaskOutput objectMigrationPolicy) {
    this.objectMigrationPolicy = objectMigrationPolicy;
  }

  public BasicConfigForQueryDataMigrateTaskOutput offlineMigrationPolicy(OfflineMigrationPolicyForQueryDataMigrateTaskOutput offlineMigrationPolicy) {
    this.offlineMigrationPolicy = offlineMigrationPolicy;
    return this;
  }

   /**
   * Get offlineMigrationPolicy
   * @return offlineMigrationPolicy
  **/
  @Valid
  @Schema(description = "")
  public OfflineMigrationPolicyForQueryDataMigrateTaskOutput getOfflineMigrationPolicy() {
    return offlineMigrationPolicy;
  }

  public void setOfflineMigrationPolicy(OfflineMigrationPolicyForQueryDataMigrateTaskOutput offlineMigrationPolicy) {
    this.offlineMigrationPolicy = offlineMigrationPolicy;
  }

  public BasicConfigForQueryDataMigrateTaskOutput overwritePolicy(OverwritePolicyEnum overwritePolicy) {
    this.overwritePolicy = overwritePolicy;
    return this;
  }

   /**
   * Get overwritePolicy
   * @return overwritePolicy
  **/
  @Schema(description = "")
  public OverwritePolicyEnum getOverwritePolicy() {
    return overwritePolicy;
  }

  public void setOverwritePolicy(OverwritePolicyEnum overwritePolicy) {
    this.overwritePolicy = overwritePolicy;
  }

  public BasicConfigForQueryDataMigrateTaskOutput sourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
    return this;
  }

   /**
   * Get sourceType
   * @return sourceType
  **/
  @Schema(description = "")
  public SourceTypeEnum getSourceType() {
    return sourceType;
  }

  public void setSourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
  }

  public BasicConfigForQueryDataMigrateTaskOutput storageClass(StorageClassEnum storageClass) {
    this.storageClass = storageClass;
    return this;
  }

   /**
   * Get storageClass
   * @return storageClass
  **/
  @Schema(description = "")
  public StorageClassEnum getStorageClass() {
    return storageClass;
  }

  public void setStorageClass(StorageClassEnum storageClass) {
    this.storageClass = storageClass;
  }

  public BasicConfigForQueryDataMigrateTaskOutput taskName(String taskName) {
    this.taskName = taskName;
    return this;
  }

   /**
   * Get taskName
   * @return taskName
  **/
 @Size(min=3,max=32)  @Schema(description = "")
  public String getTaskName() {
    return taskName;
  }

  public void setTaskName(String taskName) {
    this.taskName = taskName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BasicConfigForQueryDataMigrateTaskOutput basicConfigForQueryDataMigrateTaskOutput = (BasicConfigForQueryDataMigrateTaskOutput) o;
    return Objects.equals(this.bandwidth, basicConfigForQueryDataMigrateTaskOutput.bandwidth) &&
        Objects.equals(this.enableRangeCheck, basicConfigForQueryDataMigrateTaskOutput.enableRangeCheck) &&
        Objects.equals(this.failedNumToAbort, basicConfigForQueryDataMigrateTaskOutput.failedNumToAbort) &&
        Objects.equals(this.objectMigrationPolicy, basicConfigForQueryDataMigrateTaskOutput.objectMigrationPolicy) &&
        Objects.equals(this.offlineMigrationPolicy, basicConfigForQueryDataMigrateTaskOutput.offlineMigrationPolicy) &&
        Objects.equals(this.overwritePolicy, basicConfigForQueryDataMigrateTaskOutput.overwritePolicy) &&
        Objects.equals(this.sourceType, basicConfigForQueryDataMigrateTaskOutput.sourceType) &&
        Objects.equals(this.storageClass, basicConfigForQueryDataMigrateTaskOutput.storageClass) &&
        Objects.equals(this.taskName, basicConfigForQueryDataMigrateTaskOutput.taskName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bandwidth, enableRangeCheck, failedNumToAbort, objectMigrationPolicy, offlineMigrationPolicy, overwritePolicy, sourceType, storageClass, taskName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BasicConfigForQueryDataMigrateTaskOutput {\n");
    
    sb.append("    bandwidth: ").append(toIndentedString(bandwidth)).append("\n");
    sb.append("    enableRangeCheck: ").append(toIndentedString(enableRangeCheck)).append("\n");
    sb.append("    failedNumToAbort: ").append(toIndentedString(failedNumToAbort)).append("\n");
    sb.append("    objectMigrationPolicy: ").append(toIndentedString(objectMigrationPolicy)).append("\n");
    sb.append("    offlineMigrationPolicy: ").append(toIndentedString(offlineMigrationPolicy)).append("\n");
    sb.append("    overwritePolicy: ").append(toIndentedString(overwritePolicy)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    storageClass: ").append(toIndentedString(storageClass)).append("\n");
    sb.append("    taskName: ").append(toIndentedString(taskName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
