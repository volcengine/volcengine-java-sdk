/*
 * cloudmonitor
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.cloudmonitor.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * NotifyTemplateForListRulesByIdsOutput
 */



public class NotifyTemplateForListRulesByIdsOutput {
  /**
   * Gets or Sets channel
   */
  @JsonAdapter(ChannelEnum.Adapter.class)
  public enum ChannelEnum {
    @SerializedName("email")
    EMAIL("email"),
    @SerializedName("sms")
    SMS("sms"),
    @SerializedName("phone")
    PHONE("phone"),
    @SerializedName("lark")
    LARK("lark"),
    @SerializedName("dingtalk")
    DINGTALK("dingtalk"),
    @SerializedName("wecom")
    WECOM("wecom"),
    @SerializedName("slack")
    SLACK("slack"),
    @SerializedName("api")
    API("api");

    private String value;

    ChannelEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ChannelEnum fromValue(String input) {
      for (ChannelEnum b : ChannelEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChannelEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ChannelEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ChannelEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("Channel")
  private ChannelEnum channel = null;

  @SerializedName("NotifyTemplateId")
  private String notifyTemplateId = null;

  public NotifyTemplateForListRulesByIdsOutput channel(ChannelEnum channel) {
    this.channel = channel;
    return this;
  }

   /**
   * Get channel
   * @return channel
  **/
  @Schema(description = "")
  public ChannelEnum getChannel() {
    return channel;
  }

  public void setChannel(ChannelEnum channel) {
    this.channel = channel;
  }

  public NotifyTemplateForListRulesByIdsOutput notifyTemplateId(String notifyTemplateId) {
    this.notifyTemplateId = notifyTemplateId;
    return this;
  }

   /**
   * Get notifyTemplateId
   * @return notifyTemplateId
  **/
  @Schema(description = "")
  public String getNotifyTemplateId() {
    return notifyTemplateId;
  }

  public void setNotifyTemplateId(String notifyTemplateId) {
    this.notifyTemplateId = notifyTemplateId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotifyTemplateForListRulesByIdsOutput notifyTemplateForListRulesByIdsOutput = (NotifyTemplateForListRulesByIdsOutput) o;
    return Objects.equals(this.channel, notifyTemplateForListRulesByIdsOutput.channel) &&
        Objects.equals(this.notifyTemplateId, notifyTemplateForListRulesByIdsOutput.notifyTemplateId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channel, notifyTemplateId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotifyTemplateForListRulesByIdsOutput {\n");
    
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    notifyTemplateId: ").append(toIndentedString(notifyTemplateId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
