/*
 * vikingdb
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vikingdb.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * VectorIndexForCreateVikingdbIndexInput
 */



public class VectorIndexForCreateVikingdbIndexInput {
  @SerializedName("CacheRatio")
  private Float cacheRatio = null;

  @SerializedName("DiskannCef")
  private Integer diskannCef = null;

  @SerializedName("DiskannM")
  private Integer diskannM = null;

  /**
   * Gets or Sets distance
   */
  @JsonAdapter(DistanceEnum.Adapter.class)
  public enum DistanceEnum {
    @SerializedName("ip")
    IP("ip"),
    @SerializedName("cosine")
    COSINE("cosine"),
    @SerializedName("l2")
    L2("l2");

    private String value;

    DistanceEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DistanceEnum fromValue(String input) {
      for (DistanceEnum b : DistanceEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DistanceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DistanceEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public DistanceEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return DistanceEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("Distance")
  private DistanceEnum distance = null;

  @SerializedName("HnswCef")
  private Integer hnswCef = null;

  @SerializedName("HnswM")
  private Integer hnswM = null;

  @SerializedName("HnswSef")
  private Integer hnswSef = null;

  /**
   * Gets or Sets indexType
   */
  @JsonAdapter(IndexTypeEnum.Adapter.class)
  public enum IndexTypeEnum {
    @SerializedName("hnsw")
    HNSW("hnsw"),
    @SerializedName("hnsw_hybrid")
    HNSW_HYBRID("hnsw_hybrid"),
    @SerializedName("flat")
    FLAT("flat"),
    @SerializedName("diskann")
    DISKANN("diskann");

    private String value;

    IndexTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static IndexTypeEnum fromValue(String input) {
      for (IndexTypeEnum b : IndexTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<IndexTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IndexTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public IndexTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return IndexTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("IndexType")
  private IndexTypeEnum indexType = null;

  @SerializedName("PqCodeRatio")
  private Float pqCodeRatio = null;

  /**
   * Gets or Sets quant
   */
  @JsonAdapter(QuantEnum.Adapter.class)
  public enum QuantEnum {
    @SerializedName("int8")
    INT8("int8"),
    @SerializedName("fix16")
    FIX16("fix16"),
    @SerializedName("float")
    FLOAT("float"),
    @SerializedName("pq")
    PQ("pq");

    private String value;

    QuantEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static QuantEnum fromValue(String input) {
      for (QuantEnum b : QuantEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<QuantEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QuantEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public QuantEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return QuantEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("Quant")
  private QuantEnum quant = null;

  public VectorIndexForCreateVikingdbIndexInput cacheRatio(Float cacheRatio) {
    this.cacheRatio = cacheRatio;
    return this;
  }

   /**
   * Get cacheRatio
   * @return cacheRatio
  **/
  @Schema(description = "")
  public Float getCacheRatio() {
    return cacheRatio;
  }

  public void setCacheRatio(Float cacheRatio) {
    this.cacheRatio = cacheRatio;
  }

  public VectorIndexForCreateVikingdbIndexInput diskannCef(Integer diskannCef) {
    this.diskannCef = diskannCef;
    return this;
  }

   /**
   * Get diskannCef
   * @return diskannCef
  **/
  @Schema(description = "")
  public Integer getDiskannCef() {
    return diskannCef;
  }

  public void setDiskannCef(Integer diskannCef) {
    this.diskannCef = diskannCef;
  }

  public VectorIndexForCreateVikingdbIndexInput diskannM(Integer diskannM) {
    this.diskannM = diskannM;
    return this;
  }

   /**
   * Get diskannM
   * @return diskannM
  **/
  @Schema(description = "")
  public Integer getDiskannM() {
    return diskannM;
  }

  public void setDiskannM(Integer diskannM) {
    this.diskannM = diskannM;
  }

  public VectorIndexForCreateVikingdbIndexInput distance(DistanceEnum distance) {
    this.distance = distance;
    return this;
  }

   /**
   * Get distance
   * @return distance
  **/
  @Schema(description = "")
  public DistanceEnum getDistance() {
    return distance;
  }

  public void setDistance(DistanceEnum distance) {
    this.distance = distance;
  }

  public VectorIndexForCreateVikingdbIndexInput hnswCef(Integer hnswCef) {
    this.hnswCef = hnswCef;
    return this;
  }

   /**
   * Get hnswCef
   * @return hnswCef
  **/
  @Schema(description = "")
  public Integer getHnswCef() {
    return hnswCef;
  }

  public void setHnswCef(Integer hnswCef) {
    this.hnswCef = hnswCef;
  }

  public VectorIndexForCreateVikingdbIndexInput hnswM(Integer hnswM) {
    this.hnswM = hnswM;
    return this;
  }

   /**
   * Get hnswM
   * @return hnswM
  **/
  @Schema(description = "")
  public Integer getHnswM() {
    return hnswM;
  }

  public void setHnswM(Integer hnswM) {
    this.hnswM = hnswM;
  }

  public VectorIndexForCreateVikingdbIndexInput hnswSef(Integer hnswSef) {
    this.hnswSef = hnswSef;
    return this;
  }

   /**
   * Get hnswSef
   * @return hnswSef
  **/
  @Schema(description = "")
  public Integer getHnswSef() {
    return hnswSef;
  }

  public void setHnswSef(Integer hnswSef) {
    this.hnswSef = hnswSef;
  }

  public VectorIndexForCreateVikingdbIndexInput indexType(IndexTypeEnum indexType) {
    this.indexType = indexType;
    return this;
  }

   /**
   * Get indexType
   * @return indexType
  **/
  @Schema(description = "")
  public IndexTypeEnum getIndexType() {
    return indexType;
  }

  public void setIndexType(IndexTypeEnum indexType) {
    this.indexType = indexType;
  }

  public VectorIndexForCreateVikingdbIndexInput pqCodeRatio(Float pqCodeRatio) {
    this.pqCodeRatio = pqCodeRatio;
    return this;
  }

   /**
   * Get pqCodeRatio
   * @return pqCodeRatio
  **/
  @Schema(description = "")
  public Float getPqCodeRatio() {
    return pqCodeRatio;
  }

  public void setPqCodeRatio(Float pqCodeRatio) {
    this.pqCodeRatio = pqCodeRatio;
  }

  public VectorIndexForCreateVikingdbIndexInput quant(QuantEnum quant) {
    this.quant = quant;
    return this;
  }

   /**
   * Get quant
   * @return quant
  **/
  @Schema(description = "")
  public QuantEnum getQuant() {
    return quant;
  }

  public void setQuant(QuantEnum quant) {
    this.quant = quant;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VectorIndexForCreateVikingdbIndexInput vectorIndexForCreateVikingdbIndexInput = (VectorIndexForCreateVikingdbIndexInput) o;
    return Objects.equals(this.cacheRatio, vectorIndexForCreateVikingdbIndexInput.cacheRatio) &&
        Objects.equals(this.diskannCef, vectorIndexForCreateVikingdbIndexInput.diskannCef) &&
        Objects.equals(this.diskannM, vectorIndexForCreateVikingdbIndexInput.diskannM) &&
        Objects.equals(this.distance, vectorIndexForCreateVikingdbIndexInput.distance) &&
        Objects.equals(this.hnswCef, vectorIndexForCreateVikingdbIndexInput.hnswCef) &&
        Objects.equals(this.hnswM, vectorIndexForCreateVikingdbIndexInput.hnswM) &&
        Objects.equals(this.hnswSef, vectorIndexForCreateVikingdbIndexInput.hnswSef) &&
        Objects.equals(this.indexType, vectorIndexForCreateVikingdbIndexInput.indexType) &&
        Objects.equals(this.pqCodeRatio, vectorIndexForCreateVikingdbIndexInput.pqCodeRatio) &&
        Objects.equals(this.quant, vectorIndexForCreateVikingdbIndexInput.quant);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheRatio, diskannCef, diskannM, distance, hnswCef, hnswM, hnswSef, indexType, pqCodeRatio, quant);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VectorIndexForCreateVikingdbIndexInput {\n");
    
    sb.append("    cacheRatio: ").append(toIndentedString(cacheRatio)).append("\n");
    sb.append("    diskannCef: ").append(toIndentedString(diskannCef)).append("\n");
    sb.append("    diskannM: ").append(toIndentedString(diskannM)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    hnswCef: ").append(toIndentedString(hnswCef)).append("\n");
    sb.append("    hnswM: ").append(toIndentedString(hnswM)).append("\n");
    sb.append("    hnswSef: ").append(toIndentedString(hnswSef)).append("\n");
    sb.append("    indexType: ").append(toIndentedString(indexType)).append("\n");
    sb.append("    pqCodeRatio: ").append(toIndentedString(pqCodeRatio)).append("\n");
    sb.append("    quant: ").append(toIndentedString(quant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
