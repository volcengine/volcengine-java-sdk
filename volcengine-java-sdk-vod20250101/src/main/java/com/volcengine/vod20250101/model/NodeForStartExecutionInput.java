/*
 * vod20250101
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vod20250101.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.vod20250101.model.MultiInputForStartExecutionInput;
import com.volcengine.vod20250101.model.OperationForStartExecutionInput;
import com.volcengine.vod20250101.model.PolicyForStartExecutionInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * NodeForStartExecutionInput
 */



public class NodeForStartExecutionInput {
  @SerializedName("Dependencies")
  private List<String> dependencies = null;

  @SerializedName("Input")
  private MultiInputForStartExecutionInput input = null;

  @SerializedName("MultiInputs")
  private List<MultiInputForStartExecutionInput> multiInputs = null;

  @SerializedName("Name")
  private String name = null;

  @SerializedName("Operation")
  private OperationForStartExecutionInput operation = null;

  @SerializedName("Policy")
  private PolicyForStartExecutionInput policy = null;

  public NodeForStartExecutionInput dependencies(List<String> dependencies) {
    this.dependencies = dependencies;
    return this;
  }

  public NodeForStartExecutionInput addDependenciesItem(String dependenciesItem) {
    if (this.dependencies == null) {
      this.dependencies = new ArrayList<String>();
    }
    this.dependencies.add(dependenciesItem);
    return this;
  }

   /**
   * Get dependencies
   * @return dependencies
  **/
  @Schema(description = "")
  public List<String> getDependencies() {
    return dependencies;
  }

  public void setDependencies(List<String> dependencies) {
    this.dependencies = dependencies;
  }

  public NodeForStartExecutionInput input(MultiInputForStartExecutionInput input) {
    this.input = input;
    return this;
  }

   /**
   * Get input
   * @return input
  **/
  @Valid
  @Schema(description = "")
  public MultiInputForStartExecutionInput getInput() {
    return input;
  }

  public void setInput(MultiInputForStartExecutionInput input) {
    this.input = input;
  }

  public NodeForStartExecutionInput multiInputs(List<MultiInputForStartExecutionInput> multiInputs) {
    this.multiInputs = multiInputs;
    return this;
  }

  public NodeForStartExecutionInput addMultiInputsItem(MultiInputForStartExecutionInput multiInputsItem) {
    if (this.multiInputs == null) {
      this.multiInputs = new ArrayList<MultiInputForStartExecutionInput>();
    }
    this.multiInputs.add(multiInputsItem);
    return this;
  }

   /**
   * Get multiInputs
   * @return multiInputs
  **/
  @Valid
  @Schema(description = "")
  public List<MultiInputForStartExecutionInput> getMultiInputs() {
    return multiInputs;
  }

  public void setMultiInputs(List<MultiInputForStartExecutionInput> multiInputs) {
    this.multiInputs = multiInputs;
  }

  public NodeForStartExecutionInput name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public NodeForStartExecutionInput operation(OperationForStartExecutionInput operation) {
    this.operation = operation;
    return this;
  }

   /**
   * Get operation
   * @return operation
  **/
  @Valid
  @Schema(description = "")
  public OperationForStartExecutionInput getOperation() {
    return operation;
  }

  public void setOperation(OperationForStartExecutionInput operation) {
    this.operation = operation;
  }

  public NodeForStartExecutionInput policy(PolicyForStartExecutionInput policy) {
    this.policy = policy;
    return this;
  }

   /**
   * Get policy
   * @return policy
  **/
  @Valid
  @Schema(description = "")
  public PolicyForStartExecutionInput getPolicy() {
    return policy;
  }

  public void setPolicy(PolicyForStartExecutionInput policy) {
    this.policy = policy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeForStartExecutionInput nodeForStartExecutionInput = (NodeForStartExecutionInput) o;
    return Objects.equals(this.dependencies, nodeForStartExecutionInput.dependencies) &&
        Objects.equals(this.input, nodeForStartExecutionInput.input) &&
        Objects.equals(this.multiInputs, nodeForStartExecutionInput.multiInputs) &&
        Objects.equals(this.name, nodeForStartExecutionInput.name) &&
        Objects.equals(this.operation, nodeForStartExecutionInput.operation) &&
        Objects.equals(this.policy, nodeForStartExecutionInput.policy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dependencies, input, multiInputs, name, operation, policy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeForStartExecutionInput {\n");
    
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    multiInputs: ").append(toIndentedString(multiInputs)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
