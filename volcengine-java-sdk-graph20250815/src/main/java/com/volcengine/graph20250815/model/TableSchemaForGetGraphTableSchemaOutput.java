/*
 * graph20250815
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.graph20250815.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.graph20250815.model.EdgeForGetGraphTableSchemaOutput;
import com.volcengine.graph20250815.model.VertexForGetGraphTableSchemaOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * TableSchemaForGetGraphTableSchemaOutput
 */



public class TableSchemaForGetGraphTableSchemaOutput {
  @SerializedName("Edges")
  private List<EdgeForGetGraphTableSchemaOutput> edges = null;

  @SerializedName("EnableRotate")
  private Boolean enableRotate = null;

  @SerializedName("RotateSize")
  private Long rotateSize = null;

  @SerializedName("TableName")
  private String tableName = null;

  @SerializedName("Version")
  private Long version = null;

  @SerializedName("Vertexes")
  private List<VertexForGetGraphTableSchemaOutput> vertexes = null;

  public TableSchemaForGetGraphTableSchemaOutput edges(List<EdgeForGetGraphTableSchemaOutput> edges) {
    this.edges = edges;
    return this;
  }

  public TableSchemaForGetGraphTableSchemaOutput addEdgesItem(EdgeForGetGraphTableSchemaOutput edgesItem) {
    if (this.edges == null) {
      this.edges = new ArrayList<EdgeForGetGraphTableSchemaOutput>();
    }
    this.edges.add(edgesItem);
    return this;
  }

   /**
   * Get edges
   * @return edges
  **/
  @Valid
  @Schema(description = "")
  public List<EdgeForGetGraphTableSchemaOutput> getEdges() {
    return edges;
  }

  public void setEdges(List<EdgeForGetGraphTableSchemaOutput> edges) {
    this.edges = edges;
  }

  public TableSchemaForGetGraphTableSchemaOutput enableRotate(Boolean enableRotate) {
    this.enableRotate = enableRotate;
    return this;
  }

   /**
   * Get enableRotate
   * @return enableRotate
  **/
  @Schema(description = "")
  public Boolean isEnableRotate() {
    return enableRotate;
  }

  public void setEnableRotate(Boolean enableRotate) {
    this.enableRotate = enableRotate;
  }

  public TableSchemaForGetGraphTableSchemaOutput rotateSize(Long rotateSize) {
    this.rotateSize = rotateSize;
    return this;
  }

   /**
   * Get rotateSize
   * @return rotateSize
  **/
  @Schema(description = "")
  public Long getRotateSize() {
    return rotateSize;
  }

  public void setRotateSize(Long rotateSize) {
    this.rotateSize = rotateSize;
  }

  public TableSchemaForGetGraphTableSchemaOutput tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

   /**
   * Get tableName
   * @return tableName
  **/
  @Schema(description = "")
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }

  public TableSchemaForGetGraphTableSchemaOutput version(Long version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @Schema(description = "")
  public Long getVersion() {
    return version;
  }

  public void setVersion(Long version) {
    this.version = version;
  }

  public TableSchemaForGetGraphTableSchemaOutput vertexes(List<VertexForGetGraphTableSchemaOutput> vertexes) {
    this.vertexes = vertexes;
    return this;
  }

  public TableSchemaForGetGraphTableSchemaOutput addVertexesItem(VertexForGetGraphTableSchemaOutput vertexesItem) {
    if (this.vertexes == null) {
      this.vertexes = new ArrayList<VertexForGetGraphTableSchemaOutput>();
    }
    this.vertexes.add(vertexesItem);
    return this;
  }

   /**
   * Get vertexes
   * @return vertexes
  **/
  @Valid
  @Schema(description = "")
  public List<VertexForGetGraphTableSchemaOutput> getVertexes() {
    return vertexes;
  }

  public void setVertexes(List<VertexForGetGraphTableSchemaOutput> vertexes) {
    this.vertexes = vertexes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableSchemaForGetGraphTableSchemaOutput tableSchemaForGetGraphTableSchemaOutput = (TableSchemaForGetGraphTableSchemaOutput) o;
    return Objects.equals(this.edges, tableSchemaForGetGraphTableSchemaOutput.edges) &&
        Objects.equals(this.enableRotate, tableSchemaForGetGraphTableSchemaOutput.enableRotate) &&
        Objects.equals(this.rotateSize, tableSchemaForGetGraphTableSchemaOutput.rotateSize) &&
        Objects.equals(this.tableName, tableSchemaForGetGraphTableSchemaOutput.tableName) &&
        Objects.equals(this.version, tableSchemaForGetGraphTableSchemaOutput.version) &&
        Objects.equals(this.vertexes, tableSchemaForGetGraphTableSchemaOutput.vertexes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(edges, enableRotate, rotateSize, tableName, version, vertexes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableSchemaForGetGraphTableSchemaOutput {\n");
    
    sb.append("    edges: ").append(toIndentedString(edges)).append("\n");
    sb.append("    enableRotate: ").append(toIndentedString(enableRotate)).append("\n");
    sb.append("    rotateSize: ").append(toIndentedString(rotateSize)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    vertexes: ").append(toIndentedString(vertexes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
