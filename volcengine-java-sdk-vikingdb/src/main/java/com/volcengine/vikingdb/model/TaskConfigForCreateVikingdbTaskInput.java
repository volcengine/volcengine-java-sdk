/*
 * vikingdb
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vikingdb.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * TaskConfigForCreateVikingdbTaskInput
 */



public class TaskConfigForCreateVikingdbTaskInput {
  @SerializedName("CollectionName")
  private String collectionName = null;

  @SerializedName("ExportAll")
  private Boolean exportAll = null;

  /**
   * Gets or Sets fileType
   */
  @JsonAdapter(FileTypeEnum.Adapter.class)
  public enum FileTypeEnum {
    @SerializedName("parquet")
    PARQUET("parquet"),
    @SerializedName("json")
    JSON("json");

    private String value;

    FileTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FileTypeEnum fromValue(String input) {
      for (FileTypeEnum b : FileTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FileTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FileTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public FileTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return FileTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("FileType")
  private FileTypeEnum fileType = null;

  @SerializedName("FilterConds")
  private List<Object> filterConds = null;

  @SerializedName("IgnoreError")
  private Boolean ignoreError = null;

  @SerializedName("NeedConfirm")
  private Boolean needConfirm = null;

  @SerializedName("ProjectName")
  private String projectName = null;

  @SerializedName("ResourceId")
  private String resourceId = null;

  @SerializedName("TosPath")
  private String tosPath = null;

  @SerializedName("UpdateFields")
  private Object updateFields = null;

  @SerializedName("UsePublic")
  private Boolean usePublic = null;

  public TaskConfigForCreateVikingdbTaskInput collectionName(String collectionName) {
    this.collectionName = collectionName;
    return this;
  }

   /**
   * Get collectionName
   * @return collectionName
  **/
  @Schema(description = "")
  public String getCollectionName() {
    return collectionName;
  }

  public void setCollectionName(String collectionName) {
    this.collectionName = collectionName;
  }

  public TaskConfigForCreateVikingdbTaskInput exportAll(Boolean exportAll) {
    this.exportAll = exportAll;
    return this;
  }

   /**
   * Get exportAll
   * @return exportAll
  **/
  @Schema(description = "")
  public Boolean isExportAll() {
    return exportAll;
  }

  public void setExportAll(Boolean exportAll) {
    this.exportAll = exportAll;
  }

  public TaskConfigForCreateVikingdbTaskInput fileType(FileTypeEnum fileType) {
    this.fileType = fileType;
    return this;
  }

   /**
   * Get fileType
   * @return fileType
  **/
  @Schema(description = "")
  public FileTypeEnum getFileType() {
    return fileType;
  }

  public void setFileType(FileTypeEnum fileType) {
    this.fileType = fileType;
  }

  public TaskConfigForCreateVikingdbTaskInput filterConds(List<Object> filterConds) {
    this.filterConds = filterConds;
    return this;
  }

  public TaskConfigForCreateVikingdbTaskInput addFilterCondsItem(Object filterCondsItem) {
    if (this.filterConds == null) {
      this.filterConds = new ArrayList<Object>();
    }
    this.filterConds.add(filterCondsItem);
    return this;
  }

   /**
   * Get filterConds
   * @return filterConds
  **/
  @Valid
  @Schema(description = "")
  public List<Object> getFilterConds() {
    return filterConds;
  }

  public void setFilterConds(List<Object> filterConds) {
    this.filterConds = filterConds;
  }

  public TaskConfigForCreateVikingdbTaskInput ignoreError(Boolean ignoreError) {
    this.ignoreError = ignoreError;
    return this;
  }

   /**
   * Get ignoreError
   * @return ignoreError
  **/
  @Schema(description = "")
  public Boolean isIgnoreError() {
    return ignoreError;
  }

  public void setIgnoreError(Boolean ignoreError) {
    this.ignoreError = ignoreError;
  }

  public TaskConfigForCreateVikingdbTaskInput needConfirm(Boolean needConfirm) {
    this.needConfirm = needConfirm;
    return this;
  }

   /**
   * Get needConfirm
   * @return needConfirm
  **/
  @Schema(description = "")
  public Boolean isNeedConfirm() {
    return needConfirm;
  }

  public void setNeedConfirm(Boolean needConfirm) {
    this.needConfirm = needConfirm;
  }

  public TaskConfigForCreateVikingdbTaskInput projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
  @Schema(description = "")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public TaskConfigForCreateVikingdbTaskInput resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

   /**
   * Get resourceId
   * @return resourceId
  **/
  @Schema(description = "")
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }

  public TaskConfigForCreateVikingdbTaskInput tosPath(String tosPath) {
    this.tosPath = tosPath;
    return this;
  }

   /**
   * Get tosPath
   * @return tosPath
  **/
  @Schema(description = "")
  public String getTosPath() {
    return tosPath;
  }

  public void setTosPath(String tosPath) {
    this.tosPath = tosPath;
  }

  public TaskConfigForCreateVikingdbTaskInput updateFields(Object updateFields) {
    this.updateFields = updateFields;
    return this;
  }

   /**
   * Get updateFields
   * @return updateFields
  **/
  @Valid
  @Schema(description = "")
  public Object getUpdateFields() {
    return updateFields;
  }

  public void setUpdateFields(Object updateFields) {
    this.updateFields = updateFields;
  }

  public TaskConfigForCreateVikingdbTaskInput usePublic(Boolean usePublic) {
    this.usePublic = usePublic;
    return this;
  }

   /**
   * Get usePublic
   * @return usePublic
  **/
  @Schema(description = "")
  public Boolean isUsePublic() {
    return usePublic;
  }

  public void setUsePublic(Boolean usePublic) {
    this.usePublic = usePublic;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskConfigForCreateVikingdbTaskInput taskConfigForCreateVikingdbTaskInput = (TaskConfigForCreateVikingdbTaskInput) o;
    return Objects.equals(this.collectionName, taskConfigForCreateVikingdbTaskInput.collectionName) &&
        Objects.equals(this.exportAll, taskConfigForCreateVikingdbTaskInput.exportAll) &&
        Objects.equals(this.fileType, taskConfigForCreateVikingdbTaskInput.fileType) &&
        Objects.equals(this.filterConds, taskConfigForCreateVikingdbTaskInput.filterConds) &&
        Objects.equals(this.ignoreError, taskConfigForCreateVikingdbTaskInput.ignoreError) &&
        Objects.equals(this.needConfirm, taskConfigForCreateVikingdbTaskInput.needConfirm) &&
        Objects.equals(this.projectName, taskConfigForCreateVikingdbTaskInput.projectName) &&
        Objects.equals(this.resourceId, taskConfigForCreateVikingdbTaskInput.resourceId) &&
        Objects.equals(this.tosPath, taskConfigForCreateVikingdbTaskInput.tosPath) &&
        Objects.equals(this.updateFields, taskConfigForCreateVikingdbTaskInput.updateFields) &&
        Objects.equals(this.usePublic, taskConfigForCreateVikingdbTaskInput.usePublic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collectionName, exportAll, fileType, filterConds, ignoreError, needConfirm, projectName, resourceId, tosPath, updateFields, usePublic);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskConfigForCreateVikingdbTaskInput {\n");
    
    sb.append("    collectionName: ").append(toIndentedString(collectionName)).append("\n");
    sb.append("    exportAll: ").append(toIndentedString(exportAll)).append("\n");
    sb.append("    fileType: ").append(toIndentedString(fileType)).append("\n");
    sb.append("    filterConds: ").append(toIndentedString(filterConds)).append("\n");
    sb.append("    ignoreError: ").append(toIndentedString(ignoreError)).append("\n");
    sb.append("    needConfirm: ").append(toIndentedString(needConfirm)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    tosPath: ").append(toIndentedString(tosPath)).append("\n");
    sb.append("    updateFields: ").append(toIndentedString(updateFields)).append("\n");
    sb.append("    usePublic: ").append(toIndentedString(usePublic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
