/*
 * graph
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.graph.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.graph.model.BytestoreInfoForListInstanceOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * StorageInfoForListInstanceOutput
 */



public class StorageInfoForListInstanceOutput {
  @SerializedName("BytestoreInfo")
  private BytestoreInfoForListInstanceOutput bytestoreInfo = null;

  /**
   * Gets or Sets storageType
   */
  @JsonAdapter(StorageTypeEnum.Adapter.class)
  public enum StorageTypeEnum {
    @SerializedName("Memory")
    MEMORY("Memory"),
    @SerializedName("ByteStore")
    BYTESTORE("ByteStore");

    private String value;

    StorageTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StorageTypeEnum fromValue(String input) {
      for (StorageTypeEnum b : StorageTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StorageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StorageTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StorageTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StorageTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("StorageType")
  private StorageTypeEnum storageType = null;

  public StorageInfoForListInstanceOutput bytestoreInfo(BytestoreInfoForListInstanceOutput bytestoreInfo) {
    this.bytestoreInfo = bytestoreInfo;
    return this;
  }

   /**
   * Get bytestoreInfo
   * @return bytestoreInfo
  **/
  @Valid
  @Schema(description = "")
  public BytestoreInfoForListInstanceOutput getBytestoreInfo() {
    return bytestoreInfo;
  }

  public void setBytestoreInfo(BytestoreInfoForListInstanceOutput bytestoreInfo) {
    this.bytestoreInfo = bytestoreInfo;
  }

  public StorageInfoForListInstanceOutput storageType(StorageTypeEnum storageType) {
    this.storageType = storageType;
    return this;
  }

   /**
   * Get storageType
   * @return storageType
  **/
  @Schema(description = "")
  public StorageTypeEnum getStorageType() {
    return storageType;
  }

  public void setStorageType(StorageTypeEnum storageType) {
    this.storageType = storageType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageInfoForListInstanceOutput storageInfoForListInstanceOutput = (StorageInfoForListInstanceOutput) o;
    return Objects.equals(this.bytestoreInfo, storageInfoForListInstanceOutput.bytestoreInfo) &&
        Objects.equals(this.storageType, storageInfoForListInstanceOutput.storageType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bytestoreInfo, storageType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageInfoForListInstanceOutput {\n");
    
    sb.append("    bytestoreInfo: ").append(toIndentedString(bytestoreInfo)).append("\n");
    sb.append("    storageType: ").append(toIndentedString(storageType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
