/*
 * vod20250101
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vod20250101.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.vod20250101.model.MultiInputForGetExecutionOutput;
import com.volcengine.vod20250101.model.OperationForGetExecutionOutput;
import com.volcengine.vod20250101.model.PolicyForGetExecutionOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * NodeForGetExecutionOutput
 */



public class NodeForGetExecutionOutput {
  @SerializedName("Dependencies")
  private List<String> dependencies = null;

  @SerializedName("Input")
  private MultiInputForGetExecutionOutput input = null;

  @SerializedName("MultiInputs")
  private List<MultiInputForGetExecutionOutput> multiInputs = null;

  @SerializedName("Name")
  private String name = null;

  @SerializedName("Operation")
  private OperationForGetExecutionOutput operation = null;

  @SerializedName("Policy")
  private PolicyForGetExecutionOutput policy = null;

  public NodeForGetExecutionOutput dependencies(List<String> dependencies) {
    this.dependencies = dependencies;
    return this;
  }

  public NodeForGetExecutionOutput addDependenciesItem(String dependenciesItem) {
    if (this.dependencies == null) {
      this.dependencies = new ArrayList<String>();
    }
    this.dependencies.add(dependenciesItem);
    return this;
  }

   /**
   * Get dependencies
   * @return dependencies
  **/
  @Schema(description = "")
  public List<String> getDependencies() {
    return dependencies;
  }

  public void setDependencies(List<String> dependencies) {
    this.dependencies = dependencies;
  }

  public NodeForGetExecutionOutput input(MultiInputForGetExecutionOutput input) {
    this.input = input;
    return this;
  }

   /**
   * Get input
   * @return input
  **/
  @Valid
  @Schema(description = "")
  public MultiInputForGetExecutionOutput getInput() {
    return input;
  }

  public void setInput(MultiInputForGetExecutionOutput input) {
    this.input = input;
  }

  public NodeForGetExecutionOutput multiInputs(List<MultiInputForGetExecutionOutput> multiInputs) {
    this.multiInputs = multiInputs;
    return this;
  }

  public NodeForGetExecutionOutput addMultiInputsItem(MultiInputForGetExecutionOutput multiInputsItem) {
    if (this.multiInputs == null) {
      this.multiInputs = new ArrayList<MultiInputForGetExecutionOutput>();
    }
    this.multiInputs.add(multiInputsItem);
    return this;
  }

   /**
   * Get multiInputs
   * @return multiInputs
  **/
  @Valid
  @Schema(description = "")
  public List<MultiInputForGetExecutionOutput> getMultiInputs() {
    return multiInputs;
  }

  public void setMultiInputs(List<MultiInputForGetExecutionOutput> multiInputs) {
    this.multiInputs = multiInputs;
  }

  public NodeForGetExecutionOutput name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public NodeForGetExecutionOutput operation(OperationForGetExecutionOutput operation) {
    this.operation = operation;
    return this;
  }

   /**
   * Get operation
   * @return operation
  **/
  @Valid
  @Schema(description = "")
  public OperationForGetExecutionOutput getOperation() {
    return operation;
  }

  public void setOperation(OperationForGetExecutionOutput operation) {
    this.operation = operation;
  }

  public NodeForGetExecutionOutput policy(PolicyForGetExecutionOutput policy) {
    this.policy = policy;
    return this;
  }

   /**
   * Get policy
   * @return policy
  **/
  @Valid
  @Schema(description = "")
  public PolicyForGetExecutionOutput getPolicy() {
    return policy;
  }

  public void setPolicy(PolicyForGetExecutionOutput policy) {
    this.policy = policy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeForGetExecutionOutput nodeForGetExecutionOutput = (NodeForGetExecutionOutput) o;
    return Objects.equals(this.dependencies, nodeForGetExecutionOutput.dependencies) &&
        Objects.equals(this.input, nodeForGetExecutionOutput.input) &&
        Objects.equals(this.multiInputs, nodeForGetExecutionOutput.multiInputs) &&
        Objects.equals(this.name, nodeForGetExecutionOutput.name) &&
        Objects.equals(this.operation, nodeForGetExecutionOutput.operation) &&
        Objects.equals(this.policy, nodeForGetExecutionOutput.policy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dependencies, input, multiInputs, name, operation, policy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeForGetExecutionOutput {\n");
    
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    multiInputs: ").append(toIndentedString(multiInputs)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
