/*
 * vpn
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vpn.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ModifySslVpnServerRequest
 */



public class ModifySslVpnServerRequest {
  @SerializedName("Auth")
  private String auth = null;

  @SerializedName("Cipher")
  private String cipher = null;

  /**
   * Gets or Sets clientCertSessionPolicy
   */
  @JsonAdapter(ClientCertSessionPolicyEnum.Adapter.class)
  public enum ClientCertSessionPolicyEnum {
    @SerializedName("AllowConcurrent")
    ALLOWCONCURRENT("AllowConcurrent"),
    @SerializedName("PreemptExisting")
    PREEMPTEXISTING("PreemptExisting");

    private String value;

    ClientCertSessionPolicyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ClientCertSessionPolicyEnum fromValue(String input) {
      for (ClientCertSessionPolicyEnum b : ClientCertSessionPolicyEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ClientCertSessionPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClientCertSessionPolicyEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ClientCertSessionPolicyEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ClientCertSessionPolicyEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("ClientCertSessionPolicy")
  private ClientCertSessionPolicyEnum clientCertSessionPolicy = null;

  @SerializedName("ClientIpPool")
  private String clientIpPool = null;

  @SerializedName("Compress")
  private Boolean compress = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("LocalSubnets")
  private List<String> localSubnets = null;

  @SerializedName("Port")
  private Integer port = null;

  @SerializedName("Protocol")
  private String protocol = null;

  @SerializedName("SslVpnServerId")
  private String sslVpnServerId = null;

  @SerializedName("SslVpnServerName")
  private String sslVpnServerName = null;

  public ModifySslVpnServerRequest auth(String auth) {
    this.auth = auth;
    return this;
  }

   /**
   * Get auth
   * @return auth
  **/
  @Schema(description = "")
  public String getAuth() {
    return auth;
  }

  public void setAuth(String auth) {
    this.auth = auth;
  }

  public ModifySslVpnServerRequest cipher(String cipher) {
    this.cipher = cipher;
    return this;
  }

   /**
   * Get cipher
   * @return cipher
  **/
  @Schema(description = "")
  public String getCipher() {
    return cipher;
  }

  public void setCipher(String cipher) {
    this.cipher = cipher;
  }

  public ModifySslVpnServerRequest clientCertSessionPolicy(ClientCertSessionPolicyEnum clientCertSessionPolicy) {
    this.clientCertSessionPolicy = clientCertSessionPolicy;
    return this;
  }

   /**
   * Get clientCertSessionPolicy
   * @return clientCertSessionPolicy
  **/
  @Schema(description = "")
  public ClientCertSessionPolicyEnum getClientCertSessionPolicy() {
    return clientCertSessionPolicy;
  }

  public void setClientCertSessionPolicy(ClientCertSessionPolicyEnum clientCertSessionPolicy) {
    this.clientCertSessionPolicy = clientCertSessionPolicy;
  }

  public ModifySslVpnServerRequest clientIpPool(String clientIpPool) {
    this.clientIpPool = clientIpPool;
    return this;
  }

   /**
   * Get clientIpPool
   * @return clientIpPool
  **/
  @Schema(description = "")
  public String getClientIpPool() {
    return clientIpPool;
  }

  public void setClientIpPool(String clientIpPool) {
    this.clientIpPool = clientIpPool;
  }

  public ModifySslVpnServerRequest compress(Boolean compress) {
    this.compress = compress;
    return this;
  }

   /**
   * Get compress
   * @return compress
  **/
  @Schema(description = "")
  public Boolean isCompress() {
    return compress;
  }

  public void setCompress(Boolean compress) {
    this.compress = compress;
  }

  public ModifySslVpnServerRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ModifySslVpnServerRequest localSubnets(List<String> localSubnets) {
    this.localSubnets = localSubnets;
    return this;
  }

  public ModifySslVpnServerRequest addLocalSubnetsItem(String localSubnetsItem) {
    if (this.localSubnets == null) {
      this.localSubnets = new ArrayList<String>();
    }
    this.localSubnets.add(localSubnetsItem);
    return this;
  }

   /**
   * Get localSubnets
   * @return localSubnets
  **/
  @Schema(description = "")
  public List<String> getLocalSubnets() {
    return localSubnets;
  }

  public void setLocalSubnets(List<String> localSubnets) {
    this.localSubnets = localSubnets;
  }

  public ModifySslVpnServerRequest port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @Schema(description = "")
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }

  public ModifySslVpnServerRequest protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * Get protocol
   * @return protocol
  **/
  @Schema(description = "")
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }

  public ModifySslVpnServerRequest sslVpnServerId(String sslVpnServerId) {
    this.sslVpnServerId = sslVpnServerId;
    return this;
  }

   /**
   * Get sslVpnServerId
   * @return sslVpnServerId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getSslVpnServerId() {
    return sslVpnServerId;
  }

  public void setSslVpnServerId(String sslVpnServerId) {
    this.sslVpnServerId = sslVpnServerId;
  }

  public ModifySslVpnServerRequest sslVpnServerName(String sslVpnServerName) {
    this.sslVpnServerName = sslVpnServerName;
    return this;
  }

   /**
   * Get sslVpnServerName
   * @return sslVpnServerName
  **/
  @Schema(description = "")
  public String getSslVpnServerName() {
    return sslVpnServerName;
  }

  public void setSslVpnServerName(String sslVpnServerName) {
    this.sslVpnServerName = sslVpnServerName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModifySslVpnServerRequest modifySslVpnServerRequest = (ModifySslVpnServerRequest) o;
    return Objects.equals(this.auth, modifySslVpnServerRequest.auth) &&
        Objects.equals(this.cipher, modifySslVpnServerRequest.cipher) &&
        Objects.equals(this.clientCertSessionPolicy, modifySslVpnServerRequest.clientCertSessionPolicy) &&
        Objects.equals(this.clientIpPool, modifySslVpnServerRequest.clientIpPool) &&
        Objects.equals(this.compress, modifySslVpnServerRequest.compress) &&
        Objects.equals(this.description, modifySslVpnServerRequest.description) &&
        Objects.equals(this.localSubnets, modifySslVpnServerRequest.localSubnets) &&
        Objects.equals(this.port, modifySslVpnServerRequest.port) &&
        Objects.equals(this.protocol, modifySslVpnServerRequest.protocol) &&
        Objects.equals(this.sslVpnServerId, modifySslVpnServerRequest.sslVpnServerId) &&
        Objects.equals(this.sslVpnServerName, modifySslVpnServerRequest.sslVpnServerName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(auth, cipher, clientCertSessionPolicy, clientIpPool, compress, description, localSubnets, port, protocol, sslVpnServerId, sslVpnServerName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModifySslVpnServerRequest {\n");
    
    sb.append("    auth: ").append(toIndentedString(auth)).append("\n");
    sb.append("    cipher: ").append(toIndentedString(cipher)).append("\n");
    sb.append("    clientCertSessionPolicy: ").append(toIndentedString(clientCertSessionPolicy)).append("\n");
    sb.append("    clientIpPool: ").append(toIndentedString(clientIpPool)).append("\n");
    sb.append("    compress: ").append(toIndentedString(compress)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    localSubnets: ").append(toIndentedString(localSubnets)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    sslVpnServerId: ").append(toIndentedString(sslVpnServerId)).append("\n");
    sb.append("    sslVpnServerName: ").append(toIndentedString(sslVpnServerName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
