/*
 * directconnect
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.directconnect.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.directconnect.model.AssociateCenForDescribeDirectConnectGatewaysOutput;
import com.volcengine.directconnect.model.TagForDescribeDirectConnectGatewaysOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DirectConnectGatewayForDescribeDirectConnectGatewaysOutput
 */



public class DirectConnectGatewayForDescribeDirectConnectGatewaysOutput {
  @SerializedName("AccountId")
  private String accountId = null;

  @SerializedName("AssociateCens")
  private List<AssociateCenForDescribeDirectConnectGatewaysOutput> associateCens = null;

  @SerializedName("BusinessStatus")
  private String businessStatus = null;

  @SerializedName("CreationTime")
  private String creationTime = null;

  @SerializedName("DeletedTime")
  private String deletedTime = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("DirectConnectGatewayId")
  private String directConnectGatewayId = null;

  @SerializedName("DirectConnectGatewayName")
  private String directConnectGatewayName = null;

  @SerializedName("EnableIpv6")
  private Boolean enableIpv6 = null;

  @SerializedName("LockReason")
  private String lockReason = null;

  @SerializedName("OverdueTime")
  private String overdueTime = null;

  @SerializedName("Status")
  private String status = null;

  @SerializedName("Tags")
  private List<TagForDescribeDirectConnectGatewaysOutput> tags = null;

  @SerializedName("UpdateTime")
  private String updateTime = null;

  public DirectConnectGatewayForDescribeDirectConnectGatewaysOutput accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * Get accountId
   * @return accountId
  **/
  @Schema(description = "")
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  public DirectConnectGatewayForDescribeDirectConnectGatewaysOutput associateCens(List<AssociateCenForDescribeDirectConnectGatewaysOutput> associateCens) {
    this.associateCens = associateCens;
    return this;
  }

  public DirectConnectGatewayForDescribeDirectConnectGatewaysOutput addAssociateCensItem(AssociateCenForDescribeDirectConnectGatewaysOutput associateCensItem) {
    if (this.associateCens == null) {
      this.associateCens = new ArrayList<AssociateCenForDescribeDirectConnectGatewaysOutput>();
    }
    this.associateCens.add(associateCensItem);
    return this;
  }

   /**
   * Get associateCens
   * @return associateCens
  **/
  @Valid
  @Schema(description = "")
  public List<AssociateCenForDescribeDirectConnectGatewaysOutput> getAssociateCens() {
    return associateCens;
  }

  public void setAssociateCens(List<AssociateCenForDescribeDirectConnectGatewaysOutput> associateCens) {
    this.associateCens = associateCens;
  }

  public DirectConnectGatewayForDescribeDirectConnectGatewaysOutput businessStatus(String businessStatus) {
    this.businessStatus = businessStatus;
    return this;
  }

   /**
   * Get businessStatus
   * @return businessStatus
  **/
  @Schema(description = "")
  public String getBusinessStatus() {
    return businessStatus;
  }

  public void setBusinessStatus(String businessStatus) {
    this.businessStatus = businessStatus;
  }

  public DirectConnectGatewayForDescribeDirectConnectGatewaysOutput creationTime(String creationTime) {
    this.creationTime = creationTime;
    return this;
  }

   /**
   * Get creationTime
   * @return creationTime
  **/
  @Schema(description = "")
  public String getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(String creationTime) {
    this.creationTime = creationTime;
  }

  public DirectConnectGatewayForDescribeDirectConnectGatewaysOutput deletedTime(String deletedTime) {
    this.deletedTime = deletedTime;
    return this;
  }

   /**
   * Get deletedTime
   * @return deletedTime
  **/
  @Schema(description = "")
  public String getDeletedTime() {
    return deletedTime;
  }

  public void setDeletedTime(String deletedTime) {
    this.deletedTime = deletedTime;
  }

  public DirectConnectGatewayForDescribeDirectConnectGatewaysOutput description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public DirectConnectGatewayForDescribeDirectConnectGatewaysOutput directConnectGatewayId(String directConnectGatewayId) {
    this.directConnectGatewayId = directConnectGatewayId;
    return this;
  }

   /**
   * Get directConnectGatewayId
   * @return directConnectGatewayId
  **/
  @Schema(description = "")
  public String getDirectConnectGatewayId() {
    return directConnectGatewayId;
  }

  public void setDirectConnectGatewayId(String directConnectGatewayId) {
    this.directConnectGatewayId = directConnectGatewayId;
  }

  public DirectConnectGatewayForDescribeDirectConnectGatewaysOutput directConnectGatewayName(String directConnectGatewayName) {
    this.directConnectGatewayName = directConnectGatewayName;
    return this;
  }

   /**
   * Get directConnectGatewayName
   * @return directConnectGatewayName
  **/
  @Schema(description = "")
  public String getDirectConnectGatewayName() {
    return directConnectGatewayName;
  }

  public void setDirectConnectGatewayName(String directConnectGatewayName) {
    this.directConnectGatewayName = directConnectGatewayName;
  }

  public DirectConnectGatewayForDescribeDirectConnectGatewaysOutput enableIpv6(Boolean enableIpv6) {
    this.enableIpv6 = enableIpv6;
    return this;
  }

   /**
   * Get enableIpv6
   * @return enableIpv6
  **/
  @Schema(description = "")
  public Boolean isEnableIpv6() {
    return enableIpv6;
  }

  public void setEnableIpv6(Boolean enableIpv6) {
    this.enableIpv6 = enableIpv6;
  }

  public DirectConnectGatewayForDescribeDirectConnectGatewaysOutput lockReason(String lockReason) {
    this.lockReason = lockReason;
    return this;
  }

   /**
   * Get lockReason
   * @return lockReason
  **/
  @Schema(description = "")
  public String getLockReason() {
    return lockReason;
  }

  public void setLockReason(String lockReason) {
    this.lockReason = lockReason;
  }

  public DirectConnectGatewayForDescribeDirectConnectGatewaysOutput overdueTime(String overdueTime) {
    this.overdueTime = overdueTime;
    return this;
  }

   /**
   * Get overdueTime
   * @return overdueTime
  **/
  @Schema(description = "")
  public String getOverdueTime() {
    return overdueTime;
  }

  public void setOverdueTime(String overdueTime) {
    this.overdueTime = overdueTime;
  }

  public DirectConnectGatewayForDescribeDirectConnectGatewaysOutput status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public DirectConnectGatewayForDescribeDirectConnectGatewaysOutput tags(List<TagForDescribeDirectConnectGatewaysOutput> tags) {
    this.tags = tags;
    return this;
  }

  public DirectConnectGatewayForDescribeDirectConnectGatewaysOutput addTagsItem(TagForDescribeDirectConnectGatewaysOutput tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<TagForDescribeDirectConnectGatewaysOutput>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Valid
  @Schema(description = "")
  public List<TagForDescribeDirectConnectGatewaysOutput> getTags() {
    return tags;
  }

  public void setTags(List<TagForDescribeDirectConnectGatewaysOutput> tags) {
    this.tags = tags;
  }

  public DirectConnectGatewayForDescribeDirectConnectGatewaysOutput updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

   /**
   * Get updateTime
   * @return updateTime
  **/
  @Schema(description = "")
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectConnectGatewayForDescribeDirectConnectGatewaysOutput directConnectGatewayForDescribeDirectConnectGatewaysOutput = (DirectConnectGatewayForDescribeDirectConnectGatewaysOutput) o;
    return Objects.equals(this.accountId, directConnectGatewayForDescribeDirectConnectGatewaysOutput.accountId) &&
        Objects.equals(this.associateCens, directConnectGatewayForDescribeDirectConnectGatewaysOutput.associateCens) &&
        Objects.equals(this.businessStatus, directConnectGatewayForDescribeDirectConnectGatewaysOutput.businessStatus) &&
        Objects.equals(this.creationTime, directConnectGatewayForDescribeDirectConnectGatewaysOutput.creationTime) &&
        Objects.equals(this.deletedTime, directConnectGatewayForDescribeDirectConnectGatewaysOutput.deletedTime) &&
        Objects.equals(this.description, directConnectGatewayForDescribeDirectConnectGatewaysOutput.description) &&
        Objects.equals(this.directConnectGatewayId, directConnectGatewayForDescribeDirectConnectGatewaysOutput.directConnectGatewayId) &&
        Objects.equals(this.directConnectGatewayName, directConnectGatewayForDescribeDirectConnectGatewaysOutput.directConnectGatewayName) &&
        Objects.equals(this.enableIpv6, directConnectGatewayForDescribeDirectConnectGatewaysOutput.enableIpv6) &&
        Objects.equals(this.lockReason, directConnectGatewayForDescribeDirectConnectGatewaysOutput.lockReason) &&
        Objects.equals(this.overdueTime, directConnectGatewayForDescribeDirectConnectGatewaysOutput.overdueTime) &&
        Objects.equals(this.status, directConnectGatewayForDescribeDirectConnectGatewaysOutput.status) &&
        Objects.equals(this.tags, directConnectGatewayForDescribeDirectConnectGatewaysOutput.tags) &&
        Objects.equals(this.updateTime, directConnectGatewayForDescribeDirectConnectGatewaysOutput.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, associateCens, businessStatus, creationTime, deletedTime, description, directConnectGatewayId, directConnectGatewayName, enableIpv6, lockReason, overdueTime, status, tags, updateTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectConnectGatewayForDescribeDirectConnectGatewaysOutput {\n");
    
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    associateCens: ").append(toIndentedString(associateCens)).append("\n");
    sb.append("    businessStatus: ").append(toIndentedString(businessStatus)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    deletedTime: ").append(toIndentedString(deletedTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    directConnectGatewayId: ").append(toIndentedString(directConnectGatewayId)).append("\n");
    sb.append("    directConnectGatewayName: ").append(toIndentedString(directConnectGatewayName)).append("\n");
    sb.append("    enableIpv6: ").append(toIndentedString(enableIpv6)).append("\n");
    sb.append("    lockReason: ").append(toIndentedString(lockReason)).append("\n");
    sb.append("    overdueTime: ").append(toIndentedString(overdueTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
