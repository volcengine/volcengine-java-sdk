/*
 * graph
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.graph.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * SecondaryIndexForGetTableSchemaOutput
 */



public class SecondaryIndexForGetTableSchemaOutput {
  @SerializedName("column_names")
  private List<String> columnNames = null;

  @SerializedName("is_covering_index")
  private Boolean isCoveringIndex = null;

  @SerializedName("is_unique_index")
  private Boolean isUniqueIndex = null;

  public SecondaryIndexForGetTableSchemaOutput columnNames(List<String> columnNames) {
    this.columnNames = columnNames;
    return this;
  }

  public SecondaryIndexForGetTableSchemaOutput addColumnNamesItem(String columnNamesItem) {
    if (this.columnNames == null) {
      this.columnNames = new ArrayList<String>();
    }
    this.columnNames.add(columnNamesItem);
    return this;
  }

   /**
   * Get columnNames
   * @return columnNames
  **/
  @Schema(description = "")
  public List<String> getColumnNames() {
    return columnNames;
  }

  public void setColumnNames(List<String> columnNames) {
    this.columnNames = columnNames;
  }

  public SecondaryIndexForGetTableSchemaOutput isCoveringIndex(Boolean isCoveringIndex) {
    this.isCoveringIndex = isCoveringIndex;
    return this;
  }

   /**
   * Get isCoveringIndex
   * @return isCoveringIndex
  **/
  @Schema(description = "")
  public Boolean isIsCoveringIndex() {
    return isCoveringIndex;
  }

  public void setIsCoveringIndex(Boolean isCoveringIndex) {
    this.isCoveringIndex = isCoveringIndex;
  }

  public SecondaryIndexForGetTableSchemaOutput isUniqueIndex(Boolean isUniqueIndex) {
    this.isUniqueIndex = isUniqueIndex;
    return this;
  }

   /**
   * Get isUniqueIndex
   * @return isUniqueIndex
  **/
  @Schema(description = "")
  public Boolean isIsUniqueIndex() {
    return isUniqueIndex;
  }

  public void setIsUniqueIndex(Boolean isUniqueIndex) {
    this.isUniqueIndex = isUniqueIndex;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecondaryIndexForGetTableSchemaOutput secondaryIndexForGetTableSchemaOutput = (SecondaryIndexForGetTableSchemaOutput) o;
    return Objects.equals(this.columnNames, secondaryIndexForGetTableSchemaOutput.columnNames) &&
        Objects.equals(this.isCoveringIndex, secondaryIndexForGetTableSchemaOutput.isCoveringIndex) &&
        Objects.equals(this.isUniqueIndex, secondaryIndexForGetTableSchemaOutput.isUniqueIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnNames, isCoveringIndex, isUniqueIndex);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecondaryIndexForGetTableSchemaOutput {\n");
    
    sb.append("    columnNames: ").append(toIndentedString(columnNames)).append("\n");
    sb.append("    isCoveringIndex: ").append(toIndentedString(isCoveringIndex)).append("\n");
    sb.append("    isUniqueIndex: ").append(toIndentedString(isUniqueIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
