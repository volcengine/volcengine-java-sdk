/*
 * seccenter20240508
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.seccenter20240508.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.seccenter20240508.model.EcsInstanceForListRaspConfigAgentInfosOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DataForListRaspConfigAgentInfosOutput
 */



public class DataForListRaspConfigAgentInfosOutput {
  @SerializedName("AccountID")
  private String accountID = null;

  @SerializedName("AgentID")
  private String agentID = null;

  @SerializedName("CloudProvider")
  private String cloudProvider = null;

  @SerializedName("EcsInstance")
  private EcsInstanceForListRaspConfigAgentInfosOutput ecsInstance = null;

  @SerializedName("EnableStatus")
  private String enableStatus = null;

  @SerializedName("GroupID")
  private String groupID = null;

  @SerializedName("GroupPath")
  private String groupPath = null;

  @SerializedName("HitWhiteProcessCount")
  private Long hitWhiteProcessCount = null;

  @SerializedName("InsertTime")
  private Long insertTime = null;

  @SerializedName("ManualClose")
  private Boolean manualClose = null;

  @SerializedName("Platform")
  private String platform = null;

  @SerializedName("ProcessCount")
  private Long processCount = null;

  @SerializedName("ProtectAbnormalProcessCount")
  private Long protectAbnormalProcessCount = null;

  @SerializedName("ProtectedProcessCount")
  private Long protectedProcessCount = null;

  @SerializedName("RaspConfigs")
  private List<String> raspConfigs = null;

  @SerializedName("Reason")
  private String reason = null;

  @SerializedName("RelateConfigNameList")
  private List<String> relateConfigNameList = null;

  @SerializedName("Tags")
  private List<String> tags = null;

  @SerializedName("ToBeProtectedProcessCount")
  private Long toBeProtectedProcessCount = null;

  @SerializedName("TopGroupID")
  private String topGroupID = null;

  @SerializedName("UpdateTime")
  private Long updateTime = null;

  public DataForListRaspConfigAgentInfosOutput accountID(String accountID) {
    this.accountID = accountID;
    return this;
  }

   /**
   * Get accountID
   * @return accountID
  **/
  @Schema(description = "")
  public String getAccountID() {
    return accountID;
  }

  public void setAccountID(String accountID) {
    this.accountID = accountID;
  }

  public DataForListRaspConfigAgentInfosOutput agentID(String agentID) {
    this.agentID = agentID;
    return this;
  }

   /**
   * Get agentID
   * @return agentID
  **/
  @Schema(description = "")
  public String getAgentID() {
    return agentID;
  }

  public void setAgentID(String agentID) {
    this.agentID = agentID;
  }

  public DataForListRaspConfigAgentInfosOutput cloudProvider(String cloudProvider) {
    this.cloudProvider = cloudProvider;
    return this;
  }

   /**
   * Get cloudProvider
   * @return cloudProvider
  **/
  @Schema(description = "")
  public String getCloudProvider() {
    return cloudProvider;
  }

  public void setCloudProvider(String cloudProvider) {
    this.cloudProvider = cloudProvider;
  }

  public DataForListRaspConfigAgentInfosOutput ecsInstance(EcsInstanceForListRaspConfigAgentInfosOutput ecsInstance) {
    this.ecsInstance = ecsInstance;
    return this;
  }

   /**
   * Get ecsInstance
   * @return ecsInstance
  **/
  @Valid
  @Schema(description = "")
  public EcsInstanceForListRaspConfigAgentInfosOutput getEcsInstance() {
    return ecsInstance;
  }

  public void setEcsInstance(EcsInstanceForListRaspConfigAgentInfosOutput ecsInstance) {
    this.ecsInstance = ecsInstance;
  }

  public DataForListRaspConfigAgentInfosOutput enableStatus(String enableStatus) {
    this.enableStatus = enableStatus;
    return this;
  }

   /**
   * Get enableStatus
   * @return enableStatus
  **/
  @Schema(description = "")
  public String getEnableStatus() {
    return enableStatus;
  }

  public void setEnableStatus(String enableStatus) {
    this.enableStatus = enableStatus;
  }

  public DataForListRaspConfigAgentInfosOutput groupID(String groupID) {
    this.groupID = groupID;
    return this;
  }

   /**
   * Get groupID
   * @return groupID
  **/
  @Schema(description = "")
  public String getGroupID() {
    return groupID;
  }

  public void setGroupID(String groupID) {
    this.groupID = groupID;
  }

  public DataForListRaspConfigAgentInfosOutput groupPath(String groupPath) {
    this.groupPath = groupPath;
    return this;
  }

   /**
   * Get groupPath
   * @return groupPath
  **/
  @Schema(description = "")
  public String getGroupPath() {
    return groupPath;
  }

  public void setGroupPath(String groupPath) {
    this.groupPath = groupPath;
  }

  public DataForListRaspConfigAgentInfosOutput hitWhiteProcessCount(Long hitWhiteProcessCount) {
    this.hitWhiteProcessCount = hitWhiteProcessCount;
    return this;
  }

   /**
   * Get hitWhiteProcessCount
   * @return hitWhiteProcessCount
  **/
  @Schema(description = "")
  public Long getHitWhiteProcessCount() {
    return hitWhiteProcessCount;
  }

  public void setHitWhiteProcessCount(Long hitWhiteProcessCount) {
    this.hitWhiteProcessCount = hitWhiteProcessCount;
  }

  public DataForListRaspConfigAgentInfosOutput insertTime(Long insertTime) {
    this.insertTime = insertTime;
    return this;
  }

   /**
   * Get insertTime
   * @return insertTime
  **/
  @Schema(description = "")
  public Long getInsertTime() {
    return insertTime;
  }

  public void setInsertTime(Long insertTime) {
    this.insertTime = insertTime;
  }

  public DataForListRaspConfigAgentInfosOutput manualClose(Boolean manualClose) {
    this.manualClose = manualClose;
    return this;
  }

   /**
   * Get manualClose
   * @return manualClose
  **/
  @Schema(description = "")
  public Boolean isManualClose() {
    return manualClose;
  }

  public void setManualClose(Boolean manualClose) {
    this.manualClose = manualClose;
  }

  public DataForListRaspConfigAgentInfosOutput platform(String platform) {
    this.platform = platform;
    return this;
  }

   /**
   * Get platform
   * @return platform
  **/
  @Schema(description = "")
  public String getPlatform() {
    return platform;
  }

  public void setPlatform(String platform) {
    this.platform = platform;
  }

  public DataForListRaspConfigAgentInfosOutput processCount(Long processCount) {
    this.processCount = processCount;
    return this;
  }

   /**
   * Get processCount
   * @return processCount
  **/
  @Schema(description = "")
  public Long getProcessCount() {
    return processCount;
  }

  public void setProcessCount(Long processCount) {
    this.processCount = processCount;
  }

  public DataForListRaspConfigAgentInfosOutput protectAbnormalProcessCount(Long protectAbnormalProcessCount) {
    this.protectAbnormalProcessCount = protectAbnormalProcessCount;
    return this;
  }

   /**
   * Get protectAbnormalProcessCount
   * @return protectAbnormalProcessCount
  **/
  @Schema(description = "")
  public Long getProtectAbnormalProcessCount() {
    return protectAbnormalProcessCount;
  }

  public void setProtectAbnormalProcessCount(Long protectAbnormalProcessCount) {
    this.protectAbnormalProcessCount = protectAbnormalProcessCount;
  }

  public DataForListRaspConfigAgentInfosOutput protectedProcessCount(Long protectedProcessCount) {
    this.protectedProcessCount = protectedProcessCount;
    return this;
  }

   /**
   * Get protectedProcessCount
   * @return protectedProcessCount
  **/
  @Schema(description = "")
  public Long getProtectedProcessCount() {
    return protectedProcessCount;
  }

  public void setProtectedProcessCount(Long protectedProcessCount) {
    this.protectedProcessCount = protectedProcessCount;
  }

  public DataForListRaspConfigAgentInfosOutput raspConfigs(List<String> raspConfigs) {
    this.raspConfigs = raspConfigs;
    return this;
  }

  public DataForListRaspConfigAgentInfosOutput addRaspConfigsItem(String raspConfigsItem) {
    if (this.raspConfigs == null) {
      this.raspConfigs = new ArrayList<String>();
    }
    this.raspConfigs.add(raspConfigsItem);
    return this;
  }

   /**
   * Get raspConfigs
   * @return raspConfigs
  **/
  @Schema(description = "")
  public List<String> getRaspConfigs() {
    return raspConfigs;
  }

  public void setRaspConfigs(List<String> raspConfigs) {
    this.raspConfigs = raspConfigs;
  }

  public DataForListRaspConfigAgentInfosOutput reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * Get reason
   * @return reason
  **/
  @Schema(description = "")
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public DataForListRaspConfigAgentInfosOutput relateConfigNameList(List<String> relateConfigNameList) {
    this.relateConfigNameList = relateConfigNameList;
    return this;
  }

  public DataForListRaspConfigAgentInfosOutput addRelateConfigNameListItem(String relateConfigNameListItem) {
    if (this.relateConfigNameList == null) {
      this.relateConfigNameList = new ArrayList<String>();
    }
    this.relateConfigNameList.add(relateConfigNameListItem);
    return this;
  }

   /**
   * Get relateConfigNameList
   * @return relateConfigNameList
  **/
  @Schema(description = "")
  public List<String> getRelateConfigNameList() {
    return relateConfigNameList;
  }

  public void setRelateConfigNameList(List<String> relateConfigNameList) {
    this.relateConfigNameList = relateConfigNameList;
  }

  public DataForListRaspConfigAgentInfosOutput tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public DataForListRaspConfigAgentInfosOutput addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Schema(description = "")
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }

  public DataForListRaspConfigAgentInfosOutput toBeProtectedProcessCount(Long toBeProtectedProcessCount) {
    this.toBeProtectedProcessCount = toBeProtectedProcessCount;
    return this;
  }

   /**
   * Get toBeProtectedProcessCount
   * @return toBeProtectedProcessCount
  **/
  @Schema(description = "")
  public Long getToBeProtectedProcessCount() {
    return toBeProtectedProcessCount;
  }

  public void setToBeProtectedProcessCount(Long toBeProtectedProcessCount) {
    this.toBeProtectedProcessCount = toBeProtectedProcessCount;
  }

  public DataForListRaspConfigAgentInfosOutput topGroupID(String topGroupID) {
    this.topGroupID = topGroupID;
    return this;
  }

   /**
   * Get topGroupID
   * @return topGroupID
  **/
  @Schema(description = "")
  public String getTopGroupID() {
    return topGroupID;
  }

  public void setTopGroupID(String topGroupID) {
    this.topGroupID = topGroupID;
  }

  public DataForListRaspConfigAgentInfosOutput updateTime(Long updateTime) {
    this.updateTime = updateTime;
    return this;
  }

   /**
   * Get updateTime
   * @return updateTime
  **/
  @Schema(description = "")
  public Long getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(Long updateTime) {
    this.updateTime = updateTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataForListRaspConfigAgentInfosOutput dataForListRaspConfigAgentInfosOutput = (DataForListRaspConfigAgentInfosOutput) o;
    return Objects.equals(this.accountID, dataForListRaspConfigAgentInfosOutput.accountID) &&
        Objects.equals(this.agentID, dataForListRaspConfigAgentInfosOutput.agentID) &&
        Objects.equals(this.cloudProvider, dataForListRaspConfigAgentInfosOutput.cloudProvider) &&
        Objects.equals(this.ecsInstance, dataForListRaspConfigAgentInfosOutput.ecsInstance) &&
        Objects.equals(this.enableStatus, dataForListRaspConfigAgentInfosOutput.enableStatus) &&
        Objects.equals(this.groupID, dataForListRaspConfigAgentInfosOutput.groupID) &&
        Objects.equals(this.groupPath, dataForListRaspConfigAgentInfosOutput.groupPath) &&
        Objects.equals(this.hitWhiteProcessCount, dataForListRaspConfigAgentInfosOutput.hitWhiteProcessCount) &&
        Objects.equals(this.insertTime, dataForListRaspConfigAgentInfosOutput.insertTime) &&
        Objects.equals(this.manualClose, dataForListRaspConfigAgentInfosOutput.manualClose) &&
        Objects.equals(this.platform, dataForListRaspConfigAgentInfosOutput.platform) &&
        Objects.equals(this.processCount, dataForListRaspConfigAgentInfosOutput.processCount) &&
        Objects.equals(this.protectAbnormalProcessCount, dataForListRaspConfigAgentInfosOutput.protectAbnormalProcessCount) &&
        Objects.equals(this.protectedProcessCount, dataForListRaspConfigAgentInfosOutput.protectedProcessCount) &&
        Objects.equals(this.raspConfigs, dataForListRaspConfigAgentInfosOutput.raspConfigs) &&
        Objects.equals(this.reason, dataForListRaspConfigAgentInfosOutput.reason) &&
        Objects.equals(this.relateConfigNameList, dataForListRaspConfigAgentInfosOutput.relateConfigNameList) &&
        Objects.equals(this.tags, dataForListRaspConfigAgentInfosOutput.tags) &&
        Objects.equals(this.toBeProtectedProcessCount, dataForListRaspConfigAgentInfosOutput.toBeProtectedProcessCount) &&
        Objects.equals(this.topGroupID, dataForListRaspConfigAgentInfosOutput.topGroupID) &&
        Objects.equals(this.updateTime, dataForListRaspConfigAgentInfosOutput.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountID, agentID, cloudProvider, ecsInstance, enableStatus, groupID, groupPath, hitWhiteProcessCount, insertTime, manualClose, platform, processCount, protectAbnormalProcessCount, protectedProcessCount, raspConfigs, reason, relateConfigNameList, tags, toBeProtectedProcessCount, topGroupID, updateTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataForListRaspConfigAgentInfosOutput {\n");
    
    sb.append("    accountID: ").append(toIndentedString(accountID)).append("\n");
    sb.append("    agentID: ").append(toIndentedString(agentID)).append("\n");
    sb.append("    cloudProvider: ").append(toIndentedString(cloudProvider)).append("\n");
    sb.append("    ecsInstance: ").append(toIndentedString(ecsInstance)).append("\n");
    sb.append("    enableStatus: ").append(toIndentedString(enableStatus)).append("\n");
    sb.append("    groupID: ").append(toIndentedString(groupID)).append("\n");
    sb.append("    groupPath: ").append(toIndentedString(groupPath)).append("\n");
    sb.append("    hitWhiteProcessCount: ").append(toIndentedString(hitWhiteProcessCount)).append("\n");
    sb.append("    insertTime: ").append(toIndentedString(insertTime)).append("\n");
    sb.append("    manualClose: ").append(toIndentedString(manualClose)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    processCount: ").append(toIndentedString(processCount)).append("\n");
    sb.append("    protectAbnormalProcessCount: ").append(toIndentedString(protectAbnormalProcessCount)).append("\n");
    sb.append("    protectedProcessCount: ").append(toIndentedString(protectedProcessCount)).append("\n");
    sb.append("    raspConfigs: ").append(toIndentedString(raspConfigs)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    relateConfigNameList: ").append(toIndentedString(relateConfigNameList)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    toBeProtectedProcessCount: ").append(toIndentedString(toBeProtectedProcessCount)).append("\n");
    sb.append("    topGroupID: ").append(toIndentedString(topGroupID)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
