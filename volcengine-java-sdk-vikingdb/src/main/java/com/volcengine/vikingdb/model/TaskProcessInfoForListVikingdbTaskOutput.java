/*
 * vikingdb
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vikingdb.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.vikingdb.model.SampleDataForListVikingdbTaskOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * TaskProcessInfoForListVikingdbTaskOutput
 */



public class TaskProcessInfoForListVikingdbTaskOutput {
  @SerializedName("ErrorMessage")
  private String errorMessage = null;

  @SerializedName("SampleData")
  private List<SampleDataForListVikingdbTaskOutput> sampleData = null;

  @SerializedName("SampleTimestamp")
  private String sampleTimestamp = null;

  @SerializedName("ScanDataCount")
  private Long scanDataCount = null;

  @SerializedName("TaskProgress")
  private String taskProgress = null;

  @SerializedName("TotalDataCount")
  private Long totalDataCount = null;

  @SerializedName("TotalFilterCount")
  private Long totalFilterCount = null;

  public TaskProcessInfoForListVikingdbTaskOutput errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * Get errorMessage
   * @return errorMessage
  **/
  @Schema(description = "")
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }

  public TaskProcessInfoForListVikingdbTaskOutput sampleData(List<SampleDataForListVikingdbTaskOutput> sampleData) {
    this.sampleData = sampleData;
    return this;
  }

  public TaskProcessInfoForListVikingdbTaskOutput addSampleDataItem(SampleDataForListVikingdbTaskOutput sampleDataItem) {
    if (this.sampleData == null) {
      this.sampleData = new ArrayList<SampleDataForListVikingdbTaskOutput>();
    }
    this.sampleData.add(sampleDataItem);
    return this;
  }

   /**
   * Get sampleData
   * @return sampleData
  **/
  @Valid
  @Schema(description = "")
  public List<SampleDataForListVikingdbTaskOutput> getSampleData() {
    return sampleData;
  }

  public void setSampleData(List<SampleDataForListVikingdbTaskOutput> sampleData) {
    this.sampleData = sampleData;
  }

  public TaskProcessInfoForListVikingdbTaskOutput sampleTimestamp(String sampleTimestamp) {
    this.sampleTimestamp = sampleTimestamp;
    return this;
  }

   /**
   * Get sampleTimestamp
   * @return sampleTimestamp
  **/
  @Schema(description = "")
  public String getSampleTimestamp() {
    return sampleTimestamp;
  }

  public void setSampleTimestamp(String sampleTimestamp) {
    this.sampleTimestamp = sampleTimestamp;
  }

  public TaskProcessInfoForListVikingdbTaskOutput scanDataCount(Long scanDataCount) {
    this.scanDataCount = scanDataCount;
    return this;
  }

   /**
   * Get scanDataCount
   * @return scanDataCount
  **/
  @Schema(description = "")
  public Long getScanDataCount() {
    return scanDataCount;
  }

  public void setScanDataCount(Long scanDataCount) {
    this.scanDataCount = scanDataCount;
  }

  public TaskProcessInfoForListVikingdbTaskOutput taskProgress(String taskProgress) {
    this.taskProgress = taskProgress;
    return this;
  }

   /**
   * Get taskProgress
   * @return taskProgress
  **/
  @Schema(description = "")
  public String getTaskProgress() {
    return taskProgress;
  }

  public void setTaskProgress(String taskProgress) {
    this.taskProgress = taskProgress;
  }

  public TaskProcessInfoForListVikingdbTaskOutput totalDataCount(Long totalDataCount) {
    this.totalDataCount = totalDataCount;
    return this;
  }

   /**
   * Get totalDataCount
   * @return totalDataCount
  **/
  @Schema(description = "")
  public Long getTotalDataCount() {
    return totalDataCount;
  }

  public void setTotalDataCount(Long totalDataCount) {
    this.totalDataCount = totalDataCount;
  }

  public TaskProcessInfoForListVikingdbTaskOutput totalFilterCount(Long totalFilterCount) {
    this.totalFilterCount = totalFilterCount;
    return this;
  }

   /**
   * Get totalFilterCount
   * @return totalFilterCount
  **/
  @Schema(description = "")
  public Long getTotalFilterCount() {
    return totalFilterCount;
  }

  public void setTotalFilterCount(Long totalFilterCount) {
    this.totalFilterCount = totalFilterCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskProcessInfoForListVikingdbTaskOutput taskProcessInfoForListVikingdbTaskOutput = (TaskProcessInfoForListVikingdbTaskOutput) o;
    return Objects.equals(this.errorMessage, taskProcessInfoForListVikingdbTaskOutput.errorMessage) &&
        Objects.equals(this.sampleData, taskProcessInfoForListVikingdbTaskOutput.sampleData) &&
        Objects.equals(this.sampleTimestamp, taskProcessInfoForListVikingdbTaskOutput.sampleTimestamp) &&
        Objects.equals(this.scanDataCount, taskProcessInfoForListVikingdbTaskOutput.scanDataCount) &&
        Objects.equals(this.taskProgress, taskProcessInfoForListVikingdbTaskOutput.taskProgress) &&
        Objects.equals(this.totalDataCount, taskProcessInfoForListVikingdbTaskOutput.totalDataCount) &&
        Objects.equals(this.totalFilterCount, taskProcessInfoForListVikingdbTaskOutput.totalFilterCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorMessage, sampleData, sampleTimestamp, scanDataCount, taskProgress, totalDataCount, totalFilterCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskProcessInfoForListVikingdbTaskOutput {\n");
    
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    sampleData: ").append(toIndentedString(sampleData)).append("\n");
    sb.append("    sampleTimestamp: ").append(toIndentedString(sampleTimestamp)).append("\n");
    sb.append("    scanDataCount: ").append(toIndentedString(scanDataCount)).append("\n");
    sb.append("    taskProgress: ").append(toIndentedString(taskProgress)).append("\n");
    sb.append("    totalDataCount: ").append(toIndentedString(totalDataCount)).append("\n");
    sb.append("    totalFilterCount: ").append(toIndentedString(totalFilterCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
