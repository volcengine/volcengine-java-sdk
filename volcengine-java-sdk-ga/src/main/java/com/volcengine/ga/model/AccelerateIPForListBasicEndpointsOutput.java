/*
 * ga
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.ga.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * AccelerateIPForListBasicEndpointsOutput
 */



public class AccelerateIPForListBasicEndpointsOutput {
  @SerializedName("AccelerateIP")
  private String accelerateIP = null;

  @SerializedName("AccelerateIPId")
  private String accelerateIPId = null;

  @SerializedName("ISP")
  private String ISP = null;

  @SerializedName("State")
  private String state = null;

  public AccelerateIPForListBasicEndpointsOutput accelerateIP(String accelerateIP) {
    this.accelerateIP = accelerateIP;
    return this;
  }

   /**
   * Get accelerateIP
   * @return accelerateIP
  **/
  @Schema(description = "")
  public String getAccelerateIP() {
    return accelerateIP;
  }

  public void setAccelerateIP(String accelerateIP) {
    this.accelerateIP = accelerateIP;
  }

  public AccelerateIPForListBasicEndpointsOutput accelerateIPId(String accelerateIPId) {
    this.accelerateIPId = accelerateIPId;
    return this;
  }

   /**
   * Get accelerateIPId
   * @return accelerateIPId
  **/
  @Schema(description = "")
  public String getAccelerateIPId() {
    return accelerateIPId;
  }

  public void setAccelerateIPId(String accelerateIPId) {
    this.accelerateIPId = accelerateIPId;
  }

  public AccelerateIPForListBasicEndpointsOutput ISP(String ISP) {
    this.ISP = ISP;
    return this;
  }

   /**
   * Get ISP
   * @return ISP
  **/
  @Schema(description = "")
  public String getISP() {
    return ISP;
  }

  public void setISP(String ISP) {
    this.ISP = ISP;
  }

  public AccelerateIPForListBasicEndpointsOutput state(String state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @Schema(description = "")
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccelerateIPForListBasicEndpointsOutput accelerateIPForListBasicEndpointsOutput = (AccelerateIPForListBasicEndpointsOutput) o;
    return Objects.equals(this.accelerateIP, accelerateIPForListBasicEndpointsOutput.accelerateIP) &&
        Objects.equals(this.accelerateIPId, accelerateIPForListBasicEndpointsOutput.accelerateIPId) &&
        Objects.equals(this.ISP, accelerateIPForListBasicEndpointsOutput.ISP) &&
        Objects.equals(this.state, accelerateIPForListBasicEndpointsOutput.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accelerateIP, accelerateIPId, ISP, state);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccelerateIPForListBasicEndpointsOutput {\n");
    
    sb.append("    accelerateIP: ").append(toIndentedString(accelerateIP)).append("\n");
    sb.append("    accelerateIPId: ").append(toIndentedString(accelerateIPId)).append("\n");
    sb.append("    ISP: ").append(toIndentedString(ISP)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
