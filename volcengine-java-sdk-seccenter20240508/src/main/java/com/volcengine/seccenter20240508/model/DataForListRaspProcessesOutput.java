/*
 * seccenter20240508
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.seccenter20240508.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DataForListRaspProcessesOutput
 */



public class DataForListRaspProcessesOutput {
  @SerializedName("AgentID")
  private String agentID = null;

  @SerializedName("AgentTags")
  private List<String> agentTags = null;

  @SerializedName("Cmdline")
  private String cmdline = null;

  @SerializedName("ExeName")
  private String exeName = null;

  @SerializedName("Hostname")
  private String hostname = null;

  @SerializedName("ID")
  private String ID = null;

  @SerializedName("InnerIPList")
  private List<String> innerIPList = null;

  @SerializedName("InspectPort")
  private Long inspectPort = null;

  @SerializedName("OuterIPList")
  private List<String> outerIPList = null;

  @SerializedName("Pid")
  private String pid = null;

  @SerializedName("Platform")
  private String platform = null;

  @SerializedName("PlatformFamily")
  private String platformFamily = null;

  @SerializedName("RaspConfigName")
  private String raspConfigName = null;

  @SerializedName("Reason")
  private String reason = null;

  @SerializedName("RelatedConfigID")
  private String relatedConfigID = null;

  @SerializedName("Runtime")
  private String runtime = null;

  @SerializedName("StartTimeUnix")
  private Long startTimeUnix = null;

  @SerializedName("Status")
  private String status = null;

  public DataForListRaspProcessesOutput agentID(String agentID) {
    this.agentID = agentID;
    return this;
  }

   /**
   * Get agentID
   * @return agentID
  **/
  @Schema(description = "")
  public String getAgentID() {
    return agentID;
  }

  public void setAgentID(String agentID) {
    this.agentID = agentID;
  }

  public DataForListRaspProcessesOutput agentTags(List<String> agentTags) {
    this.agentTags = agentTags;
    return this;
  }

  public DataForListRaspProcessesOutput addAgentTagsItem(String agentTagsItem) {
    if (this.agentTags == null) {
      this.agentTags = new ArrayList<String>();
    }
    this.agentTags.add(agentTagsItem);
    return this;
  }

   /**
   * Get agentTags
   * @return agentTags
  **/
  @Schema(description = "")
  public List<String> getAgentTags() {
    return agentTags;
  }

  public void setAgentTags(List<String> agentTags) {
    this.agentTags = agentTags;
  }

  public DataForListRaspProcessesOutput cmdline(String cmdline) {
    this.cmdline = cmdline;
    return this;
  }

   /**
   * Get cmdline
   * @return cmdline
  **/
  @Schema(description = "")
  public String getCmdline() {
    return cmdline;
  }

  public void setCmdline(String cmdline) {
    this.cmdline = cmdline;
  }

  public DataForListRaspProcessesOutput exeName(String exeName) {
    this.exeName = exeName;
    return this;
  }

   /**
   * Get exeName
   * @return exeName
  **/
  @Schema(description = "")
  public String getExeName() {
    return exeName;
  }

  public void setExeName(String exeName) {
    this.exeName = exeName;
  }

  public DataForListRaspProcessesOutput hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

   /**
   * Get hostname
   * @return hostname
  **/
  @Schema(description = "")
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }

  public DataForListRaspProcessesOutput ID(String ID) {
    this.ID = ID;
    return this;
  }

   /**
   * Get ID
   * @return ID
  **/
  @Schema(description = "")
  public String getID() {
    return ID;
  }

  public void setID(String ID) {
    this.ID = ID;
  }

  public DataForListRaspProcessesOutput innerIPList(List<String> innerIPList) {
    this.innerIPList = innerIPList;
    return this;
  }

  public DataForListRaspProcessesOutput addInnerIPListItem(String innerIPListItem) {
    if (this.innerIPList == null) {
      this.innerIPList = new ArrayList<String>();
    }
    this.innerIPList.add(innerIPListItem);
    return this;
  }

   /**
   * Get innerIPList
   * @return innerIPList
  **/
  @Schema(description = "")
  public List<String> getInnerIPList() {
    return innerIPList;
  }

  public void setInnerIPList(List<String> innerIPList) {
    this.innerIPList = innerIPList;
  }

  public DataForListRaspProcessesOutput inspectPort(Long inspectPort) {
    this.inspectPort = inspectPort;
    return this;
  }

   /**
   * Get inspectPort
   * @return inspectPort
  **/
  @Schema(description = "")
  public Long getInspectPort() {
    return inspectPort;
  }

  public void setInspectPort(Long inspectPort) {
    this.inspectPort = inspectPort;
  }

  public DataForListRaspProcessesOutput outerIPList(List<String> outerIPList) {
    this.outerIPList = outerIPList;
    return this;
  }

  public DataForListRaspProcessesOutput addOuterIPListItem(String outerIPListItem) {
    if (this.outerIPList == null) {
      this.outerIPList = new ArrayList<String>();
    }
    this.outerIPList.add(outerIPListItem);
    return this;
  }

   /**
   * Get outerIPList
   * @return outerIPList
  **/
  @Schema(description = "")
  public List<String> getOuterIPList() {
    return outerIPList;
  }

  public void setOuterIPList(List<String> outerIPList) {
    this.outerIPList = outerIPList;
  }

  public DataForListRaspProcessesOutput pid(String pid) {
    this.pid = pid;
    return this;
  }

   /**
   * Get pid
   * @return pid
  **/
  @Schema(description = "")
  public String getPid() {
    return pid;
  }

  public void setPid(String pid) {
    this.pid = pid;
  }

  public DataForListRaspProcessesOutput platform(String platform) {
    this.platform = platform;
    return this;
  }

   /**
   * Get platform
   * @return platform
  **/
  @Schema(description = "")
  public String getPlatform() {
    return platform;
  }

  public void setPlatform(String platform) {
    this.platform = platform;
  }

  public DataForListRaspProcessesOutput platformFamily(String platformFamily) {
    this.platformFamily = platformFamily;
    return this;
  }

   /**
   * Get platformFamily
   * @return platformFamily
  **/
  @Schema(description = "")
  public String getPlatformFamily() {
    return platformFamily;
  }

  public void setPlatformFamily(String platformFamily) {
    this.platformFamily = platformFamily;
  }

  public DataForListRaspProcessesOutput raspConfigName(String raspConfigName) {
    this.raspConfigName = raspConfigName;
    return this;
  }

   /**
   * Get raspConfigName
   * @return raspConfigName
  **/
  @Schema(description = "")
  public String getRaspConfigName() {
    return raspConfigName;
  }

  public void setRaspConfigName(String raspConfigName) {
    this.raspConfigName = raspConfigName;
  }

  public DataForListRaspProcessesOutput reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * Get reason
   * @return reason
  **/
  @Schema(description = "")
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public DataForListRaspProcessesOutput relatedConfigID(String relatedConfigID) {
    this.relatedConfigID = relatedConfigID;
    return this;
  }

   /**
   * Get relatedConfigID
   * @return relatedConfigID
  **/
  @Schema(description = "")
  public String getRelatedConfigID() {
    return relatedConfigID;
  }

  public void setRelatedConfigID(String relatedConfigID) {
    this.relatedConfigID = relatedConfigID;
  }

  public DataForListRaspProcessesOutput runtime(String runtime) {
    this.runtime = runtime;
    return this;
  }

   /**
   * Get runtime
   * @return runtime
  **/
  @Schema(description = "")
  public String getRuntime() {
    return runtime;
  }

  public void setRuntime(String runtime) {
    this.runtime = runtime;
  }

  public DataForListRaspProcessesOutput startTimeUnix(Long startTimeUnix) {
    this.startTimeUnix = startTimeUnix;
    return this;
  }

   /**
   * Get startTimeUnix
   * @return startTimeUnix
  **/
  @Schema(description = "")
  public Long getStartTimeUnix() {
    return startTimeUnix;
  }

  public void setStartTimeUnix(Long startTimeUnix) {
    this.startTimeUnix = startTimeUnix;
  }

  public DataForListRaspProcessesOutput status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataForListRaspProcessesOutput dataForListRaspProcessesOutput = (DataForListRaspProcessesOutput) o;
    return Objects.equals(this.agentID, dataForListRaspProcessesOutput.agentID) &&
        Objects.equals(this.agentTags, dataForListRaspProcessesOutput.agentTags) &&
        Objects.equals(this.cmdline, dataForListRaspProcessesOutput.cmdline) &&
        Objects.equals(this.exeName, dataForListRaspProcessesOutput.exeName) &&
        Objects.equals(this.hostname, dataForListRaspProcessesOutput.hostname) &&
        Objects.equals(this.ID, dataForListRaspProcessesOutput.ID) &&
        Objects.equals(this.innerIPList, dataForListRaspProcessesOutput.innerIPList) &&
        Objects.equals(this.inspectPort, dataForListRaspProcessesOutput.inspectPort) &&
        Objects.equals(this.outerIPList, dataForListRaspProcessesOutput.outerIPList) &&
        Objects.equals(this.pid, dataForListRaspProcessesOutput.pid) &&
        Objects.equals(this.platform, dataForListRaspProcessesOutput.platform) &&
        Objects.equals(this.platformFamily, dataForListRaspProcessesOutput.platformFamily) &&
        Objects.equals(this.raspConfigName, dataForListRaspProcessesOutput.raspConfigName) &&
        Objects.equals(this.reason, dataForListRaspProcessesOutput.reason) &&
        Objects.equals(this.relatedConfigID, dataForListRaspProcessesOutput.relatedConfigID) &&
        Objects.equals(this.runtime, dataForListRaspProcessesOutput.runtime) &&
        Objects.equals(this.startTimeUnix, dataForListRaspProcessesOutput.startTimeUnix) &&
        Objects.equals(this.status, dataForListRaspProcessesOutput.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentID, agentTags, cmdline, exeName, hostname, ID, innerIPList, inspectPort, outerIPList, pid, platform, platformFamily, raspConfigName, reason, relatedConfigID, runtime, startTimeUnix, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataForListRaspProcessesOutput {\n");
    
    sb.append("    agentID: ").append(toIndentedString(agentID)).append("\n");
    sb.append("    agentTags: ").append(toIndentedString(agentTags)).append("\n");
    sb.append("    cmdline: ").append(toIndentedString(cmdline)).append("\n");
    sb.append("    exeName: ").append(toIndentedString(exeName)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    innerIPList: ").append(toIndentedString(innerIPList)).append("\n");
    sb.append("    inspectPort: ").append(toIndentedString(inspectPort)).append("\n");
    sb.append("    outerIPList: ").append(toIndentedString(outerIPList)).append("\n");
    sb.append("    pid: ").append(toIndentedString(pid)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    platformFamily: ").append(toIndentedString(platformFamily)).append("\n");
    sb.append("    raspConfigName: ").append(toIndentedString(raspConfigName)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    relatedConfigID: ").append(toIndentedString(relatedConfigID)).append("\n");
    sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
    sb.append("    startTimeUnix: ").append(toIndentedString(startTimeUnix)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
