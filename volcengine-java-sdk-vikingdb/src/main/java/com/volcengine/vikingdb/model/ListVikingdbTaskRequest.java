/*
 * vikingdb
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vikingdb.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ListVikingdbTaskRequest
 */



public class ListVikingdbTaskRequest {
  @SerializedName("CollectionName")
  private String collectionName = null;

  @SerializedName("PageNumber")
  private Integer pageNumber = null;

  @SerializedName("PageSize")
  private Integer pageSize = null;

  @SerializedName("ProjectName")
  private String projectName = null;

  @SerializedName("ResourceId")
  private String resourceId = null;

  /**
   * Gets or Sets taskStatus
   */
  @JsonAdapter(TaskStatusEnum.Adapter.class)
  public enum TaskStatusEnum {
    @SerializedName("init")
    INIT("init"),
    @SerializedName("queued")
    QUEUED("queued"),
    @SerializedName("running")
    RUNNING("running"),
    @SerializedName("done")
    DONE("done"),
    @SerializedName("fail")
    FAIL("fail"),
    @SerializedName("confirm")
    CONFIRM("confirm"),
    @SerializedName("confirmed")
    CONFIRMED("confirmed");

    private String value;

    TaskStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TaskStatusEnum fromValue(String input) {
      for (TaskStatusEnum b : TaskStatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TaskStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TaskStatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TaskStatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TaskStatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("TaskStatus")
  private TaskStatusEnum taskStatus = null;

  /**
   * Gets or Sets taskType
   */
  @JsonAdapter(TaskTypeEnum.Adapter.class)
  public enum TaskTypeEnum {
    @SerializedName("data_import")
    DATA_IMPORT("data_import"),
    @SerializedName("filter_update")
    FILTER_UPDATE("filter_update"),
    @SerializedName("filter_delete")
    FILTER_DELETE("filter_delete"),
    @SerializedName("data_export")
    DATA_EXPORT("data_export");

    private String value;

    TaskTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TaskTypeEnum fromValue(String input) {
      for (TaskTypeEnum b : TaskTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TaskTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TaskTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TaskTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TaskTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("TaskType")
  private TaskTypeEnum taskType = null;

  public ListVikingdbTaskRequest collectionName(String collectionName) {
    this.collectionName = collectionName;
    return this;
  }

   /**
   * Get collectionName
   * @return collectionName
  **/
  @Schema(description = "")
  public String getCollectionName() {
    return collectionName;
  }

  public void setCollectionName(String collectionName) {
    this.collectionName = collectionName;
  }

  public ListVikingdbTaskRequest pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

   /**
   * Get pageNumber
   * minimum: 0
   * @return pageNumber
  **/
 @Min(0)  @Schema(description = "")
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }

  public ListVikingdbTaskRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * minimum: 1
   * maximum: 100
   * @return pageSize
  **/
 @Min(1) @Max(100)  @Schema(description = "")
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }

  public ListVikingdbTaskRequest projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
  @Schema(description = "")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public ListVikingdbTaskRequest resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

   /**
   * Get resourceId
   * @return resourceId
  **/
  @Schema(description = "")
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }

  public ListVikingdbTaskRequest taskStatus(TaskStatusEnum taskStatus) {
    this.taskStatus = taskStatus;
    return this;
  }

   /**
   * Get taskStatus
   * @return taskStatus
  **/
  @NotNull
  @Schema(required = true, description = "")
  public TaskStatusEnum getTaskStatus() {
    return taskStatus;
  }

  public void setTaskStatus(TaskStatusEnum taskStatus) {
    this.taskStatus = taskStatus;
  }

  public ListVikingdbTaskRequest taskType(TaskTypeEnum taskType) {
    this.taskType = taskType;
    return this;
  }

   /**
   * Get taskType
   * @return taskType
  **/
  @NotNull
  @Schema(required = true, description = "")
  public TaskTypeEnum getTaskType() {
    return taskType;
  }

  public void setTaskType(TaskTypeEnum taskType) {
    this.taskType = taskType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListVikingdbTaskRequest listVikingdbTaskRequest = (ListVikingdbTaskRequest) o;
    return Objects.equals(this.collectionName, listVikingdbTaskRequest.collectionName) &&
        Objects.equals(this.pageNumber, listVikingdbTaskRequest.pageNumber) &&
        Objects.equals(this.pageSize, listVikingdbTaskRequest.pageSize) &&
        Objects.equals(this.projectName, listVikingdbTaskRequest.projectName) &&
        Objects.equals(this.resourceId, listVikingdbTaskRequest.resourceId) &&
        Objects.equals(this.taskStatus, listVikingdbTaskRequest.taskStatus) &&
        Objects.equals(this.taskType, listVikingdbTaskRequest.taskType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collectionName, pageNumber, pageSize, projectName, resourceId, taskStatus, taskType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListVikingdbTaskRequest {\n");
    
    sb.append("    collectionName: ").append(toIndentedString(collectionName)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    taskStatus: ").append(toIndentedString(taskStatus)).append("\n");
    sb.append("    taskType: ").append(toIndentedString(taskType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
