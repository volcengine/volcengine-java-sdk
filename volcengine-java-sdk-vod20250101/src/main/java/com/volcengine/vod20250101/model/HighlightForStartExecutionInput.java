/*
 * vod20250101
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vod20250101.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.vod20250101.model.HighlightCutsForStartExecutionInput;
import com.volcengine.vod20250101.model.OpeningHookForStartExecutionInput;
import com.volcengine.vod20250101.model.StorylineCutsForStartExecutionInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * HighlightForStartExecutionInput
 */



public class HighlightForStartExecutionInput {
  @SerializedName("HighlightCuts")
  private HighlightCutsForStartExecutionInput highlightCuts = null;

  @SerializedName("Mode")
  private String mode = null;

  @SerializedName("OpeningHook")
  private OpeningHookForStartExecutionInput openingHook = null;

  @SerializedName("StorylineCuts")
  private StorylineCutsForStartExecutionInput storylineCuts = null;

  public HighlightForStartExecutionInput highlightCuts(HighlightCutsForStartExecutionInput highlightCuts) {
    this.highlightCuts = highlightCuts;
    return this;
  }

   /**
   * Get highlightCuts
   * @return highlightCuts
  **/
  @Valid
  @Schema(description = "")
  public HighlightCutsForStartExecutionInput getHighlightCuts() {
    return highlightCuts;
  }

  public void setHighlightCuts(HighlightCutsForStartExecutionInput highlightCuts) {
    this.highlightCuts = highlightCuts;
  }

  public HighlightForStartExecutionInput mode(String mode) {
    this.mode = mode;
    return this;
  }

   /**
   * Get mode
   * @return mode
  **/
  @Schema(description = "")
  public String getMode() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }

  public HighlightForStartExecutionInput openingHook(OpeningHookForStartExecutionInput openingHook) {
    this.openingHook = openingHook;
    return this;
  }

   /**
   * Get openingHook
   * @return openingHook
  **/
  @Valid
  @Schema(description = "")
  public OpeningHookForStartExecutionInput getOpeningHook() {
    return openingHook;
  }

  public void setOpeningHook(OpeningHookForStartExecutionInput openingHook) {
    this.openingHook = openingHook;
  }

  public HighlightForStartExecutionInput storylineCuts(StorylineCutsForStartExecutionInput storylineCuts) {
    this.storylineCuts = storylineCuts;
    return this;
  }

   /**
   * Get storylineCuts
   * @return storylineCuts
  **/
  @Valid
  @Schema(description = "")
  public StorylineCutsForStartExecutionInput getStorylineCuts() {
    return storylineCuts;
  }

  public void setStorylineCuts(StorylineCutsForStartExecutionInput storylineCuts) {
    this.storylineCuts = storylineCuts;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HighlightForStartExecutionInput highlightForStartExecutionInput = (HighlightForStartExecutionInput) o;
    return Objects.equals(this.highlightCuts, highlightForStartExecutionInput.highlightCuts) &&
        Objects.equals(this.mode, highlightForStartExecutionInput.mode) &&
        Objects.equals(this.openingHook, highlightForStartExecutionInput.openingHook) &&
        Objects.equals(this.storylineCuts, highlightForStartExecutionInput.storylineCuts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(highlightCuts, mode, openingHook, storylineCuts);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HighlightForStartExecutionInput {\n");
    
    sb.append("    highlightCuts: ").append(toIndentedString(highlightCuts)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    openingHook: ").append(toIndentedString(openingHook)).append("\n");
    sb.append("    storylineCuts: ").append(toIndentedString(storylineCuts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
