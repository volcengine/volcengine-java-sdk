/*
 * directconnect
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.directconnect.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DirectConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput
 */



public class DirectConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput {
  @SerializedName("Description")
  private String description = null;

  @SerializedName("DestinationCidrBlock")
  private String destinationCidrBlock = null;

  @SerializedName("DestinationPortEnd")
  private String destinationPortEnd = null;

  @SerializedName("DestinationPortStart")
  private Integer destinationPortStart = null;

  @SerializedName("DirectConnectTrafficQosPolicyId")
  private String directConnectTrafficQosPolicyId = null;

  @SerializedName("DirectConnectTrafficQosQueueId")
  private String directConnectTrafficQosQueueId = null;

  @SerializedName("DirectConnectTrafficQosRuleId")
  private String directConnectTrafficQosRuleId = null;

  @SerializedName("DirectConnectTrafficQosRuleName")
  private String directConnectTrafficQosRuleName = null;

  @SerializedName("MatchDscp")
  private Integer matchDscp = null;

  @SerializedName("Priority")
  private Integer priority = null;

  @SerializedName("Protocol")
  private String protocol = null;

  @SerializedName("RemarkingDscp")
  private String remarkingDscp = null;

  @SerializedName("SourceCidrBlock")
  private String sourceCidrBlock = null;

  @SerializedName("SourcePortEnd")
  private Integer sourcePortEnd = null;

  @SerializedName("SourcePortStart")
  private Integer sourcePortStart = null;

  @SerializedName("Status")
  private String status = null;

  public DirectConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public DirectConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput destinationCidrBlock(String destinationCidrBlock) {
    this.destinationCidrBlock = destinationCidrBlock;
    return this;
  }

   /**
   * Get destinationCidrBlock
   * @return destinationCidrBlock
  **/
  @Schema(description = "")
  public String getDestinationCidrBlock() {
    return destinationCidrBlock;
  }

  public void setDestinationCidrBlock(String destinationCidrBlock) {
    this.destinationCidrBlock = destinationCidrBlock;
  }

  public DirectConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput destinationPortEnd(String destinationPortEnd) {
    this.destinationPortEnd = destinationPortEnd;
    return this;
  }

   /**
   * Get destinationPortEnd
   * @return destinationPortEnd
  **/
  @Schema(description = "")
  public String getDestinationPortEnd() {
    return destinationPortEnd;
  }

  public void setDestinationPortEnd(String destinationPortEnd) {
    this.destinationPortEnd = destinationPortEnd;
  }

  public DirectConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput destinationPortStart(Integer destinationPortStart) {
    this.destinationPortStart = destinationPortStart;
    return this;
  }

   /**
   * Get destinationPortStart
   * @return destinationPortStart
  **/
  @Schema(description = "")
  public Integer getDestinationPortStart() {
    return destinationPortStart;
  }

  public void setDestinationPortStart(Integer destinationPortStart) {
    this.destinationPortStart = destinationPortStart;
  }

  public DirectConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput directConnectTrafficQosPolicyId(String directConnectTrafficQosPolicyId) {
    this.directConnectTrafficQosPolicyId = directConnectTrafficQosPolicyId;
    return this;
  }

   /**
   * Get directConnectTrafficQosPolicyId
   * @return directConnectTrafficQosPolicyId
  **/
  @Schema(description = "")
  public String getDirectConnectTrafficQosPolicyId() {
    return directConnectTrafficQosPolicyId;
  }

  public void setDirectConnectTrafficQosPolicyId(String directConnectTrafficQosPolicyId) {
    this.directConnectTrafficQosPolicyId = directConnectTrafficQosPolicyId;
  }

  public DirectConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput directConnectTrafficQosQueueId(String directConnectTrafficQosQueueId) {
    this.directConnectTrafficQosQueueId = directConnectTrafficQosQueueId;
    return this;
  }

   /**
   * Get directConnectTrafficQosQueueId
   * @return directConnectTrafficQosQueueId
  **/
  @Schema(description = "")
  public String getDirectConnectTrafficQosQueueId() {
    return directConnectTrafficQosQueueId;
  }

  public void setDirectConnectTrafficQosQueueId(String directConnectTrafficQosQueueId) {
    this.directConnectTrafficQosQueueId = directConnectTrafficQosQueueId;
  }

  public DirectConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput directConnectTrafficQosRuleId(String directConnectTrafficQosRuleId) {
    this.directConnectTrafficQosRuleId = directConnectTrafficQosRuleId;
    return this;
  }

   /**
   * Get directConnectTrafficQosRuleId
   * @return directConnectTrafficQosRuleId
  **/
  @Schema(description = "")
  public String getDirectConnectTrafficQosRuleId() {
    return directConnectTrafficQosRuleId;
  }

  public void setDirectConnectTrafficQosRuleId(String directConnectTrafficQosRuleId) {
    this.directConnectTrafficQosRuleId = directConnectTrafficQosRuleId;
  }

  public DirectConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput directConnectTrafficQosRuleName(String directConnectTrafficQosRuleName) {
    this.directConnectTrafficQosRuleName = directConnectTrafficQosRuleName;
    return this;
  }

   /**
   * Get directConnectTrafficQosRuleName
   * @return directConnectTrafficQosRuleName
  **/
  @Schema(description = "")
  public String getDirectConnectTrafficQosRuleName() {
    return directConnectTrafficQosRuleName;
  }

  public void setDirectConnectTrafficQosRuleName(String directConnectTrafficQosRuleName) {
    this.directConnectTrafficQosRuleName = directConnectTrafficQosRuleName;
  }

  public DirectConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput matchDscp(Integer matchDscp) {
    this.matchDscp = matchDscp;
    return this;
  }

   /**
   * Get matchDscp
   * @return matchDscp
  **/
  @Schema(description = "")
  public Integer getMatchDscp() {
    return matchDscp;
  }

  public void setMatchDscp(Integer matchDscp) {
    this.matchDscp = matchDscp;
  }

  public DirectConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput priority(Integer priority) {
    this.priority = priority;
    return this;
  }

   /**
   * Get priority
   * @return priority
  **/
  @Schema(description = "")
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }

  public DirectConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * Get protocol
   * @return protocol
  **/
  @Schema(description = "")
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }

  public DirectConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput remarkingDscp(String remarkingDscp) {
    this.remarkingDscp = remarkingDscp;
    return this;
  }

   /**
   * Get remarkingDscp
   * @return remarkingDscp
  **/
  @Schema(description = "")
  public String getRemarkingDscp() {
    return remarkingDscp;
  }

  public void setRemarkingDscp(String remarkingDscp) {
    this.remarkingDscp = remarkingDscp;
  }

  public DirectConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput sourceCidrBlock(String sourceCidrBlock) {
    this.sourceCidrBlock = sourceCidrBlock;
    return this;
  }

   /**
   * Get sourceCidrBlock
   * @return sourceCidrBlock
  **/
  @Schema(description = "")
  public String getSourceCidrBlock() {
    return sourceCidrBlock;
  }

  public void setSourceCidrBlock(String sourceCidrBlock) {
    this.sourceCidrBlock = sourceCidrBlock;
  }

  public DirectConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput sourcePortEnd(Integer sourcePortEnd) {
    this.sourcePortEnd = sourcePortEnd;
    return this;
  }

   /**
   * Get sourcePortEnd
   * @return sourcePortEnd
  **/
  @Schema(description = "")
  public Integer getSourcePortEnd() {
    return sourcePortEnd;
  }

  public void setSourcePortEnd(Integer sourcePortEnd) {
    this.sourcePortEnd = sourcePortEnd;
  }

  public DirectConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput sourcePortStart(Integer sourcePortStart) {
    this.sourcePortStart = sourcePortStart;
    return this;
  }

   /**
   * Get sourcePortStart
   * @return sourcePortStart
  **/
  @Schema(description = "")
  public Integer getSourcePortStart() {
    return sourcePortStart;
  }

  public void setSourcePortStart(Integer sourcePortStart) {
    this.sourcePortStart = sourcePortStart;
  }

  public DirectConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput directConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput = (DirectConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput) o;
    return Objects.equals(this.description, directConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput.description) &&
        Objects.equals(this.destinationCidrBlock, directConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput.destinationCidrBlock) &&
        Objects.equals(this.destinationPortEnd, directConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput.destinationPortEnd) &&
        Objects.equals(this.destinationPortStart, directConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput.destinationPortStart) &&
        Objects.equals(this.directConnectTrafficQosPolicyId, directConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput.directConnectTrafficQosPolicyId) &&
        Objects.equals(this.directConnectTrafficQosQueueId, directConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput.directConnectTrafficQosQueueId) &&
        Objects.equals(this.directConnectTrafficQosRuleId, directConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput.directConnectTrafficQosRuleId) &&
        Objects.equals(this.directConnectTrafficQosRuleName, directConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput.directConnectTrafficQosRuleName) &&
        Objects.equals(this.matchDscp, directConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput.matchDscp) &&
        Objects.equals(this.priority, directConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput.priority) &&
        Objects.equals(this.protocol, directConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput.protocol) &&
        Objects.equals(this.remarkingDscp, directConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput.remarkingDscp) &&
        Objects.equals(this.sourceCidrBlock, directConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput.sourceCidrBlock) &&
        Objects.equals(this.sourcePortEnd, directConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput.sourcePortEnd) &&
        Objects.equals(this.sourcePortStart, directConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput.sourcePortStart) &&
        Objects.equals(this.status, directConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, destinationCidrBlock, destinationPortEnd, destinationPortStart, directConnectTrafficQosPolicyId, directConnectTrafficQosQueueId, directConnectTrafficQosRuleId, directConnectTrafficQosRuleName, matchDscp, priority, protocol, remarkingDscp, sourceCidrBlock, sourcePortEnd, sourcePortStart, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectConnectTrafficQosRuleForDescribeDirectConnectTrafficQosRulesOutput {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    destinationCidrBlock: ").append(toIndentedString(destinationCidrBlock)).append("\n");
    sb.append("    destinationPortEnd: ").append(toIndentedString(destinationPortEnd)).append("\n");
    sb.append("    destinationPortStart: ").append(toIndentedString(destinationPortStart)).append("\n");
    sb.append("    directConnectTrafficQosPolicyId: ").append(toIndentedString(directConnectTrafficQosPolicyId)).append("\n");
    sb.append("    directConnectTrafficQosQueueId: ").append(toIndentedString(directConnectTrafficQosQueueId)).append("\n");
    sb.append("    directConnectTrafficQosRuleId: ").append(toIndentedString(directConnectTrafficQosRuleId)).append("\n");
    sb.append("    directConnectTrafficQosRuleName: ").append(toIndentedString(directConnectTrafficQosRuleName)).append("\n");
    sb.append("    matchDscp: ").append(toIndentedString(matchDscp)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    remarkingDscp: ").append(toIndentedString(remarkingDscp)).append("\n");
    sb.append("    sourceCidrBlock: ").append(toIndentedString(sourceCidrBlock)).append("\n");
    sb.append("    sourcePortEnd: ").append(toIndentedString(sourcePortEnd)).append("\n");
    sb.append("    sourcePortStart: ").append(toIndentedString(sourcePortStart)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
