/*
 * ml_platform20240701
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.mlplatform20240701.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ListResourceQueuesRequest
 */



public class ListResourceQueuesRequest {
  /**
   * Gets or Sets chargeType
   */
  @JsonAdapter(ChargeTypeEnum.Adapter.class)
  public enum ChargeTypeEnum {
    @SerializedName("Paused")
    PAUSED("Paused"),
    @SerializedName("Running")
    RUNNING("Running"),
    @SerializedName("Closed")
    CLOSED("Closed"),
    @SerializedName("Closing")
    CLOSING("Closing");

    private String value;

    ChargeTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ChargeTypeEnum fromValue(String input) {
      for (ChargeTypeEnum b : ChargeTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ChargeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChargeTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ChargeTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ChargeTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("ChargeType")
  private ChargeTypeEnum chargeType = null;

  @SerializedName("Ids")
  private List<String> ids = null;

  @SerializedName("NameContains")
  private String nameContains = null;

  @SerializedName("PageNumber")
  private Integer pageNumber = null;

  @SerializedName("PageSize")
  private Integer pageSize = null;

  @SerializedName("ProjectName")
  private String projectName = null;

  @SerializedName("ResourceGroupIds")
  private List<String> resourceGroupIds = null;

  @SerializedName("Shareable")
  private Boolean shareable = null;

  /**
   * Gets or Sets sortBy
   */
  @JsonAdapter(SortByEnum.Adapter.class)
  public enum SortByEnum {
    @SerializedName("CreateTime")
    CREATETIME("CreateTime");

    private String value;

    SortByEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SortByEnum fromValue(String input) {
      for (SortByEnum b : SortByEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SortByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortByEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SortByEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SortByEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("SortBy")
  private SortByEnum sortBy = null;

  /**
   * Gets or Sets sortOrder
   */
  @JsonAdapter(SortOrderEnum.Adapter.class)
  public enum SortOrderEnum {
    @SerializedName("Ascend")
    ASCEND("Ascend"),
    @SerializedName("Descend")
    DESCEND("Descend");

    private String value;

    SortOrderEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SortOrderEnum fromValue(String input) {
      for (SortOrderEnum b : SortOrderEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SortOrderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortOrderEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SortOrderEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SortOrderEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("SortOrder")
  private SortOrderEnum sortOrder = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    @SerializedName("PrePaid")
    PREPAID("PrePaid"),
    @SerializedName("PostPaid")
    POSTPAID("PostPaid");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("Status")
  private List<StatusEnum> status = null;

  @SerializedName("WorkloadTypes")
  private List<String> workloadTypes = null;

  @SerializedName("ZoneIds")
  private List<String> zoneIds = null;

  public ListResourceQueuesRequest chargeType(ChargeTypeEnum chargeType) {
    this.chargeType = chargeType;
    return this;
  }

   /**
   * Get chargeType
   * @return chargeType
  **/
  @Schema(description = "")
  public ChargeTypeEnum getChargeType() {
    return chargeType;
  }

  public void setChargeType(ChargeTypeEnum chargeType) {
    this.chargeType = chargeType;
  }

  public ListResourceQueuesRequest ids(List<String> ids) {
    this.ids = ids;
    return this;
  }

  public ListResourceQueuesRequest addIdsItem(String idsItem) {
    if (this.ids == null) {
      this.ids = new ArrayList<String>();
    }
    this.ids.add(idsItem);
    return this;
  }

   /**
   * Get ids
   * @return ids
  **/
  @Schema(description = "")
  public List<String> getIds() {
    return ids;
  }

  public void setIds(List<String> ids) {
    this.ids = ids;
  }

  public ListResourceQueuesRequest nameContains(String nameContains) {
    this.nameContains = nameContains;
    return this;
  }

   /**
   * Get nameContains
   * @return nameContains
  **/
  @Schema(description = "")
  public String getNameContains() {
    return nameContains;
  }

  public void setNameContains(String nameContains) {
    this.nameContains = nameContains;
  }

  public ListResourceQueuesRequest pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

   /**
   * Get pageNumber
   * @return pageNumber
  **/
  @Schema(description = "")
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }

  public ListResourceQueuesRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * minimum: 10
   * maximum: 100
   * @return pageSize
  **/
 @Min(10) @Max(100)  @Schema(description = "")
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }

  public ListResourceQueuesRequest projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
 @Size(min=1,max=64)  @Schema(description = "")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public ListResourceQueuesRequest resourceGroupIds(List<String> resourceGroupIds) {
    this.resourceGroupIds = resourceGroupIds;
    return this;
  }

  public ListResourceQueuesRequest addResourceGroupIdsItem(String resourceGroupIdsItem) {
    if (this.resourceGroupIds == null) {
      this.resourceGroupIds = new ArrayList<String>();
    }
    this.resourceGroupIds.add(resourceGroupIdsItem);
    return this;
  }

   /**
   * Get resourceGroupIds
   * @return resourceGroupIds
  **/
  @Schema(description = "")
  public List<String> getResourceGroupIds() {
    return resourceGroupIds;
  }

  public void setResourceGroupIds(List<String> resourceGroupIds) {
    this.resourceGroupIds = resourceGroupIds;
  }

  public ListResourceQueuesRequest shareable(Boolean shareable) {
    this.shareable = shareable;
    return this;
  }

   /**
   * Get shareable
   * @return shareable
  **/
  @Schema(description = "")
  public Boolean isShareable() {
    return shareable;
  }

  public void setShareable(Boolean shareable) {
    this.shareable = shareable;
  }

  public ListResourceQueuesRequest sortBy(SortByEnum sortBy) {
    this.sortBy = sortBy;
    return this;
  }

   /**
   * Get sortBy
   * @return sortBy
  **/
  @Schema(description = "")
  public SortByEnum getSortBy() {
    return sortBy;
  }

  public void setSortBy(SortByEnum sortBy) {
    this.sortBy = sortBy;
  }

  public ListResourceQueuesRequest sortOrder(SortOrderEnum sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

   /**
   * Get sortOrder
   * @return sortOrder
  **/
  @Schema(description = "")
  public SortOrderEnum getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(SortOrderEnum sortOrder) {
    this.sortOrder = sortOrder;
  }

  public ListResourceQueuesRequest status(List<StatusEnum> status) {
    this.status = status;
    return this;
  }

  public ListResourceQueuesRequest addStatusItem(StatusEnum statusItem) {
    if (this.status == null) {
      this.status = new ArrayList<StatusEnum>();
    }
    this.status.add(statusItem);
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public List<StatusEnum> getStatus() {
    return status;
  }

  public void setStatus(List<StatusEnum> status) {
    this.status = status;
  }

  public ListResourceQueuesRequest workloadTypes(List<String> workloadTypes) {
    this.workloadTypes = workloadTypes;
    return this;
  }

  public ListResourceQueuesRequest addWorkloadTypesItem(String workloadTypesItem) {
    if (this.workloadTypes == null) {
      this.workloadTypes = new ArrayList<String>();
    }
    this.workloadTypes.add(workloadTypesItem);
    return this;
  }

   /**
   * Get workloadTypes
   * @return workloadTypes
  **/
  @Schema(description = "")
  public List<String> getWorkloadTypes() {
    return workloadTypes;
  }

  public void setWorkloadTypes(List<String> workloadTypes) {
    this.workloadTypes = workloadTypes;
  }

  public ListResourceQueuesRequest zoneIds(List<String> zoneIds) {
    this.zoneIds = zoneIds;
    return this;
  }

  public ListResourceQueuesRequest addZoneIdsItem(String zoneIdsItem) {
    if (this.zoneIds == null) {
      this.zoneIds = new ArrayList<String>();
    }
    this.zoneIds.add(zoneIdsItem);
    return this;
  }

   /**
   * Get zoneIds
   * @return zoneIds
  **/
  @Schema(description = "")
  public List<String> getZoneIds() {
    return zoneIds;
  }

  public void setZoneIds(List<String> zoneIds) {
    this.zoneIds = zoneIds;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListResourceQueuesRequest listResourceQueuesRequest = (ListResourceQueuesRequest) o;
    return Objects.equals(this.chargeType, listResourceQueuesRequest.chargeType) &&
        Objects.equals(this.ids, listResourceQueuesRequest.ids) &&
        Objects.equals(this.nameContains, listResourceQueuesRequest.nameContains) &&
        Objects.equals(this.pageNumber, listResourceQueuesRequest.pageNumber) &&
        Objects.equals(this.pageSize, listResourceQueuesRequest.pageSize) &&
        Objects.equals(this.projectName, listResourceQueuesRequest.projectName) &&
        Objects.equals(this.resourceGroupIds, listResourceQueuesRequest.resourceGroupIds) &&
        Objects.equals(this.shareable, listResourceQueuesRequest.shareable) &&
        Objects.equals(this.sortBy, listResourceQueuesRequest.sortBy) &&
        Objects.equals(this.sortOrder, listResourceQueuesRequest.sortOrder) &&
        Objects.equals(this.status, listResourceQueuesRequest.status) &&
        Objects.equals(this.workloadTypes, listResourceQueuesRequest.workloadTypes) &&
        Objects.equals(this.zoneIds, listResourceQueuesRequest.zoneIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chargeType, ids, nameContains, pageNumber, pageSize, projectName, resourceGroupIds, shareable, sortBy, sortOrder, status, workloadTypes, zoneIds);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListResourceQueuesRequest {\n");
    
    sb.append("    chargeType: ").append(toIndentedString(chargeType)).append("\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    nameContains: ").append(toIndentedString(nameContains)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    resourceGroupIds: ").append(toIndentedString(resourceGroupIds)).append("\n");
    sb.append("    shareable: ").append(toIndentedString(shareable)).append("\n");
    sb.append("    sortBy: ").append(toIndentedString(sortBy)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    workloadTypes: ").append(toIndentedString(workloadTypes)).append("\n");
    sb.append("    zoneIds: ").append(toIndentedString(zoneIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
