/*
 * vedbm
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vedbm.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ScheduleTasksInfoForDescribeScheduleEventsOutput
 */



public class ScheduleTasksInfoForDescribeScheduleEventsOutput {
  @SerializedName("AccountID")
  private Integer accountID = null;

  @SerializedName("BeginTime")
  private String beginTime = null;

  @SerializedName("EndTime")
  private String endTime = null;

  @SerializedName("EventId")
  private String eventId = null;

  /**
   * Gets or Sets eventKind
   */
  @JsonAdapter(EventKindEnum.Adapter.class)
  public enum EventKindEnum {
    @SerializedName("Inspection")
    INSPECTION("Inspection"),
    @SerializedName("ModifyClusterParams")
    MODIFYCLUSTERPARAMS("ModifyClusterParams"),
    @SerializedName("ModifyDBInstanceParameters")
    MODIFYDBINSTANCEPARAMETERS("ModifyDBInstanceParameters"),
    @SerializedName("ModifyDBInstanceSpec")
    MODIFYDBINSTANCESPEC("ModifyDBInstanceSpec"),
    @SerializedName("RestartDBInstance")
    RESTARTDBINSTANCE("RestartDBInstance"),
    @SerializedName("UpgradeInstance")
    UPGRADEINSTANCE("UpgradeInstance");

    private String value;

    EventKindEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static EventKindEnum fromValue(String input) {
      for (EventKindEnum b : EventKindEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<EventKindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventKindEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public EventKindEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return EventKindEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("EventKind")
  private EventKindEnum eventKind = null;

  @SerializedName("InstanceID")
  private String instanceID = null;

  @SerializedName("InstanceName")
  private String instanceName = null;

  @SerializedName("Message")
  private String message = null;

  @SerializedName("PlannedStartTime")
  private String plannedStartTime = null;

  @SerializedName("ProjectName")
  private String projectName = null;

  @SerializedName("RequestId")
  private String requestId = null;

  /**
   * Gets or Sets scheduleType
   */
  @JsonAdapter(ScheduleTypeEnum.Adapter.class)
  public enum ScheduleTypeEnum {
    @SerializedName("Immediate")
    IMMEDIATE("Immediate"),
    @SerializedName("MaintainTime")
    MAINTAINTIME("MaintainTime"),
    @SerializedName("SpecifiedTime")
    SPECIFIEDTIME("SpecifiedTime");

    private String value;

    ScheduleTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ScheduleTypeEnum fromValue(String input) {
      for (ScheduleTypeEnum b : ScheduleTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ScheduleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScheduleTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ScheduleTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ScheduleTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("ScheduleType")
  private ScheduleTypeEnum scheduleType = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    @SerializedName("cancel")
    CANCEL("cancel"),
    @SerializedName("executing")
    EXECUTING("executing"),
    @SerializedName("failure")
    FAILURE("failure"),
    @SerializedName("finish")
    FINISH("finish"),
    @SerializedName("pending")
    PENDING("pending");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("Status")
  private StatusEnum status = null;

  public ScheduleTasksInfoForDescribeScheduleEventsOutput accountID(Integer accountID) {
    this.accountID = accountID;
    return this;
  }

   /**
   * Get accountID
   * @return accountID
  **/
  @Schema(description = "")
  public Integer getAccountID() {
    return accountID;
  }

  public void setAccountID(Integer accountID) {
    this.accountID = accountID;
  }

  public ScheduleTasksInfoForDescribeScheduleEventsOutput beginTime(String beginTime) {
    this.beginTime = beginTime;
    return this;
  }

   /**
   * Get beginTime
   * @return beginTime
  **/
  @Schema(description = "")
  public String getBeginTime() {
    return beginTime;
  }

  public void setBeginTime(String beginTime) {
    this.beginTime = beginTime;
  }

  public ScheduleTasksInfoForDescribeScheduleEventsOutput endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * Get endTime
   * @return endTime
  **/
  @Schema(description = "")
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }

  public ScheduleTasksInfoForDescribeScheduleEventsOutput eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

   /**
   * Get eventId
   * @return eventId
  **/
  @Schema(description = "")
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }

  public ScheduleTasksInfoForDescribeScheduleEventsOutput eventKind(EventKindEnum eventKind) {
    this.eventKind = eventKind;
    return this;
  }

   /**
   * Get eventKind
   * @return eventKind
  **/
  @Schema(description = "")
  public EventKindEnum getEventKind() {
    return eventKind;
  }

  public void setEventKind(EventKindEnum eventKind) {
    this.eventKind = eventKind;
  }

  public ScheduleTasksInfoForDescribeScheduleEventsOutput instanceID(String instanceID) {
    this.instanceID = instanceID;
    return this;
  }

   /**
   * Get instanceID
   * @return instanceID
  **/
  @Schema(description = "")
  public String getInstanceID() {
    return instanceID;
  }

  public void setInstanceID(String instanceID) {
    this.instanceID = instanceID;
  }

  public ScheduleTasksInfoForDescribeScheduleEventsOutput instanceName(String instanceName) {
    this.instanceName = instanceName;
    return this;
  }

   /**
   * Get instanceName
   * @return instanceName
  **/
  @Schema(description = "")
  public String getInstanceName() {
    return instanceName;
  }

  public void setInstanceName(String instanceName) {
    this.instanceName = instanceName;
  }

  public ScheduleTasksInfoForDescribeScheduleEventsOutput message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @Schema(description = "")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public ScheduleTasksInfoForDescribeScheduleEventsOutput plannedStartTime(String plannedStartTime) {
    this.plannedStartTime = plannedStartTime;
    return this;
  }

   /**
   * Get plannedStartTime
   * @return plannedStartTime
  **/
  @Schema(description = "")
  public String getPlannedStartTime() {
    return plannedStartTime;
  }

  public void setPlannedStartTime(String plannedStartTime) {
    this.plannedStartTime = plannedStartTime;
  }

  public ScheduleTasksInfoForDescribeScheduleEventsOutput projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
  @Schema(description = "")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public ScheduleTasksInfoForDescribeScheduleEventsOutput requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * Get requestId
   * @return requestId
  **/
  @Schema(description = "")
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }

  public ScheduleTasksInfoForDescribeScheduleEventsOutput scheduleType(ScheduleTypeEnum scheduleType) {
    this.scheduleType = scheduleType;
    return this;
  }

   /**
   * Get scheduleType
   * @return scheduleType
  **/
  @Schema(description = "")
  public ScheduleTypeEnum getScheduleType() {
    return scheduleType;
  }

  public void setScheduleType(ScheduleTypeEnum scheduleType) {
    this.scheduleType = scheduleType;
  }

  public ScheduleTasksInfoForDescribeScheduleEventsOutput status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScheduleTasksInfoForDescribeScheduleEventsOutput scheduleTasksInfoForDescribeScheduleEventsOutput = (ScheduleTasksInfoForDescribeScheduleEventsOutput) o;
    return Objects.equals(this.accountID, scheduleTasksInfoForDescribeScheduleEventsOutput.accountID) &&
        Objects.equals(this.beginTime, scheduleTasksInfoForDescribeScheduleEventsOutput.beginTime) &&
        Objects.equals(this.endTime, scheduleTasksInfoForDescribeScheduleEventsOutput.endTime) &&
        Objects.equals(this.eventId, scheduleTasksInfoForDescribeScheduleEventsOutput.eventId) &&
        Objects.equals(this.eventKind, scheduleTasksInfoForDescribeScheduleEventsOutput.eventKind) &&
        Objects.equals(this.instanceID, scheduleTasksInfoForDescribeScheduleEventsOutput.instanceID) &&
        Objects.equals(this.instanceName, scheduleTasksInfoForDescribeScheduleEventsOutput.instanceName) &&
        Objects.equals(this.message, scheduleTasksInfoForDescribeScheduleEventsOutput.message) &&
        Objects.equals(this.plannedStartTime, scheduleTasksInfoForDescribeScheduleEventsOutput.plannedStartTime) &&
        Objects.equals(this.projectName, scheduleTasksInfoForDescribeScheduleEventsOutput.projectName) &&
        Objects.equals(this.requestId, scheduleTasksInfoForDescribeScheduleEventsOutput.requestId) &&
        Objects.equals(this.scheduleType, scheduleTasksInfoForDescribeScheduleEventsOutput.scheduleType) &&
        Objects.equals(this.status, scheduleTasksInfoForDescribeScheduleEventsOutput.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountID, beginTime, endTime, eventId, eventKind, instanceID, instanceName, message, plannedStartTime, projectName, requestId, scheduleType, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScheduleTasksInfoForDescribeScheduleEventsOutput {\n");
    
    sb.append("    accountID: ").append(toIndentedString(accountID)).append("\n");
    sb.append("    beginTime: ").append(toIndentedString(beginTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    eventKind: ").append(toIndentedString(eventKind)).append("\n");
    sb.append("    instanceID: ").append(toIndentedString(instanceID)).append("\n");
    sb.append("    instanceName: ").append(toIndentedString(instanceName)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    plannedStartTime: ").append(toIndentedString(plannedStartTime)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    scheduleType: ").append(toIndentedString(scheduleType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
