/*
 * vikingdb
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vikingdb.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.vikingdb.model.CollectionStatsForListVikingdbCollectionOutput;
import com.volcengine.vikingdb.model.FieldForListVikingdbCollectionOutput;
import com.volcengine.vikingdb.model.TagForListVikingdbCollectionOutput;
import com.volcengine.vikingdb.model.VectorizeForListVikingdbCollectionOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * CollectionForListVikingdbCollectionOutput
 */



public class CollectionForListVikingdbCollectionOutput {
  @SerializedName("CollectionName")
  private String collectionName = null;

  @SerializedName("CollectionStats")
  private CollectionStatsForListVikingdbCollectionOutput collectionStats = null;

  @SerializedName("CreateTime")
  private String createTime = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("EnableKeywordsSearch")
  private Boolean enableKeywordsSearch = null;

  @SerializedName("Fields")
  private List<FieldForListVikingdbCollectionOutput> fields = null;

  @SerializedName("IndexCount")
  private Integer indexCount = null;

  @SerializedName("IndexNames")
  private List<String> indexNames = null;

  @SerializedName("ProjectName")
  private String projectName = null;

  @SerializedName("ResourceId")
  private String resourceId = null;

  @SerializedName("Tags")
  private List<TagForListVikingdbCollectionOutput> tags = null;

  @SerializedName("UpdatePerson")
  private String updatePerson = null;

  @SerializedName("UpdateTime")
  private String updateTime = null;

  @SerializedName("Vectorize")
  private VectorizeForListVikingdbCollectionOutput vectorize = null;

  public CollectionForListVikingdbCollectionOutput collectionName(String collectionName) {
    this.collectionName = collectionName;
    return this;
  }

   /**
   * Get collectionName
   * @return collectionName
  **/
  @Schema(description = "")
  public String getCollectionName() {
    return collectionName;
  }

  public void setCollectionName(String collectionName) {
    this.collectionName = collectionName;
  }

  public CollectionForListVikingdbCollectionOutput collectionStats(CollectionStatsForListVikingdbCollectionOutput collectionStats) {
    this.collectionStats = collectionStats;
    return this;
  }

   /**
   * Get collectionStats
   * @return collectionStats
  **/
  @Valid
  @Schema(description = "")
  public CollectionStatsForListVikingdbCollectionOutput getCollectionStats() {
    return collectionStats;
  }

  public void setCollectionStats(CollectionStatsForListVikingdbCollectionOutput collectionStats) {
    this.collectionStats = collectionStats;
  }

  public CollectionForListVikingdbCollectionOutput createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

   /**
   * Get createTime
   * @return createTime
  **/
  @Schema(description = "")
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }

  public CollectionForListVikingdbCollectionOutput description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CollectionForListVikingdbCollectionOutput enableKeywordsSearch(Boolean enableKeywordsSearch) {
    this.enableKeywordsSearch = enableKeywordsSearch;
    return this;
  }

   /**
   * Get enableKeywordsSearch
   * @return enableKeywordsSearch
  **/
  @Schema(description = "")
  public Boolean isEnableKeywordsSearch() {
    return enableKeywordsSearch;
  }

  public void setEnableKeywordsSearch(Boolean enableKeywordsSearch) {
    this.enableKeywordsSearch = enableKeywordsSearch;
  }

  public CollectionForListVikingdbCollectionOutput fields(List<FieldForListVikingdbCollectionOutput> fields) {
    this.fields = fields;
    return this;
  }

  public CollectionForListVikingdbCollectionOutput addFieldsItem(FieldForListVikingdbCollectionOutput fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<FieldForListVikingdbCollectionOutput>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * Get fields
   * @return fields
  **/
  @Valid
  @Schema(description = "")
  public List<FieldForListVikingdbCollectionOutput> getFields() {
    return fields;
  }

  public void setFields(List<FieldForListVikingdbCollectionOutput> fields) {
    this.fields = fields;
  }

  public CollectionForListVikingdbCollectionOutput indexCount(Integer indexCount) {
    this.indexCount = indexCount;
    return this;
  }

   /**
   * Get indexCount
   * @return indexCount
  **/
  @Schema(description = "")
  public Integer getIndexCount() {
    return indexCount;
  }

  public void setIndexCount(Integer indexCount) {
    this.indexCount = indexCount;
  }

  public CollectionForListVikingdbCollectionOutput indexNames(List<String> indexNames) {
    this.indexNames = indexNames;
    return this;
  }

  public CollectionForListVikingdbCollectionOutput addIndexNamesItem(String indexNamesItem) {
    if (this.indexNames == null) {
      this.indexNames = new ArrayList<String>();
    }
    this.indexNames.add(indexNamesItem);
    return this;
  }

   /**
   * Get indexNames
   * @return indexNames
  **/
  @Schema(description = "")
  public List<String> getIndexNames() {
    return indexNames;
  }

  public void setIndexNames(List<String> indexNames) {
    this.indexNames = indexNames;
  }

  public CollectionForListVikingdbCollectionOutput projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Get projectName
   * @return projectName
  **/
  @Schema(description = "")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public CollectionForListVikingdbCollectionOutput resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

   /**
   * Get resourceId
   * @return resourceId
  **/
  @Schema(description = "")
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }

  public CollectionForListVikingdbCollectionOutput tags(List<TagForListVikingdbCollectionOutput> tags) {
    this.tags = tags;
    return this;
  }

  public CollectionForListVikingdbCollectionOutput addTagsItem(TagForListVikingdbCollectionOutput tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<TagForListVikingdbCollectionOutput>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Valid
  @Schema(description = "")
  public List<TagForListVikingdbCollectionOutput> getTags() {
    return tags;
  }

  public void setTags(List<TagForListVikingdbCollectionOutput> tags) {
    this.tags = tags;
  }

  public CollectionForListVikingdbCollectionOutput updatePerson(String updatePerson) {
    this.updatePerson = updatePerson;
    return this;
  }

   /**
   * Get updatePerson
   * @return updatePerson
  **/
  @Schema(description = "")
  public String getUpdatePerson() {
    return updatePerson;
  }

  public void setUpdatePerson(String updatePerson) {
    this.updatePerson = updatePerson;
  }

  public CollectionForListVikingdbCollectionOutput updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

   /**
   * Get updateTime
   * @return updateTime
  **/
  @Schema(description = "")
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }

  public CollectionForListVikingdbCollectionOutput vectorize(VectorizeForListVikingdbCollectionOutput vectorize) {
    this.vectorize = vectorize;
    return this;
  }

   /**
   * Get vectorize
   * @return vectorize
  **/
  @Valid
  @Schema(description = "")
  public VectorizeForListVikingdbCollectionOutput getVectorize() {
    return vectorize;
  }

  public void setVectorize(VectorizeForListVikingdbCollectionOutput vectorize) {
    this.vectorize = vectorize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CollectionForListVikingdbCollectionOutput collectionForListVikingdbCollectionOutput = (CollectionForListVikingdbCollectionOutput) o;
    return Objects.equals(this.collectionName, collectionForListVikingdbCollectionOutput.collectionName) &&
        Objects.equals(this.collectionStats, collectionForListVikingdbCollectionOutput.collectionStats) &&
        Objects.equals(this.createTime, collectionForListVikingdbCollectionOutput.createTime) &&
        Objects.equals(this.description, collectionForListVikingdbCollectionOutput.description) &&
        Objects.equals(this.enableKeywordsSearch, collectionForListVikingdbCollectionOutput.enableKeywordsSearch) &&
        Objects.equals(this.fields, collectionForListVikingdbCollectionOutput.fields) &&
        Objects.equals(this.indexCount, collectionForListVikingdbCollectionOutput.indexCount) &&
        Objects.equals(this.indexNames, collectionForListVikingdbCollectionOutput.indexNames) &&
        Objects.equals(this.projectName, collectionForListVikingdbCollectionOutput.projectName) &&
        Objects.equals(this.resourceId, collectionForListVikingdbCollectionOutput.resourceId) &&
        Objects.equals(this.tags, collectionForListVikingdbCollectionOutput.tags) &&
        Objects.equals(this.updatePerson, collectionForListVikingdbCollectionOutput.updatePerson) &&
        Objects.equals(this.updateTime, collectionForListVikingdbCollectionOutput.updateTime) &&
        Objects.equals(this.vectorize, collectionForListVikingdbCollectionOutput.vectorize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collectionName, collectionStats, createTime, description, enableKeywordsSearch, fields, indexCount, indexNames, projectName, resourceId, tags, updatePerson, updateTime, vectorize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CollectionForListVikingdbCollectionOutput {\n");
    
    sb.append("    collectionName: ").append(toIndentedString(collectionName)).append("\n");
    sb.append("    collectionStats: ").append(toIndentedString(collectionStats)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enableKeywordsSearch: ").append(toIndentedString(enableKeywordsSearch)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    indexCount: ").append(toIndentedString(indexCount)).append("\n");
    sb.append("    indexNames: ").append(toIndentedString(indexNames)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    updatePerson: ").append(toIndentedString(updatePerson)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    vectorize: ").append(toIndentedString(vectorize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
