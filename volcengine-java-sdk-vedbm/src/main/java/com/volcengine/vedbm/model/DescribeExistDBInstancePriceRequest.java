/*
 * vedbm
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vedbm.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.vedbm.model.InstanceForDescribeExistDBInstancePriceInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DescribeExistDBInstancePriceRequest
 */



public class DescribeExistDBInstancePriceRequest {
  /**
   * Gets or Sets chargeType
   */
  @JsonAdapter(ChargeTypeEnum.Adapter.class)
  public enum ChargeTypeEnum {
    @SerializedName("PostPaid")
    POSTPAID("PostPaid"),
    @SerializedName("PrePaid")
    PREPAID("PrePaid");

    private String value;

    ChargeTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ChargeTypeEnum fromValue(String input) {
      for (ChargeTypeEnum b : ChargeTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ChargeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChargeTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ChargeTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ChargeTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("ChargeType")
  private ChargeTypeEnum chargeType = null;

  @SerializedName("Instances")
  private List<InstanceForDescribeExistDBInstancePriceInput> instances = null;

  @SerializedName("Period")
  private Integer period = null;

  /**
   * Gets or Sets periodUnit
   */
  @JsonAdapter(PeriodUnitEnum.Adapter.class)
  public enum PeriodUnitEnum {
    @SerializedName("month")
    MONTH("month"),
    @SerializedName("year")
    YEAR("year");

    private String value;

    PeriodUnitEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PeriodUnitEnum fromValue(String input) {
      for (PeriodUnitEnum b : PeriodUnitEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PeriodUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PeriodUnitEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public PeriodUnitEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return PeriodUnitEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("PeriodUnit")
  private PeriodUnitEnum periodUnit = null;

  /**
   * Gets or Sets userAction
   */
  @JsonAdapter(UserActionEnum.Adapter.class)
  public enum UserActionEnum {
    @SerializedName("ModifyDBInstanceChargeType")
    MODIFYDBINSTANCECHARGETYPE("ModifyDBInstanceChargeType"),
    @SerializedName("ModifyDBInstanceSpec")
    MODIFYDBINSTANCESPEC("ModifyDBInstanceSpec");

    private String value;

    UserActionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static UserActionEnum fromValue(String input) {
      for (UserActionEnum b : UserActionEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<UserActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserActionEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public UserActionEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return UserActionEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("UserAction")
  private UserActionEnum userAction = null;

  public DescribeExistDBInstancePriceRequest chargeType(ChargeTypeEnum chargeType) {
    this.chargeType = chargeType;
    return this;
  }

   /**
   * Get chargeType
   * @return chargeType
  **/
  @Schema(description = "")
  public ChargeTypeEnum getChargeType() {
    return chargeType;
  }

  public void setChargeType(ChargeTypeEnum chargeType) {
    this.chargeType = chargeType;
  }

  public DescribeExistDBInstancePriceRequest instances(List<InstanceForDescribeExistDBInstancePriceInput> instances) {
    this.instances = instances;
    return this;
  }

  public DescribeExistDBInstancePriceRequest addInstancesItem(InstanceForDescribeExistDBInstancePriceInput instancesItem) {
    if (this.instances == null) {
      this.instances = new ArrayList<InstanceForDescribeExistDBInstancePriceInput>();
    }
    this.instances.add(instancesItem);
    return this;
  }

   /**
   * Get instances
   * @return instances
  **/
  @Valid
  @Schema(description = "")
  public List<InstanceForDescribeExistDBInstancePriceInput> getInstances() {
    return instances;
  }

  public void setInstances(List<InstanceForDescribeExistDBInstancePriceInput> instances) {
    this.instances = instances;
  }

  public DescribeExistDBInstancePriceRequest period(Integer period) {
    this.period = period;
    return this;
  }

   /**
   * Get period
   * @return period
  **/
  @Schema(description = "")
  public Integer getPeriod() {
    return period;
  }

  public void setPeriod(Integer period) {
    this.period = period;
  }

  public DescribeExistDBInstancePriceRequest periodUnit(PeriodUnitEnum periodUnit) {
    this.periodUnit = periodUnit;
    return this;
  }

   /**
   * Get periodUnit
   * @return periodUnit
  **/
  @Schema(description = "")
  public PeriodUnitEnum getPeriodUnit() {
    return periodUnit;
  }

  public void setPeriodUnit(PeriodUnitEnum periodUnit) {
    this.periodUnit = periodUnit;
  }

  public DescribeExistDBInstancePriceRequest userAction(UserActionEnum userAction) {
    this.userAction = userAction;
    return this;
  }

   /**
   * Get userAction
   * @return userAction
  **/
  @Schema(description = "")
  public UserActionEnum getUserAction() {
    return userAction;
  }

  public void setUserAction(UserActionEnum userAction) {
    this.userAction = userAction;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeExistDBInstancePriceRequest describeExistDBInstancePriceRequest = (DescribeExistDBInstancePriceRequest) o;
    return Objects.equals(this.chargeType, describeExistDBInstancePriceRequest.chargeType) &&
        Objects.equals(this.instances, describeExistDBInstancePriceRequest.instances) &&
        Objects.equals(this.period, describeExistDBInstancePriceRequest.period) &&
        Objects.equals(this.periodUnit, describeExistDBInstancePriceRequest.periodUnit) &&
        Objects.equals(this.userAction, describeExistDBInstancePriceRequest.userAction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chargeType, instances, period, periodUnit, userAction);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeExistDBInstancePriceRequest {\n");
    
    sb.append("    chargeType: ").append(toIndentedString(chargeType)).append("\n");
    sb.append("    instances: ").append(toIndentedString(instances)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    periodUnit: ").append(toIndentedString(periodUnit)).append("\n");
    sb.append("    userAction: ").append(toIndentedString(userAction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
