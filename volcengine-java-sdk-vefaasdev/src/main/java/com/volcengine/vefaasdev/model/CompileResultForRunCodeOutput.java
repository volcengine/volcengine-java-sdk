/*
 * vefaas_dev
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.vefaasdev.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * CompileResultForRunCodeOutput
 */



public class CompileResultForRunCodeOutput {
  @SerializedName("CpuTime")
  private String cpuTime = null;

  @SerializedName("ExecutionTime")
  private String executionTime = null;

  @SerializedName("Status")
  private String status = null;

  @SerializedName("Stderr")
  private String stderr = null;

  @SerializedName("Stdout")
  private String stdout = null;

  public CompileResultForRunCodeOutput cpuTime(String cpuTime) {
    this.cpuTime = cpuTime;
    return this;
  }

   /**
   * Get cpuTime
   * @return cpuTime
  **/
  @Schema(description = "")
  public String getCpuTime() {
    return cpuTime;
  }

  public void setCpuTime(String cpuTime) {
    this.cpuTime = cpuTime;
  }

  public CompileResultForRunCodeOutput executionTime(String executionTime) {
    this.executionTime = executionTime;
    return this;
  }

   /**
   * Get executionTime
   * @return executionTime
  **/
  @Schema(description = "")
  public String getExecutionTime() {
    return executionTime;
  }

  public void setExecutionTime(String executionTime) {
    this.executionTime = executionTime;
  }

  public CompileResultForRunCodeOutput status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public CompileResultForRunCodeOutput stderr(String stderr) {
    this.stderr = stderr;
    return this;
  }

   /**
   * Get stderr
   * @return stderr
  **/
  @Schema(description = "")
  public String getStderr() {
    return stderr;
  }

  public void setStderr(String stderr) {
    this.stderr = stderr;
  }

  public CompileResultForRunCodeOutput stdout(String stdout) {
    this.stdout = stdout;
    return this;
  }

   /**
   * Get stdout
   * @return stdout
  **/
  @Schema(description = "")
  public String getStdout() {
    return stdout;
  }

  public void setStdout(String stdout) {
    this.stdout = stdout;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompileResultForRunCodeOutput compileResultForRunCodeOutput = (CompileResultForRunCodeOutput) o;
    return Objects.equals(this.cpuTime, compileResultForRunCodeOutput.cpuTime) &&
        Objects.equals(this.executionTime, compileResultForRunCodeOutput.executionTime) &&
        Objects.equals(this.status, compileResultForRunCodeOutput.status) &&
        Objects.equals(this.stderr, compileResultForRunCodeOutput.stderr) &&
        Objects.equals(this.stdout, compileResultForRunCodeOutput.stdout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cpuTime, executionTime, status, stderr, stdout);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompileResultForRunCodeOutput {\n");
    
    sb.append("    cpuTime: ").append(toIndentedString(cpuTime)).append("\n");
    sb.append("    executionTime: ").append(toIndentedString(executionTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    stderr: ").append(toIndentedString(stderr)).append("\n");
    sb.append("    stdout: ").append(toIndentedString(stdout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
