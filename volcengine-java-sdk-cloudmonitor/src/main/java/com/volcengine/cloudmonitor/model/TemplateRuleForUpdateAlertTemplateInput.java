/*
 * cloudmonitor
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.cloudmonitor.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.cloudmonitor.model.LevelConditionForUpdateAlertTemplateInput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * TemplateRuleForUpdateAlertTemplateInput
 */



public class TemplateRuleForUpdateAlertTemplateInput {
  @SerializedName("ConditionOperator")
  private String conditionOperator = null;

  @SerializedName("EvaluationCount")
  private Integer evaluationCount = null;

  @SerializedName("LevelConditions")
  private List<LevelConditionForUpdateAlertTemplateInput> levelConditions = null;

  @SerializedName("MultipleConditions")
  private Boolean multipleConditions = null;

  @SerializedName("Name")
  private String name = null;

  @SerializedName("Namespace")
  private String namespace = null;

  @SerializedName("SubNamespace")
  private String subNamespace = null;

  public TemplateRuleForUpdateAlertTemplateInput conditionOperator(String conditionOperator) {
    this.conditionOperator = conditionOperator;
    return this;
  }

   /**
   * Get conditionOperator
   * @return conditionOperator
  **/
  @Schema(description = "")
  public String getConditionOperator() {
    return conditionOperator;
  }

  public void setConditionOperator(String conditionOperator) {
    this.conditionOperator = conditionOperator;
  }

  public TemplateRuleForUpdateAlertTemplateInput evaluationCount(Integer evaluationCount) {
    this.evaluationCount = evaluationCount;
    return this;
  }

   /**
   * Get evaluationCount
   * @return evaluationCount
  **/
  @Schema(description = "")
  public Integer getEvaluationCount() {
    return evaluationCount;
  }

  public void setEvaluationCount(Integer evaluationCount) {
    this.evaluationCount = evaluationCount;
  }

  public TemplateRuleForUpdateAlertTemplateInput levelConditions(List<LevelConditionForUpdateAlertTemplateInput> levelConditions) {
    this.levelConditions = levelConditions;
    return this;
  }

  public TemplateRuleForUpdateAlertTemplateInput addLevelConditionsItem(LevelConditionForUpdateAlertTemplateInput levelConditionsItem) {
    if (this.levelConditions == null) {
      this.levelConditions = new ArrayList<LevelConditionForUpdateAlertTemplateInput>();
    }
    this.levelConditions.add(levelConditionsItem);
    return this;
  }

   /**
   * Get levelConditions
   * @return levelConditions
  **/
  @Valid
  @Schema(description = "")
  public List<LevelConditionForUpdateAlertTemplateInput> getLevelConditions() {
    return levelConditions;
  }

  public void setLevelConditions(List<LevelConditionForUpdateAlertTemplateInput> levelConditions) {
    this.levelConditions = levelConditions;
  }

  public TemplateRuleForUpdateAlertTemplateInput multipleConditions(Boolean multipleConditions) {
    this.multipleConditions = multipleConditions;
    return this;
  }

   /**
   * Get multipleConditions
   * @return multipleConditions
  **/
  @Schema(description = "")
  public Boolean isMultipleConditions() {
    return multipleConditions;
  }

  public void setMultipleConditions(Boolean multipleConditions) {
    this.multipleConditions = multipleConditions;
  }

  public TemplateRuleForUpdateAlertTemplateInput name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public TemplateRuleForUpdateAlertTemplateInput namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

   /**
   * Get namespace
   * @return namespace
  **/
  @Schema(description = "")
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }

  public TemplateRuleForUpdateAlertTemplateInput subNamespace(String subNamespace) {
    this.subNamespace = subNamespace;
    return this;
  }

   /**
   * Get subNamespace
   * @return subNamespace
  **/
  @Schema(description = "")
  public String getSubNamespace() {
    return subNamespace;
  }

  public void setSubNamespace(String subNamespace) {
    this.subNamespace = subNamespace;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateRuleForUpdateAlertTemplateInput templateRuleForUpdateAlertTemplateInput = (TemplateRuleForUpdateAlertTemplateInput) o;
    return Objects.equals(this.conditionOperator, templateRuleForUpdateAlertTemplateInput.conditionOperator) &&
        Objects.equals(this.evaluationCount, templateRuleForUpdateAlertTemplateInput.evaluationCount) &&
        Objects.equals(this.levelConditions, templateRuleForUpdateAlertTemplateInput.levelConditions) &&
        Objects.equals(this.multipleConditions, templateRuleForUpdateAlertTemplateInput.multipleConditions) &&
        Objects.equals(this.name, templateRuleForUpdateAlertTemplateInput.name) &&
        Objects.equals(this.namespace, templateRuleForUpdateAlertTemplateInput.namespace) &&
        Objects.equals(this.subNamespace, templateRuleForUpdateAlertTemplateInput.subNamespace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditionOperator, evaluationCount, levelConditions, multipleConditions, name, namespace, subNamespace);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateRuleForUpdateAlertTemplateInput {\n");
    
    sb.append("    conditionOperator: ").append(toIndentedString(conditionOperator)).append("\n");
    sb.append("    evaluationCount: ").append(toIndentedString(evaluationCount)).append("\n");
    sb.append("    levelConditions: ").append(toIndentedString(levelConditions)).append("\n");
    sb.append("    multipleConditions: ").append(toIndentedString(multipleConditions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    subNamespace: ").append(toIndentedString(subNamespace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
