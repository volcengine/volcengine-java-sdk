/*
 * rds_mysql_v2
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.volcengine.rdsmysqlv2.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.volcengine.rdsmysqlv2.model.AddressForDescribeDBInstanceDetailOutput;
import com.volcengine.rdsmysqlv2.model.ReadOnlyNodeWeightForDescribeDBInstanceDetailOutput;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * EndpointForDescribeDBInstanceDetailOutput
 */



public class EndpointForDescribeDBInstanceDetailOutput {
  @SerializedName("Addresses")
  private List<AddressForDescribeDBInstanceDetailOutput> addresses = null;

  @SerializedName("AutoAddNewNodes")
  private String autoAddNewNodes = null;

  @SerializedName("ConnectionInfoTags")
  private List<String> connectionInfoTags = null;

  @SerializedName("ConnectionMode")
  private String connectionMode = null;

  @SerializedName("ConnectionPoolType")
  private String connectionPoolType = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("EnableConnectionPersistent")
  private Boolean enableConnectionPersistent = null;

  @SerializedName("EnableReadOnly")
  private String enableReadOnly = null;

  @SerializedName("EnableReadWriteSplitting")
  private String enableReadWriteSplitting = null;

  @SerializedName("EndpointId")
  private String endpointId = null;

  @SerializedName("EndpointName")
  private String endpointName = null;

  @SerializedName("EndpointType")
  private String endpointType = null;

  @SerializedName("IdleConnectionReclaim")
  private Boolean idleConnectionReclaim = null;

  @SerializedName("ImplicitTransSplit")
  private Boolean implicitTransSplit = null;

  @SerializedName("MasterNodeRouting")
  private Boolean masterNodeRouting = null;

  @SerializedName("MasterProtectorTimeout")
  private Integer masterProtectorTimeout = null;

  @SerializedName("MultiStatementsMode")
  private String multiStatementsMode = null;

  @SerializedName("OverloadProtection")
  private Boolean overloadProtection = null;

  @SerializedName("ReadOnlyNodeDistributionType")
  private String readOnlyNodeDistributionType = null;

  @SerializedName("ReadOnlyNodeMaxDelayTime")
  private Integer readOnlyNodeMaxDelayTime = null;

  @SerializedName("ReadOnlyNodeWeight")
  private List<ReadOnlyNodeWeightForDescribeDBInstanceDetailOutput> readOnlyNodeWeight = null;

  @SerializedName("ReadWriteMode")
  private String readWriteMode = null;

  public EndpointForDescribeDBInstanceDetailOutput addresses(List<AddressForDescribeDBInstanceDetailOutput> addresses) {
    this.addresses = addresses;
    return this;
  }

  public EndpointForDescribeDBInstanceDetailOutput addAddressesItem(AddressForDescribeDBInstanceDetailOutput addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<AddressForDescribeDBInstanceDetailOutput>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

   /**
   * Get addresses
   * @return addresses
  **/
  @Valid
  @Schema(description = "")
  public List<AddressForDescribeDBInstanceDetailOutput> getAddresses() {
    return addresses;
  }

  public void setAddresses(List<AddressForDescribeDBInstanceDetailOutput> addresses) {
    this.addresses = addresses;
  }

  public EndpointForDescribeDBInstanceDetailOutput autoAddNewNodes(String autoAddNewNodes) {
    this.autoAddNewNodes = autoAddNewNodes;
    return this;
  }

   /**
   * Get autoAddNewNodes
   * @return autoAddNewNodes
  **/
  @Schema(description = "")
  public String getAutoAddNewNodes() {
    return autoAddNewNodes;
  }

  public void setAutoAddNewNodes(String autoAddNewNodes) {
    this.autoAddNewNodes = autoAddNewNodes;
  }

  public EndpointForDescribeDBInstanceDetailOutput connectionInfoTags(List<String> connectionInfoTags) {
    this.connectionInfoTags = connectionInfoTags;
    return this;
  }

  public EndpointForDescribeDBInstanceDetailOutput addConnectionInfoTagsItem(String connectionInfoTagsItem) {
    if (this.connectionInfoTags == null) {
      this.connectionInfoTags = new ArrayList<String>();
    }
    this.connectionInfoTags.add(connectionInfoTagsItem);
    return this;
  }

   /**
   * Get connectionInfoTags
   * @return connectionInfoTags
  **/
  @Schema(description = "")
  public List<String> getConnectionInfoTags() {
    return connectionInfoTags;
  }

  public void setConnectionInfoTags(List<String> connectionInfoTags) {
    this.connectionInfoTags = connectionInfoTags;
  }

  public EndpointForDescribeDBInstanceDetailOutput connectionMode(String connectionMode) {
    this.connectionMode = connectionMode;
    return this;
  }

   /**
   * Get connectionMode
   * @return connectionMode
  **/
  @Schema(description = "")
  public String getConnectionMode() {
    return connectionMode;
  }

  public void setConnectionMode(String connectionMode) {
    this.connectionMode = connectionMode;
  }

  public EndpointForDescribeDBInstanceDetailOutput connectionPoolType(String connectionPoolType) {
    this.connectionPoolType = connectionPoolType;
    return this;
  }

   /**
   * Get connectionPoolType
   * @return connectionPoolType
  **/
  @Schema(description = "")
  public String getConnectionPoolType() {
    return connectionPoolType;
  }

  public void setConnectionPoolType(String connectionPoolType) {
    this.connectionPoolType = connectionPoolType;
  }

  public EndpointForDescribeDBInstanceDetailOutput description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public EndpointForDescribeDBInstanceDetailOutput enableConnectionPersistent(Boolean enableConnectionPersistent) {
    this.enableConnectionPersistent = enableConnectionPersistent;
    return this;
  }

   /**
   * Get enableConnectionPersistent
   * @return enableConnectionPersistent
  **/
  @Schema(description = "")
  public Boolean isEnableConnectionPersistent() {
    return enableConnectionPersistent;
  }

  public void setEnableConnectionPersistent(Boolean enableConnectionPersistent) {
    this.enableConnectionPersistent = enableConnectionPersistent;
  }

  public EndpointForDescribeDBInstanceDetailOutput enableReadOnly(String enableReadOnly) {
    this.enableReadOnly = enableReadOnly;
    return this;
  }

   /**
   * Get enableReadOnly
   * @return enableReadOnly
  **/
  @Schema(description = "")
  public String getEnableReadOnly() {
    return enableReadOnly;
  }

  public void setEnableReadOnly(String enableReadOnly) {
    this.enableReadOnly = enableReadOnly;
  }

  public EndpointForDescribeDBInstanceDetailOutput enableReadWriteSplitting(String enableReadWriteSplitting) {
    this.enableReadWriteSplitting = enableReadWriteSplitting;
    return this;
  }

   /**
   * Get enableReadWriteSplitting
   * @return enableReadWriteSplitting
  **/
  @Schema(description = "")
  public String getEnableReadWriteSplitting() {
    return enableReadWriteSplitting;
  }

  public void setEnableReadWriteSplitting(String enableReadWriteSplitting) {
    this.enableReadWriteSplitting = enableReadWriteSplitting;
  }

  public EndpointForDescribeDBInstanceDetailOutput endpointId(String endpointId) {
    this.endpointId = endpointId;
    return this;
  }

   /**
   * Get endpointId
   * @return endpointId
  **/
  @Schema(description = "")
  public String getEndpointId() {
    return endpointId;
  }

  public void setEndpointId(String endpointId) {
    this.endpointId = endpointId;
  }

  public EndpointForDescribeDBInstanceDetailOutput endpointName(String endpointName) {
    this.endpointName = endpointName;
    return this;
  }

   /**
   * Get endpointName
   * @return endpointName
  **/
  @Schema(description = "")
  public String getEndpointName() {
    return endpointName;
  }

  public void setEndpointName(String endpointName) {
    this.endpointName = endpointName;
  }

  public EndpointForDescribeDBInstanceDetailOutput endpointType(String endpointType) {
    this.endpointType = endpointType;
    return this;
  }

   /**
   * Get endpointType
   * @return endpointType
  **/
  @Schema(description = "")
  public String getEndpointType() {
    return endpointType;
  }

  public void setEndpointType(String endpointType) {
    this.endpointType = endpointType;
  }

  public EndpointForDescribeDBInstanceDetailOutput idleConnectionReclaim(Boolean idleConnectionReclaim) {
    this.idleConnectionReclaim = idleConnectionReclaim;
    return this;
  }

   /**
   * Get idleConnectionReclaim
   * @return idleConnectionReclaim
  **/
  @Schema(description = "")
  public Boolean isIdleConnectionReclaim() {
    return idleConnectionReclaim;
  }

  public void setIdleConnectionReclaim(Boolean idleConnectionReclaim) {
    this.idleConnectionReclaim = idleConnectionReclaim;
  }

  public EndpointForDescribeDBInstanceDetailOutput implicitTransSplit(Boolean implicitTransSplit) {
    this.implicitTransSplit = implicitTransSplit;
    return this;
  }

   /**
   * Get implicitTransSplit
   * @return implicitTransSplit
  **/
  @Schema(description = "")
  public Boolean isImplicitTransSplit() {
    return implicitTransSplit;
  }

  public void setImplicitTransSplit(Boolean implicitTransSplit) {
    this.implicitTransSplit = implicitTransSplit;
  }

  public EndpointForDescribeDBInstanceDetailOutput masterNodeRouting(Boolean masterNodeRouting) {
    this.masterNodeRouting = masterNodeRouting;
    return this;
  }

   /**
   * Get masterNodeRouting
   * @return masterNodeRouting
  **/
  @Schema(description = "")
  public Boolean isMasterNodeRouting() {
    return masterNodeRouting;
  }

  public void setMasterNodeRouting(Boolean masterNodeRouting) {
    this.masterNodeRouting = masterNodeRouting;
  }

  public EndpointForDescribeDBInstanceDetailOutput masterProtectorTimeout(Integer masterProtectorTimeout) {
    this.masterProtectorTimeout = masterProtectorTimeout;
    return this;
  }

   /**
   * Get masterProtectorTimeout
   * @return masterProtectorTimeout
  **/
  @Schema(description = "")
  public Integer getMasterProtectorTimeout() {
    return masterProtectorTimeout;
  }

  public void setMasterProtectorTimeout(Integer masterProtectorTimeout) {
    this.masterProtectorTimeout = masterProtectorTimeout;
  }

  public EndpointForDescribeDBInstanceDetailOutput multiStatementsMode(String multiStatementsMode) {
    this.multiStatementsMode = multiStatementsMode;
    return this;
  }

   /**
   * Get multiStatementsMode
   * @return multiStatementsMode
  **/
  @Schema(description = "")
  public String getMultiStatementsMode() {
    return multiStatementsMode;
  }

  public void setMultiStatementsMode(String multiStatementsMode) {
    this.multiStatementsMode = multiStatementsMode;
  }

  public EndpointForDescribeDBInstanceDetailOutput overloadProtection(Boolean overloadProtection) {
    this.overloadProtection = overloadProtection;
    return this;
  }

   /**
   * Get overloadProtection
   * @return overloadProtection
  **/
  @Schema(description = "")
  public Boolean isOverloadProtection() {
    return overloadProtection;
  }

  public void setOverloadProtection(Boolean overloadProtection) {
    this.overloadProtection = overloadProtection;
  }

  public EndpointForDescribeDBInstanceDetailOutput readOnlyNodeDistributionType(String readOnlyNodeDistributionType) {
    this.readOnlyNodeDistributionType = readOnlyNodeDistributionType;
    return this;
  }

   /**
   * Get readOnlyNodeDistributionType
   * @return readOnlyNodeDistributionType
  **/
  @Schema(description = "")
  public String getReadOnlyNodeDistributionType() {
    return readOnlyNodeDistributionType;
  }

  public void setReadOnlyNodeDistributionType(String readOnlyNodeDistributionType) {
    this.readOnlyNodeDistributionType = readOnlyNodeDistributionType;
  }

  public EndpointForDescribeDBInstanceDetailOutput readOnlyNodeMaxDelayTime(Integer readOnlyNodeMaxDelayTime) {
    this.readOnlyNodeMaxDelayTime = readOnlyNodeMaxDelayTime;
    return this;
  }

   /**
   * Get readOnlyNodeMaxDelayTime
   * @return readOnlyNodeMaxDelayTime
  **/
  @Schema(description = "")
  public Integer getReadOnlyNodeMaxDelayTime() {
    return readOnlyNodeMaxDelayTime;
  }

  public void setReadOnlyNodeMaxDelayTime(Integer readOnlyNodeMaxDelayTime) {
    this.readOnlyNodeMaxDelayTime = readOnlyNodeMaxDelayTime;
  }

  public EndpointForDescribeDBInstanceDetailOutput readOnlyNodeWeight(List<ReadOnlyNodeWeightForDescribeDBInstanceDetailOutput> readOnlyNodeWeight) {
    this.readOnlyNodeWeight = readOnlyNodeWeight;
    return this;
  }

  public EndpointForDescribeDBInstanceDetailOutput addReadOnlyNodeWeightItem(ReadOnlyNodeWeightForDescribeDBInstanceDetailOutput readOnlyNodeWeightItem) {
    if (this.readOnlyNodeWeight == null) {
      this.readOnlyNodeWeight = new ArrayList<ReadOnlyNodeWeightForDescribeDBInstanceDetailOutput>();
    }
    this.readOnlyNodeWeight.add(readOnlyNodeWeightItem);
    return this;
  }

   /**
   * Get readOnlyNodeWeight
   * @return readOnlyNodeWeight
  **/
  @Valid
  @Schema(description = "")
  public List<ReadOnlyNodeWeightForDescribeDBInstanceDetailOutput> getReadOnlyNodeWeight() {
    return readOnlyNodeWeight;
  }

  public void setReadOnlyNodeWeight(List<ReadOnlyNodeWeightForDescribeDBInstanceDetailOutput> readOnlyNodeWeight) {
    this.readOnlyNodeWeight = readOnlyNodeWeight;
  }

  public EndpointForDescribeDBInstanceDetailOutput readWriteMode(String readWriteMode) {
    this.readWriteMode = readWriteMode;
    return this;
  }

   /**
   * Get readWriteMode
   * @return readWriteMode
  **/
  @Schema(description = "")
  public String getReadWriteMode() {
    return readWriteMode;
  }

  public void setReadWriteMode(String readWriteMode) {
    this.readWriteMode = readWriteMode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointForDescribeDBInstanceDetailOutput endpointForDescribeDBInstanceDetailOutput = (EndpointForDescribeDBInstanceDetailOutput) o;
    return Objects.equals(this.addresses, endpointForDescribeDBInstanceDetailOutput.addresses) &&
        Objects.equals(this.autoAddNewNodes, endpointForDescribeDBInstanceDetailOutput.autoAddNewNodes) &&
        Objects.equals(this.connectionInfoTags, endpointForDescribeDBInstanceDetailOutput.connectionInfoTags) &&
        Objects.equals(this.connectionMode, endpointForDescribeDBInstanceDetailOutput.connectionMode) &&
        Objects.equals(this.connectionPoolType, endpointForDescribeDBInstanceDetailOutput.connectionPoolType) &&
        Objects.equals(this.description, endpointForDescribeDBInstanceDetailOutput.description) &&
        Objects.equals(this.enableConnectionPersistent, endpointForDescribeDBInstanceDetailOutput.enableConnectionPersistent) &&
        Objects.equals(this.enableReadOnly, endpointForDescribeDBInstanceDetailOutput.enableReadOnly) &&
        Objects.equals(this.enableReadWriteSplitting, endpointForDescribeDBInstanceDetailOutput.enableReadWriteSplitting) &&
        Objects.equals(this.endpointId, endpointForDescribeDBInstanceDetailOutput.endpointId) &&
        Objects.equals(this.endpointName, endpointForDescribeDBInstanceDetailOutput.endpointName) &&
        Objects.equals(this.endpointType, endpointForDescribeDBInstanceDetailOutput.endpointType) &&
        Objects.equals(this.idleConnectionReclaim, endpointForDescribeDBInstanceDetailOutput.idleConnectionReclaim) &&
        Objects.equals(this.implicitTransSplit, endpointForDescribeDBInstanceDetailOutput.implicitTransSplit) &&
        Objects.equals(this.masterNodeRouting, endpointForDescribeDBInstanceDetailOutput.masterNodeRouting) &&
        Objects.equals(this.masterProtectorTimeout, endpointForDescribeDBInstanceDetailOutput.masterProtectorTimeout) &&
        Objects.equals(this.multiStatementsMode, endpointForDescribeDBInstanceDetailOutput.multiStatementsMode) &&
        Objects.equals(this.overloadProtection, endpointForDescribeDBInstanceDetailOutput.overloadProtection) &&
        Objects.equals(this.readOnlyNodeDistributionType, endpointForDescribeDBInstanceDetailOutput.readOnlyNodeDistributionType) &&
        Objects.equals(this.readOnlyNodeMaxDelayTime, endpointForDescribeDBInstanceDetailOutput.readOnlyNodeMaxDelayTime) &&
        Objects.equals(this.readOnlyNodeWeight, endpointForDescribeDBInstanceDetailOutput.readOnlyNodeWeight) &&
        Objects.equals(this.readWriteMode, endpointForDescribeDBInstanceDetailOutput.readWriteMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addresses, autoAddNewNodes, connectionInfoTags, connectionMode, connectionPoolType, description, enableConnectionPersistent, enableReadOnly, enableReadWriteSplitting, endpointId, endpointName, endpointType, idleConnectionReclaim, implicitTransSplit, masterNodeRouting, masterProtectorTimeout, multiStatementsMode, overloadProtection, readOnlyNodeDistributionType, readOnlyNodeMaxDelayTime, readOnlyNodeWeight, readWriteMode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointForDescribeDBInstanceDetailOutput {\n");
    
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    autoAddNewNodes: ").append(toIndentedString(autoAddNewNodes)).append("\n");
    sb.append("    connectionInfoTags: ").append(toIndentedString(connectionInfoTags)).append("\n");
    sb.append("    connectionMode: ").append(toIndentedString(connectionMode)).append("\n");
    sb.append("    connectionPoolType: ").append(toIndentedString(connectionPoolType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enableConnectionPersistent: ").append(toIndentedString(enableConnectionPersistent)).append("\n");
    sb.append("    enableReadOnly: ").append(toIndentedString(enableReadOnly)).append("\n");
    sb.append("    enableReadWriteSplitting: ").append(toIndentedString(enableReadWriteSplitting)).append("\n");
    sb.append("    endpointId: ").append(toIndentedString(endpointId)).append("\n");
    sb.append("    endpointName: ").append(toIndentedString(endpointName)).append("\n");
    sb.append("    endpointType: ").append(toIndentedString(endpointType)).append("\n");
    sb.append("    idleConnectionReclaim: ").append(toIndentedString(idleConnectionReclaim)).append("\n");
    sb.append("    implicitTransSplit: ").append(toIndentedString(implicitTransSplit)).append("\n");
    sb.append("    masterNodeRouting: ").append(toIndentedString(masterNodeRouting)).append("\n");
    sb.append("    masterProtectorTimeout: ").append(toIndentedString(masterProtectorTimeout)).append("\n");
    sb.append("    multiStatementsMode: ").append(toIndentedString(multiStatementsMode)).append("\n");
    sb.append("    overloadProtection: ").append(toIndentedString(overloadProtection)).append("\n");
    sb.append("    readOnlyNodeDistributionType: ").append(toIndentedString(readOnlyNodeDistributionType)).append("\n");
    sb.append("    readOnlyNodeMaxDelayTime: ").append(toIndentedString(readOnlyNodeMaxDelayTime)).append("\n");
    sb.append("    readOnlyNodeWeight: ").append(toIndentedString(readOnlyNodeWeight)).append("\n");
    sb.append("    readWriteMode: ").append(toIndentedString(readWriteMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
